
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	78 0f 00 20 09 19 00 00 2d 52 00 00 c1 18 00 00     x.. ....-R......
  10:	c1 18 00 00 c1 18 00 00 c1 18 00 00 c1 18 00 00     ................
	...
  2c:	b9 15 00 00 c1 18 00 00 00 00 00 00 5d 15 00 00     ............]...
  3c:	c1 18 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
  50:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
  60:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
  70:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
  80:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
  90:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
  a0:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
  b0:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
  c0:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
  d0:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
  e0:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
  f0:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
 100:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
 110:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
 120:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
 130:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
 140:	49 16 00 00 49 16 00 00 49 16 00 00 49 16 00 00     I...I...I...I...
 150:	49 16 00 00                                         I...

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     18c:	4607      	mov	r7, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e09      	ldr	r6, [sp, #36]	; 0x24
     194:	4615      	mov	r5, r2
     196:	463c      	mov	r4, r7
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c5 	bne.w	32a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xaa>
     1a0:	4282      	cmp	r2, r0
     1a2:	fab2 f782 	clz	r7, r2
     1a6:	d946      	bls.n	236 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x42>
     1a8:	b14f      	cbz	r7, 1be <__udivmoddi4+0x36>
     1aa:	f1c7 0e20 	rsb	lr, r7, #32
     1ae:	fa00 f307 	lsl.w	r3, r0, r7
     1b2:	40bd      	lsls	r5, r7
     1b4:	fa24 fe0e 	lsr.w	lr, r4, lr
     1b8:	40bc      	lsls	r4, r7
     1ba:	ea4e 0c03 	orr.w	ip, lr, r3
     1be:	ea4f 4815 	mov.w	r8, r5, lsr #16
     1c2:	fa1f fe85 	uxth.w	lr, r5
     1c6:	0c22      	lsrs	r2, r4, #16
     1c8:	fbbc f9f8 	udiv	r9, ip, r8
     1cc:	fb08 c319 	mls	r3, r8, r9, ip
     1d0:	fb09 fa0e 	mul.w	sl, r9, lr
     1d4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     1d8:	459a      	cmp	sl, r3
     1da:	d928      	bls.n	22e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x3a>
     1dc:	18eb      	adds	r3, r5, r3
     1de:	f109 30ff 	add.w	r0, r9, #4294967295
     1e2:	d204      	bcs.n	1ee <CONFIG_SRAM_SIZE+0x2e>
     1e4:	459a      	cmp	sl, r3
     1e6:	d902      	bls.n	1ee <CONFIG_SRAM_SIZE+0x2e>
     1e8:	f1a9 0002 	sub.w	r0, r9, #2
     1ec:	442b      	add	r3, r5
     1ee:	eba3 030a 	sub.w	r3, r3, sl
     1f2:	b2a4      	uxth	r4, r4
     1f4:	fbb3 f2f8 	udiv	r2, r3, r8
     1f8:	fb08 3312 	mls	r3, r8, r2, r3
     1fc:	fb02 fe0e 	mul.w	lr, r2, lr
     200:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     204:	45a6      	cmp	lr, r4
     206:	d914      	bls.n	232 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x3e>
     208:	192c      	adds	r4, r5, r4
     20a:	f102 33ff 	add.w	r3, r2, #4294967295
     20e:	d203      	bcs.n	218 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x24>
     210:	45a6      	cmp	lr, r4
     212:	d901      	bls.n	218 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x24>
     214:	1e93      	subs	r3, r2, #2
     216:	442c      	add	r4, r5
     218:	eba4 040e 	sub.w	r4, r4, lr
     21c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     220:	b11e      	cbz	r6, 22a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x36>
     222:	40fc      	lsrs	r4, r7
     224:	2300      	movs	r3, #0
     226:	6034      	str	r4, [r6, #0]
     228:	6073      	str	r3, [r6, #4]
     22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     22e:	4648      	mov	r0, r9
     230:	e7dd      	b.n	1ee <CONFIG_SRAM_SIZE+0x2e>
     232:	4613      	mov	r3, r2
     234:	e7f0      	b.n	218 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x24>
     236:	b902      	cbnz	r2, 23a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x46>
     238:	deff      	udf	#255	; 0xff
     23a:	bb87      	cbnz	r7, 29e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1e>
     23c:	1a83      	subs	r3, r0, r2
     23e:	2101      	movs	r1, #1
     240:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     244:	b2aa      	uxth	r2, r5
     246:	0c20      	lsrs	r0, r4, #16
     248:	fbb3 fcfe 	udiv	ip, r3, lr
     24c:	fb0e 331c 	mls	r3, lr, ip, r3
     250:	fb0c f802 	mul.w	r8, ip, r2
     254:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     258:	4598      	cmp	r8, r3
     25a:	d962      	bls.n	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     25c:	18eb      	adds	r3, r5, r3
     25e:	f10c 30ff 	add.w	r0, ip, #4294967295
     262:	d204      	bcs.n	26e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x7a>
     264:	4598      	cmp	r8, r3
     266:	d902      	bls.n	26e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x7a>
     268:	f1ac 0002 	sub.w	r0, ip, #2
     26c:	442b      	add	r3, r5
     26e:	eba3 0308 	sub.w	r3, r3, r8
     272:	b2a4      	uxth	r4, r4
     274:	fbb3 fcfe 	udiv	ip, r3, lr
     278:	fb0e 331c 	mls	r3, lr, ip, r3
     27c:	fb0c f202 	mul.w	r2, ip, r2
     280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     284:	42a2      	cmp	r2, r4
     286:	d94e      	bls.n	326 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa6>
     288:	192c      	adds	r4, r5, r4
     28a:	f10c 33ff 	add.w	r3, ip, #4294967295
     28e:	d204      	bcs.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     290:	42a2      	cmp	r2, r4
     292:	d902      	bls.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     294:	f1ac 0302 	sub.w	r3, ip, #2
     298:	442c      	add	r4, r5
     29a:	1aa4      	subs	r4, r4, r2
     29c:	e7be      	b.n	21c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x28>
     29e:	f1c7 0c20 	rsb	ip, r7, #32
     2a2:	40bd      	lsls	r5, r7
     2a4:	fa00 f307 	lsl.w	r3, r0, r7
     2a8:	fa20 f80c 	lsr.w	r8, r0, ip
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2b0:	fa24 fc0c 	lsr.w	ip, r4, ip
     2b4:	40bc      	lsls	r4, r7
     2b6:	ea4c 0203 	orr.w	r2, ip, r3
     2ba:	b2ab      	uxth	r3, r5
     2bc:	fbb8 fcfe 	udiv	ip, r8, lr
     2c0:	0c11      	lsrs	r1, r2, #16
     2c2:	fb0e 801c 	mls	r0, lr, ip, r8
     2c6:	fb0c f903 	mul.w	r9, ip, r3
     2ca:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     2ce:	4581      	cmp	r9, r0
     2d0:	d923      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     2d2:	1828      	adds	r0, r5, r0
     2d4:	f10c 31ff 	add.w	r1, ip, #4294967295
     2d8:	d204      	bcs.n	2e4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x64>
     2da:	4581      	cmp	r9, r0
     2dc:	d902      	bls.n	2e4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x64>
     2de:	f1ac 0102 	sub.w	r1, ip, #2
     2e2:	4428      	add	r0, r5
     2e4:	eba0 0009 	sub.w	r0, r0, r9
     2e8:	b292      	uxth	r2, r2
     2ea:	fbb0 fcfe 	udiv	ip, r0, lr
     2ee:	fb0e 001c 	mls	r0, lr, ip, r0
     2f2:	fb0c f803 	mul.w	r8, ip, r3
     2f6:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2fa:	4598      	cmp	r8, r3
     2fc:	d90f      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     2fe:	18eb      	adds	r3, r5, r3
     300:	f10c 32ff 	add.w	r2, ip, #4294967295
     304:	d204      	bcs.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     306:	4598      	cmp	r8, r3
     308:	d902      	bls.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     30a:	f1ac 0202 	sub.w	r2, ip, #2
     30e:	442b      	add	r3, r5
     310:	eba3 0308 	sub.w	r3, r3, r8
     314:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     318:	e792      	b.n	240 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4c>
     31a:	4661      	mov	r1, ip
     31c:	e7e2      	b.n	2e4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x64>
     31e:	4662      	mov	r2, ip
     320:	e7f6      	b.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     322:	4660      	mov	r0, ip
     324:	e7a3      	b.n	26e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x7a>
     326:	4663      	mov	r3, ip
     328:	e7b7      	b.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     32a:	4283      	cmp	r3, r0
     32c:	d905      	bls.n	33a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xba>
     32e:	b10e      	cbz	r6, 334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     330:	e9c6 7000 	strd	r7, r0, [r6]
     334:	2100      	movs	r1, #0
     336:	4608      	mov	r0, r1
     338:	e777      	b.n	22a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x36>
     33a:	fab3 f183 	clz	r1, r3
     33e:	b981      	cbnz	r1, 362 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xe2>
     340:	4283      	cmp	r3, r0
     342:	d301      	bcc.n	348 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc8>
     344:	42ba      	cmp	r2, r7
     346:	d80a      	bhi.n	35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
     348:	1abc      	subs	r4, r7, r2
     34a:	eb60 0303 	sbc.w	r3, r0, r3
     34e:	2001      	movs	r0, #1
     350:	469c      	mov	ip, r3
     352:	2e00      	cmp	r6, #0
     354:	d067      	beq.n	426 <CONFIG_FLASH_SIZE+0x26>
     356:	e9c6 4c00 	strd	r4, ip, [r6]
     35a:	2100      	movs	r1, #0
     35c:	e765      	b.n	22a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x36>
     35e:	4608      	mov	r0, r1
     360:	e7f7      	b.n	352 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd2>
     362:	f1c1 0c20 	rsb	ip, r1, #32
     366:	408b      	lsls	r3, r1
     368:	fa02 f501 	lsl.w	r5, r2, r1
     36c:	fa22 f40c 	lsr.w	r4, r2, ip
     370:	fa20 fb0c 	lsr.w	fp, r0, ip
     374:	fa27 f20c 	lsr.w	r2, r7, ip
     378:	408f      	lsls	r7, r1
     37a:	431c      	orrs	r4, r3
     37c:	fa00 f301 	lsl.w	r3, r0, r1
     380:	ea4f 4914 	mov.w	r9, r4, lsr #16
     384:	4313      	orrs	r3, r2
     386:	fa1f fe84 	uxth.w	lr, r4
     38a:	0c1a      	lsrs	r2, r3, #16
     38c:	fbbb f8f9 	udiv	r8, fp, r9
     390:	fb09 bb18 	mls	fp, r9, r8, fp
     394:	fb08 fa0e 	mul.w	sl, r8, lr
     398:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     39c:	4592      	cmp	sl, r2
     39e:	d93e      	bls.n	41e <CONFIG_FLASH_SIZE+0x1e>
     3a0:	18a2      	adds	r2, r4, r2
     3a2:	f108 30ff 	add.w	r0, r8, #4294967295
     3a6:	d204      	bcs.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     3a8:	4592      	cmp	sl, r2
     3aa:	d902      	bls.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     3ac:	f1a8 0002 	sub.w	r0, r8, #2
     3b0:	4422      	add	r2, r4
     3b2:	eba2 020a 	sub.w	r2, r2, sl
     3b6:	b29b      	uxth	r3, r3
     3b8:	fbb2 f8f9 	udiv	r8, r2, r9
     3bc:	fb09 2218 	mls	r2, r9, r8, r2
     3c0:	fb08 fe0e 	mul.w	lr, r8, lr
     3c4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     3c8:	4596      	cmp	lr, r2
     3ca:	d92a      	bls.n	422 <CONFIG_FLASH_SIZE+0x22>
     3cc:	18a2      	adds	r2, r4, r2
     3ce:	f108 33ff 	add.w	r3, r8, #4294967295
     3d2:	d204      	bcs.n	3de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x15e>
     3d4:	4596      	cmp	lr, r2
     3d6:	d902      	bls.n	3de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x15e>
     3d8:	f1a8 0302 	sub.w	r3, r8, #2
     3dc:	4422      	add	r2, r4
     3de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3e2:	eba2 020e 	sub.w	r2, r2, lr
     3e6:	fba0 9305 	umull	r9, r3, r0, r5
     3ea:	429a      	cmp	r2, r3
     3ec:	46ce      	mov	lr, r9
     3ee:	4698      	mov	r8, r3
     3f0:	d302      	bcc.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     3f2:	d106      	bne.n	402 <CONFIG_FLASH_SIZE+0x2>
     3f4:	454f      	cmp	r7, r9
     3f6:	d204      	bcs.n	402 <CONFIG_FLASH_SIZE+0x2>
     3f8:	3801      	subs	r0, #1
     3fa:	ebb9 0e05 	subs.w	lr, r9, r5
     3fe:	eb63 0804 	sbc.w	r8, r3, r4
     402:	b186      	cbz	r6, 426 <CONFIG_FLASH_SIZE+0x26>
     404:	ebb7 030e 	subs.w	r3, r7, lr
     408:	eb62 0708 	sbc.w	r7, r2, r8
     40c:	fa07 fc0c 	lsl.w	ip, r7, ip
     410:	40cb      	lsrs	r3, r1
     412:	40cf      	lsrs	r7, r1
     414:	ea4c 0303 	orr.w	r3, ip, r3
     418:	e9c6 3700 	strd	r3, r7, [r6]
     41c:	e79d      	b.n	35a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xda>
     41e:	4640      	mov	r0, r8
     420:	e7c7      	b.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     422:	4643      	mov	r3, r8
     424:	e7db      	b.n	3de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x15e>
     426:	4631      	mov	r1, r6
     428:	e6ff      	b.n	22a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x36>
	...

0000042c <main>:
#include <zephyr/zephyr.h>
#include "drivers/gpio.h"
#include "hal/nrf_gpio.h"

void main(void)
{
     42c:	b580      	push	{r7, lr}
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

#if NRF_GPIO_HAS_SEL
    /* Preserve MCUSEL setting. */
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
     42e:	4a0f      	ldr	r2, [pc, #60]	; (46c <main+0x40>)
     430:	f8d2 323c 	ldr.w	r3, [r2, #572]	; 0x23c
     434:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
#else
    uint32_t cnf = 0;
#endif
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
     438:	f043 0303 	orr.w	r3, r3, #3
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);

    reg->PIN_CNF[pin_number] = cnf;
     43c:	f8c2 323c 	str.w	r3, [r2, #572]	; 0x23c
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
     440:	4e0a      	ldr	r6, [pc, #40]	; (46c <main+0x40>)
     442:	f44f 4700 	mov.w	r7, #32768	; 0x8000
     446:	60f7      	str	r7, [r6, #12]
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     448:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     44c:	2500      	movs	r5, #0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     44e:	4620      	mov	r0, r4
     450:	4629      	mov	r1, r5
     452:	f004 f943 	bl	46dc <z_impl_k_sleep>

	while(1)
	{
		nrf_gpio_pin_clear(NRF_GPIO_PIN_MAP(1,15));
		k_msleep(1000);
		printk("Hello World! %s\r\n", CONFIG_BOARD);
     456:	4906      	ldr	r1, [pc, #24]	; (470 <main+0x44>)
     458:	4806      	ldr	r0, [pc, #24]	; (474 <main+0x48>)
     45a:	f004 fcc7 	bl	4dec <printk>
    p_reg->OUTSET = set_mask;
     45e:	60b7      	str	r7, [r6, #8]
     460:	4620      	mov	r0, r4
     462:	4629      	mov	r1, r5
     464:	f004 f93a 	bl	46dc <z_impl_k_sleep>
     468:	e7ea      	b.n	440 <main+0x14>
     46a:	bf00      	nop
     46c:	50842800 	.word	0x50842800
     470:	000066f8 	.word	0x000066f8
     474:	00006704 	.word	0x00006704

00000478 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
     478:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
     47a:	4b02      	ldr	r3, [pc, #8]	; (484 <char_out+0xc>)
     47c:	681b      	ldr	r3, [r3, #0]
     47e:	4798      	blx	r3
}
     480:	bd08      	pop	{r3, pc}
     482:	bf00      	nop
     484:	20000000 	.word	0x20000000

00000488 <__printk_hook_install>:
	_char_out = fn;
     488:	4b01      	ldr	r3, [pc, #4]	; (490 <__printk_hook_install+0x8>)
     48a:	6018      	str	r0, [r3, #0]
}
     48c:	4770      	bx	lr
     48e:	bf00      	nop
     490:	20000000 	.word	0x20000000

00000494 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     494:	b500      	push	{lr}
     496:	b083      	sub	sp, #12
     498:	4602      	mov	r2, r0
     49a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     49c:	2100      	movs	r1, #0
     49e:	9100      	str	r1, [sp, #0]
     4a0:	4802      	ldr	r0, [pc, #8]	; (4ac <vprintk+0x18>)
     4a2:	f000 fa3b 	bl	91c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     4a6:	b003      	add	sp, #12
     4a8:	f85d fb04 	ldr.w	pc, [sp], #4
     4ac:	00000479 	.word	0x00000479

000004b0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     4b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4b4:	b083      	sub	sp, #12
     4b6:	4604      	mov	r4, r0
     4b8:	4608      	mov	r0, r1
     4ba:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4bc:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     4be:	f013 0f08 	tst.w	r3, #8
     4c2:	d105      	bne.n	4d0 <process_event+0x20>
     4c4:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     4c8:	2300      	movs	r3, #0
     4ca:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     4cc:	9301      	str	r3, [sp, #4]
}
     4ce:	e069      	b.n	5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>
		if (evt == EVT_COMPLETE) {
     4d0:	2901      	cmp	r1, #1
     4d2:	d009      	beq.n	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     4d4:	f043 0320 	orr.w	r3, r3, #32
     4d8:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4da:	f385 8811 	msr	BASEPRI, r5
     4de:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4e2:	b003      	add	sp, #12
     4e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4e8:	f043 0310 	orr.w	r3, r3, #16
     4ec:	8323      	strh	r3, [r4, #24]
     4ee:	e7f4      	b.n	4da <process_event+0x2a>
			evt = process_recheck(mgr);
     4f0:	4620      	mov	r0, r4
     4f2:	f004 fcb0 	bl	4e56 <process_recheck>
     4f6:	e057      	b.n	5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>
			res = mgr->last_res;
     4f8:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     4fc:	464a      	mov	r2, r9
     4fe:	4669      	mov	r1, sp
     500:	4620      	mov	r0, r4
     502:	f004 fcc1 	bl	4e88 <process_complete>
		onoff_transition_fn transit = NULL;
     506:	2700      	movs	r7, #0
     508:	e05a      	b.n	5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>
			transit = mgr->transitions->start;
     50a:	6923      	ldr	r3, [r4, #16]
     50c:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     50e:	2106      	movs	r1, #6
     510:	4620      	mov	r0, r4
     512:	f004 fc79 	bl	4e08 <set_state>
		res = 0;
     516:	f04f 0900 	mov.w	r9, #0
     51a:	e051      	b.n	5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>
			transit = mgr->transitions->stop;
     51c:	6923      	ldr	r3, [r4, #16]
     51e:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     520:	2104      	movs	r1, #4
     522:	4620      	mov	r0, r4
     524:	f004 fc70 	bl	4e08 <set_state>
		res = 0;
     528:	f04f 0900 	mov.w	r9, #0
     52c:	e048      	b.n	5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>
			transit = mgr->transitions->reset;
     52e:	6923      	ldr	r3, [r4, #16]
     530:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     532:	2105      	movs	r1, #5
     534:	4620      	mov	r0, r4
     536:	f004 fc67 	bl	4e08 <set_state>
		res = 0;
     53a:	f04f 0900 	mov.w	r9, #0
     53e:	e03f      	b.n	5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>
				   && !sys_slist_is_empty(&mgr->monitors);
     540:	2200      	movs	r2, #0
     542:	e046      	b.n	5d2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xea>
     544:	2200      	movs	r2, #0
     546:	e044      	b.n	5d2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xea>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     548:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     54c:	8323      	strh	r3, [r4, #24]
     54e:	f385 8811 	msr	BASEPRI, r5
     552:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     556:	2900      	cmp	r1, #0
     558:	d144      	bne.n	5e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfc>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     55a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     55c:	b12b      	cbz	r3, 56a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x82>
				notify_all(mgr, &clients, state, res);
     55e:	464b      	mov	r3, r9
     560:	4642      	mov	r2, r8
     562:	4669      	mov	r1, sp
     564:	4620      	mov	r0, r4
     566:	f004 fd06 	bl	4f76 <notify_all>
			if (transit != NULL) {
     56a:	b117      	cbz	r7, 572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
				transit(mgr, transition_complete);
     56c:	4925      	ldr	r1, [pc, #148]	; (604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>)
     56e:	4620      	mov	r0, r4
     570:	47b8      	blx	r7
	__asm__ volatile(
     572:	f04f 0320 	mov.w	r3, #32
     576:	f3ef 8511 	mrs	r5, BASEPRI
     57a:	f383 8812 	msr	BASEPRI_MAX, r3
     57e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     582:	8b23      	ldrh	r3, [r4, #24]
     584:	f023 0308 	bic.w	r3, r3, #8
     588:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     58a:	8b23      	ldrh	r3, [r4, #24]
     58c:	f013 0f10 	tst.w	r3, #16
     590:	d02e      	beq.n	5f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x108>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     592:	f023 0310 	bic.w	r3, r3, #16
     596:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     598:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     59a:	8b26      	ldrh	r6, [r4, #24]
     59c:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     5a0:	2800      	cmp	r0, #0
     5a2:	d09a      	beq.n	4da <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     5a4:	2802      	cmp	r0, #2
     5a6:	d0a3      	beq.n	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
		if (evt == EVT_NOP) {
     5a8:	2800      	cmp	r0, #0
     5aa:	d096      	beq.n	4da <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     5ac:	2801      	cmp	r0, #1
     5ae:	d0a3      	beq.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
		} else if (evt == EVT_START) {
     5b0:	2803      	cmp	r0, #3
     5b2:	d0aa      	beq.n	50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
		} else if (evt == EVT_STOP) {
     5b4:	2804      	cmp	r0, #4
     5b6:	d0b1      	beq.n	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
		} else if (evt == EVT_RESET) {
     5b8:	2805      	cmp	r0, #5
     5ba:	d0b8      	beq.n	52e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x46>
		onoff_transition_fn transit = NULL;
     5bc:	2700      	movs	r7, #0
		res = 0;
     5be:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5c0:	8b23      	ldrh	r3, [r4, #24]
     5c2:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5c6:	45b0      	cmp	r8, r6
     5c8:	d0ba      	beq.n	540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>
     5ca:	68a2      	ldr	r2, [r4, #8]
     5cc:	2a00      	cmp	r2, #0
     5ce:	d0b9      	beq.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
     5d0:	2201      	movs	r2, #1
		if (do_monitors
     5d2:	4611      	mov	r1, r2
     5d4:	2a00      	cmp	r2, #0
     5d6:	d1b7      	bne.n	548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>
     5d8:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     5da:	2a00      	cmp	r2, #0
     5dc:	d1b4      	bne.n	548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>
		    || (transit != NULL)) {
     5de:	2f00      	cmp	r7, #0
     5e0:	d1b2      	bne.n	548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>
     5e2:	e7d2      	b.n	58a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa2>
				notify_monitors(mgr, state, res);
     5e4:	464a      	mov	r2, r9
     5e6:	4641      	mov	r1, r8
     5e8:	4620      	mov	r0, r4
     5ea:	f004 fc15 	bl	4e18 <notify_monitors>
     5ee:	e7b4      	b.n	55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     5f0:	f013 0f20 	tst.w	r3, #32
     5f4:	d004      	beq.n	600 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x118>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     5f6:	f023 0320 	bic.w	r3, r3, #32
     5fa:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     5fc:	2002      	movs	r0, #2
     5fe:	e7cc      	b.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
		evt = EVT_NOP;
     600:	2000      	movs	r0, #0
     602:	e7ca      	b.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
     604:	00004fa5 	.word	0x00004fa5

00000608 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
     608:	b570      	push	{r4, r5, r6, lr}
     60a:	b082      	sub	sp, #8
     60c:	4604      	mov	r4, r0
	*conv = (struct conversion) {
     60e:	2300      	movs	r3, #0
     610:	6003      	str	r3, [r0, #0]
     612:	6043      	str	r3, [r0, #4]
     614:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
     616:	784b      	ldrb	r3, [r1, #1]
     618:	2b25      	cmp	r3, #37	; 0x25
     61a:	d002      	beq.n	622 <extract_conversion+0x1a>
     61c:	1c4e      	adds	r6, r1, #1
	bool loop = true;
     61e:	2501      	movs	r5, #1
     620:	e01f      	b.n	662 <extract_conversion+0x5a>
		conv->specifier = *sp++;
     622:	1c88      	adds	r0, r1, #2
     624:	70e3      	strb	r3, [r4, #3]
		return sp;
     626:	e145      	b.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
			conv->flag_dash = true;
     628:	7823      	ldrb	r3, [r4, #0]
     62a:	f043 0304 	orr.w	r3, r3, #4
     62e:	7023      	strb	r3, [r4, #0]
		if (loop) {
     630:	b1b5      	cbz	r5, 660 <extract_conversion+0x58>
			++sp;
     632:	3601      	adds	r6, #1
     634:	e014      	b.n	660 <extract_conversion+0x58>
			conv->flag_plus = true;
     636:	7823      	ldrb	r3, [r4, #0]
     638:	f043 0308 	orr.w	r3, r3, #8
     63c:	7023      	strb	r3, [r4, #0]
			break;
     63e:	e7f7      	b.n	630 <extract_conversion+0x28>
			conv->flag_space = true;
     640:	7823      	ldrb	r3, [r4, #0]
     642:	f043 0310 	orr.w	r3, r3, #16
     646:	7023      	strb	r3, [r4, #0]
			break;
     648:	e7f2      	b.n	630 <extract_conversion+0x28>
			conv->flag_hash = true;
     64a:	7823      	ldrb	r3, [r4, #0]
     64c:	f043 0320 	orr.w	r3, r3, #32
     650:	7023      	strb	r3, [r4, #0]
			break;
     652:	e7ed      	b.n	630 <extract_conversion+0x28>
			conv->flag_zero = true;
     654:	7823      	ldrb	r3, [r4, #0]
     656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     65a:	7023      	strb	r3, [r4, #0]
			break;
     65c:	e7e8      	b.n	630 <extract_conversion+0x28>
		switch (*sp) {
     65e:	2500      	movs	r5, #0
	} while (loop);
     660:	b345      	cbz	r5, 6b4 <extract_conversion+0xac>
		switch (*sp) {
     662:	7833      	ldrb	r3, [r6, #0]
     664:	3b20      	subs	r3, #32
     666:	2b10      	cmp	r3, #16
     668:	d8f9      	bhi.n	65e <extract_conversion+0x56>
     66a:	a201      	add	r2, pc, #4	; (adr r2, 670 <extract_conversion+0x68>)
     66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     670:	00000641 	.word	0x00000641
     674:	0000065f 	.word	0x0000065f
     678:	0000065f 	.word	0x0000065f
     67c:	0000064b 	.word	0x0000064b
     680:	0000065f 	.word	0x0000065f
     684:	0000065f 	.word	0x0000065f
     688:	0000065f 	.word	0x0000065f
     68c:	0000065f 	.word	0x0000065f
     690:	0000065f 	.word	0x0000065f
     694:	0000065f 	.word	0x0000065f
     698:	0000065f 	.word	0x0000065f
     69c:	00000637 	.word	0x00000637
     6a0:	0000065f 	.word	0x0000065f
     6a4:	00000629 	.word	0x00000629
     6a8:	0000065f 	.word	0x0000065f
     6ac:	0000065f 	.word	0x0000065f
     6b0:	00000655 	.word	0x00000655
	if (conv->flag_zero && conv->flag_dash) {
     6b4:	7823      	ldrb	r3, [r4, #0]
     6b6:	f003 0344 	and.w	r3, r3, #68	; 0x44
     6ba:	2b44      	cmp	r3, #68	; 0x44
     6bc:	d05f      	beq.n	77e <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
     6be:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
     6c0:	7823      	ldrb	r3, [r4, #0]
     6c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     6c6:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
     6c8:	7833      	ldrb	r3, [r6, #0]
     6ca:	2b2a      	cmp	r3, #42	; 0x2a
     6cc:	d05c      	beq.n	788 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
     6ce:	a801      	add	r0, sp, #4
     6d0:	f004 fcf9 	bl	50c6 <extract_decimal>
	if (sp != wp) {
     6d4:	9b01      	ldr	r3, [sp, #4]
     6d6:	429e      	cmp	r6, r3
     6d8:	d00f      	beq.n	6fa <extract_conversion+0xf2>
		conv->width_present = true;
     6da:	7823      	ldrb	r3, [r4, #0]
     6dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     6e0:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
     6e2:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
     6e4:	b2db      	uxtb	r3, r3
     6e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     6ea:	2800      	cmp	r0, #0
     6ec:	db54      	blt.n	798 <extract_conversion+0x190>
     6ee:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     6f0:	4313      	orrs	r3, r2
     6f2:	7822      	ldrb	r2, [r4, #0]
     6f4:	f363 0241 	bfi	r2, r3, #1, #1
     6f8:	7022      	strb	r2, [r4, #0]
	return sp;
     6fa:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
     6fc:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
     6fe:	781b      	ldrb	r3, [r3, #0]
     700:	2b2e      	cmp	r3, #46	; 0x2e
     702:	bf14      	ite	ne
     704:	2300      	movne	r3, #0
     706:	2301      	moveq	r3, #1
     708:	7862      	ldrb	r2, [r4, #1]
     70a:	f363 0241 	bfi	r2, r3, #1, #1
     70e:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
     710:	2b00      	cmp	r3, #0
     712:	d043      	beq.n	79c <extract_conversion+0x194>
	++sp;
     714:	9b01      	ldr	r3, [sp, #4]
     716:	1c5a      	adds	r2, r3, #1
     718:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
     71a:	785b      	ldrb	r3, [r3, #1]
     71c:	2b2a      	cmp	r3, #42	; 0x2a
     71e:	d03f      	beq.n	7a0 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
     720:	a801      	add	r0, sp, #4
     722:	f004 fcd0 	bl	50c6 <extract_decimal>
	conv->prec_value = prec;
     726:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
     728:	7823      	ldrb	r3, [r4, #0]
     72a:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     72e:	2800      	cmp	r0, #0
     730:	db3e      	blt.n	7b0 <extract_conversion+0x1a8>
     732:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     734:	4313      	orrs	r3, r2
     736:	7822      	ldrb	r2, [r4, #0]
     738:	f363 0241 	bfi	r2, r3, #1, #1
     73c:	7022      	strb	r2, [r4, #0]
	return sp;
     73e:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
     740:	7803      	ldrb	r3, [r0, #0]
     742:	3b4c      	subs	r3, #76	; 0x4c
     744:	2b2e      	cmp	r3, #46	; 0x2e
     746:	f200 809d 	bhi.w	884 <CONFIG_ISR_STACK_SIZE+0x84>
     74a:	e8df f003 	tbb	[pc, r3]
     74e:	9b90      	.short	0x9b90
     750:	9b9b9b9b 	.word	0x9b9b9b9b
     754:	9b9b9b9b 	.word	0x9b9b9b9b
     758:	9b9b9b9b 	.word	0x9b9b9b9b
     75c:	9b9b9b9b 	.word	0x9b9b9b9b
     760:	9b9b9b9b 	.word	0x9b9b9b9b
     764:	9b9b9b9b 	.word	0x9b9b9b9b
     768:	9b339b9b 	.word	0x9b339b9b
     76c:	9b459b57 	.word	0x9b459b57
     770:	9b9b9b9b 	.word	0x9b9b9b9b
     774:	9b899b9b 	.word	0x9b899b9b
     778:	9b9b9b9b 	.word	0x9b9b9b9b
     77c:	82          	.byte	0x82
     77d:	00          	.byte	0x00
		conv->flag_zero = false;
     77e:	7823      	ldrb	r3, [r4, #0]
     780:	f36f 1386 	bfc	r3, #6, #1
     784:	7023      	strb	r3, [r4, #0]
     786:	e79a      	b.n	6be <extract_conversion+0xb6>
		conv->width_star = true;
     788:	7863      	ldrb	r3, [r4, #1]
     78a:	f043 0301 	orr.w	r3, r3, #1
     78e:	7063      	strb	r3, [r4, #1]
		return ++sp;
     790:	4633      	mov	r3, r6
     792:	3301      	adds	r3, #1
     794:	9301      	str	r3, [sp, #4]
     796:	e7b1      	b.n	6fc <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
     798:	2201      	movs	r2, #1
     79a:	e7a9      	b.n	6f0 <extract_conversion+0xe8>
		return sp;
     79c:	9801      	ldr	r0, [sp, #4]
     79e:	e7cf      	b.n	740 <extract_conversion+0x138>
		conv->prec_star = true;
     7a0:	7863      	ldrb	r3, [r4, #1]
     7a2:	f043 0304 	orr.w	r3, r3, #4
     7a6:	7063      	strb	r3, [r4, #1]
		return ++sp;
     7a8:	4610      	mov	r0, r2
     7aa:	3001      	adds	r0, #1
     7ac:	9001      	str	r0, [sp, #4]
     7ae:	e7c7      	b.n	740 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
     7b0:	2201      	movs	r2, #1
     7b2:	e7bf      	b.n	734 <extract_conversion+0x12c>
		if (*++sp == 'h') {
     7b4:	1c42      	adds	r2, r0, #1
     7b6:	7843      	ldrb	r3, [r0, #1]
     7b8:	2b68      	cmp	r3, #104	; 0x68
     7ba:	d006      	beq.n	7ca <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
     7bc:	7863      	ldrb	r3, [r4, #1]
     7be:	2102      	movs	r1, #2
     7c0:	f361 03c6 	bfi	r3, r1, #3, #4
     7c4:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
     7c6:	4610      	mov	r0, r2
     7c8:	e01e      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
			conv->length_mod = LENGTH_HH;
     7ca:	7863      	ldrb	r3, [r4, #1]
     7cc:	2201      	movs	r2, #1
     7ce:	f362 03c6 	bfi	r3, r2, #3, #4
     7d2:	7063      	strb	r3, [r4, #1]
			++sp;
     7d4:	3002      	adds	r0, #2
     7d6:	e017      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
		if (*++sp == 'l') {
     7d8:	1c42      	adds	r2, r0, #1
     7da:	7843      	ldrb	r3, [r0, #1]
     7dc:	2b6c      	cmp	r3, #108	; 0x6c
     7de:	d006      	beq.n	7ee <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
     7e0:	7863      	ldrb	r3, [r4, #1]
     7e2:	2103      	movs	r1, #3
     7e4:	f361 03c6 	bfi	r3, r1, #3, #4
     7e8:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
     7ea:	4610      	mov	r0, r2
     7ec:	e00c      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
			conv->length_mod = LENGTH_LL;
     7ee:	7863      	ldrb	r3, [r4, #1]
     7f0:	2204      	movs	r2, #4
     7f2:	f362 03c6 	bfi	r3, r2, #3, #4
     7f6:	7063      	strb	r3, [r4, #1]
			++sp;
     7f8:	3002      	adds	r0, #2
     7fa:	e005      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
		conv->length_mod = LENGTH_J;
     7fc:	7863      	ldrb	r3, [r4, #1]
     7fe:	2205      	movs	r2, #5
     800:	f362 03c6 	bfi	r3, r2, #3, #4
     804:	7063      	strb	r3, [r4, #1]
		++sp;
     806:	3001      	adds	r0, #1
	conv->specifier = *sp++;
     808:	f810 3b01 	ldrb.w	r3, [r0], #1
     80c:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
     80e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     812:	2a37      	cmp	r2, #55	; 0x37
     814:	d87d      	bhi.n	912 <CONFIG_ISR_STACK_SIZE+0x112>
     816:	e8df f002 	tbb	[pc, r2]
     81a:	7c5e      	.short	0x7c5e
     81c:	5e5e7c7c 	.word	0x5e5e7c7c
     820:	7c7c7c5e 	.word	0x7c7c7c5e
     824:	7c7c7c7c 	.word	0x7c7c7c7c
     828:	7c7c7c7c 	.word	0x7c7c7c7c
     82c:	7c7c7c7c 	.word	0x7c7c7c7c
     830:	7c7c4f7c 	.word	0x7c7c4f7c
     834:	7c7c7c7c 	.word	0x7c7c7c7c
     838:	7c5e7c7c 	.word	0x7c5e7c7c
     83c:	5e5e3a4f 	.word	0x5e5e3a4f
     840:	7c3a7c5e 	.word	0x7c3a7c5e
     844:	657c7c7c 	.word	0x657c7c7c
     848:	7c7c714f 	.word	0x7c7c714f
     84c:	7c4f7c71 	.word	0x7c4f7c71
     850:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
     852:	7863      	ldrb	r3, [r4, #1]
     854:	2206      	movs	r2, #6
     856:	f362 03c6 	bfi	r3, r2, #3, #4
     85a:	7063      	strb	r3, [r4, #1]
		++sp;
     85c:	3001      	adds	r0, #1
		break;
     85e:	e7d3      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
		conv->length_mod = LENGTH_T;
     860:	7863      	ldrb	r3, [r4, #1]
     862:	2207      	movs	r2, #7
     864:	f362 03c6 	bfi	r3, r2, #3, #4
     868:	7063      	strb	r3, [r4, #1]
		++sp;
     86a:	3001      	adds	r0, #1
		break;
     86c:	e7cc      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
		conv->length_mod = LENGTH_UPPER_L;
     86e:	7863      	ldrb	r3, [r4, #1]
     870:	2208      	movs	r2, #8
     872:	f362 03c6 	bfi	r3, r2, #3, #4
     876:	7063      	strb	r3, [r4, #1]
		++sp;
     878:	3001      	adds	r0, #1
		conv->unsupported = true;
     87a:	7823      	ldrb	r3, [r4, #0]
     87c:	f043 0302 	orr.w	r3, r3, #2
     880:	7023      	strb	r3, [r4, #0]
		break;
     882:	e7c1      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
		conv->length_mod = LENGTH_NONE;
     884:	7863      	ldrb	r3, [r4, #1]
     886:	f36f 03c6 	bfc	r3, #3, #4
     88a:	7063      	strb	r3, [r4, #1]
		break;
     88c:	e7bc      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
		conv->specifier_cat = SPECIFIER_SINT;
     88e:	78a2      	ldrb	r2, [r4, #2]
     890:	2101      	movs	r1, #1
     892:	f361 0202 	bfi	r2, r1, #0, #3
     896:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     898:	7862      	ldrb	r2, [r4, #1]
     89a:	f002 0278 	and.w	r2, r2, #120	; 0x78
     89e:	2a40      	cmp	r2, #64	; 0x40
     8a0:	d010      	beq.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
		if (conv->specifier == 'c') {
     8a2:	2b63      	cmp	r3, #99	; 0x63
     8a4:	d013      	beq.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
	conv->unsupported |= unsupported;
     8a6:	7823      	ldrb	r3, [r4, #0]
     8a8:	f3c3 0240 	ubfx	r2, r3, #1, #1
     8ac:	4315      	orrs	r5, r2
     8ae:	f365 0341 	bfi	r3, r5, #1, #1
     8b2:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
     8b4:	b002      	add	sp, #8
     8b6:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
     8b8:	78a2      	ldrb	r2, [r4, #2]
     8ba:	2102      	movs	r1, #2
     8bc:	f361 0202 	bfi	r2, r1, #0, #3
     8c0:	70a2      	strb	r2, [r4, #2]
     8c2:	e7e9      	b.n	898 <CONFIG_ISR_STACK_SIZE+0x98>
			conv->invalid = true;
     8c4:	7821      	ldrb	r1, [r4, #0]
     8c6:	f041 0101 	orr.w	r1, r1, #1
     8ca:	7021      	strb	r1, [r4, #0]
     8cc:	e7e9      	b.n	8a2 <CONFIG_ISR_STACK_SIZE+0xa2>
			unsupported = (conv->length_mod != LENGTH_NONE);
     8ce:	1e15      	subs	r5, r2, #0
     8d0:	bf18      	it	ne
     8d2:	2501      	movne	r5, #1
     8d4:	e7e7      	b.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
		conv->specifier_cat = SPECIFIER_FP;
     8d6:	78a3      	ldrb	r3, [r4, #2]
     8d8:	2204      	movs	r2, #4
     8da:	f362 0302 	bfi	r3, r2, #0, #3
     8de:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
     8e0:	2501      	movs	r5, #1
			break;
     8e2:	e7e0      	b.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
		conv->specifier_cat = SPECIFIER_PTR;
     8e4:	78a3      	ldrb	r3, [r4, #2]
     8e6:	2203      	movs	r2, #3
     8e8:	f362 0302 	bfi	r3, r2, #0, #3
     8ec:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     8ee:	7863      	ldrb	r3, [r4, #1]
     8f0:	f003 0378 	and.w	r3, r3, #120	; 0x78
     8f4:	2b40      	cmp	r3, #64	; 0x40
     8f6:	d1d6      	bne.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
			unsupported = true;
     8f8:	2501      	movs	r5, #1
     8fa:	e7d4      	b.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
		conv->specifier_cat = SPECIFIER_PTR;
     8fc:	78a3      	ldrb	r3, [r4, #2]
     8fe:	2203      	movs	r2, #3
     900:	f362 0302 	bfi	r3, r2, #0, #3
     904:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
     906:	7863      	ldrb	r3, [r4, #1]
     908:	f013 0f78 	tst.w	r3, #120	; 0x78
     90c:	d0cb      	beq.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
			unsupported = true;
     90e:	2501      	movs	r5, #1
     910:	e7c9      	b.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
		conv->invalid = true;
     912:	7823      	ldrb	r3, [r4, #0]
     914:	f043 0301 	orr.w	r3, r3, #1
     918:	7023      	strb	r3, [r4, #0]
		break;
     91a:	e7c4      	b.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>

0000091c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     920:	b091      	sub	sp, #68	; 0x44
     922:	4606      	mov	r6, r0
     924:	460d      	mov	r5, r1
     926:	4691      	mov	r9, r2
     928:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     92a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     92c:	f899 0000 	ldrb.w	r0, [r9]
     930:	2800      	cmp	r0, #0
     932:	f000 82d5 	beq.w	ee0 <z_cbvprintf_impl+0x5c4>
		if (*fp != '%') {
     936:	2825      	cmp	r0, #37	; 0x25
     938:	d008      	beq.n	94c <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
     93a:	f109 0901 	add.w	r9, r9, #1
     93e:	4629      	mov	r1, r5
     940:	47b0      	blx	r6
     942:	2800      	cmp	r0, #0
     944:	f2c0 82cd 	blt.w	ee2 <z_cbvprintf_impl+0x5c6>
     948:	3401      	adds	r4, #1
			continue;
     94a:	e7ef      	b.n	92c <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     94c:	2300      	movs	r3, #0
     94e:	9304      	str	r3, [sp, #16]
     950:	9305      	str	r3, [sp, #20]
     952:	9306      	str	r3, [sp, #24]
     954:	9307      	str	r3, [sp, #28]
     956:	9308      	str	r3, [sp, #32]
     958:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     95a:	4649      	mov	r1, r9
     95c:	a806      	add	r0, sp, #24
     95e:	f7ff fe53 	bl	608 <extract_conversion>
     962:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     964:	f89d 3019 	ldrb.w	r3, [sp, #25]
     968:	f013 0f01 	tst.w	r3, #1
     96c:	f000 8097 	beq.w	a9e <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
     970:	9b03      	ldr	r3, [sp, #12]
     972:	1d1a      	adds	r2, r3, #4
     974:	9203      	str	r2, [sp, #12]
     976:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     978:	2f00      	cmp	r7, #0
     97a:	f2c0 8088 	blt.w	a8e <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     97e:	f89d 3019 	ldrb.w	r3, [sp, #25]
     982:	f013 0f04 	tst.w	r3, #4
     986:	f000 809c 	beq.w	ac2 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
     98a:	9b03      	ldr	r3, [sp, #12]
     98c:	1d1a      	adds	r2, r3, #4
     98e:	9203      	str	r2, [sp, #12]
     990:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     994:	f1ba 0f00 	cmp.w	sl, #0
     998:	f2c0 808a 	blt.w	ab0 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     99c:	2300      	movs	r3, #0
     99e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     9a0:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     9a2:	f89d 301a 	ldrb.w	r3, [sp, #26]
     9a6:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     9aa:	f89d 1019 	ldrb.w	r1, [sp, #25]
     9ae:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     9b2:	2b01      	cmp	r3, #1
     9b4:	f000 808e 	beq.w	ad4 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     9b8:	2b02      	cmp	r3, #2
     9ba:	f000 80d3 	beq.w	b64 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     9be:	2b04      	cmp	r3, #4
     9c0:	f000 8124 	beq.w	c0c <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     9c4:	2b03      	cmp	r3, #3
     9c6:	f000 813b 	beq.w	c40 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     9ca:	f89d 8018 	ldrb.w	r8, [sp, #24]
     9ce:	f018 0b03 	ands.w	fp, r8, #3
     9d2:	f040 813b 	bne.w	c4c <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     9d6:	f89d 301b 	ldrb.w	r3, [sp, #27]
     9da:	3b25      	subs	r3, #37	; 0x25
     9dc:	2b53      	cmp	r3, #83	; 0x53
     9de:	f200 81e6 	bhi.w	dae <z_cbvprintf_impl+0x492>
     9e2:	e8df f013 	tbh	[pc, r3, lsl #1]
     9e6:	0140      	.short	0x0140
     9e8:	01e401e4 	.word	0x01e401e4
     9ec:	01e401e4 	.word	0x01e401e4
     9f0:	01e401e4 	.word	0x01e401e4
     9f4:	01e401e4 	.word	0x01e401e4
     9f8:	01e401e4 	.word	0x01e401e4
     9fc:	01e401e4 	.word	0x01e401e4
     a00:	01e401e4 	.word	0x01e401e4
     a04:	01e401e4 	.word	0x01e401e4
     a08:	01e401e4 	.word	0x01e401e4
     a0c:	01e401e4 	.word	0x01e401e4
     a10:	01e401e4 	.word	0x01e401e4
     a14:	01e401e4 	.word	0x01e401e4
     a18:	01e401e4 	.word	0x01e401e4
     a1c:	01e401e4 	.word	0x01e401e4
     a20:	01e401e4 	.word	0x01e401e4
     a24:	01e401e4 	.word	0x01e401e4
     a28:	01e401e4 	.word	0x01e401e4
     a2c:	01e401e4 	.word	0x01e401e4
     a30:	01e401e4 	.word	0x01e401e4
     a34:	01e401e4 	.word	0x01e401e4
     a38:	01e401e4 	.word	0x01e401e4
     a3c:	01e401e4 	.word	0x01e401e4
     a40:	01e401e4 	.word	0x01e401e4
     a44:	01e401e4 	.word	0x01e401e4
     a48:	01e401e4 	.word	0x01e401e4
     a4c:	01e40181 	.word	0x01e40181
     a50:	01e401e4 	.word	0x01e401e4
     a54:	01e401e4 	.word	0x01e401e4
     a58:	01e401e4 	.word	0x01e401e4
     a5c:	01e401e4 	.word	0x01e401e4
     a60:	015e01e4 	.word	0x015e01e4
     a64:	01e40167 	.word	0x01e40167
     a68:	01e401e4 	.word	0x01e401e4
     a6c:	016701e4 	.word	0x016701e4
     a70:	01e401e4 	.word	0x01e401e4
     a74:	01e401e4 	.word	0x01e401e4
     a78:	018101be 	.word	0x018101be
     a7c:	01e401a2 	.word	0x01e401a2
     a80:	014d01e4 	.word	0x014d01e4
     a84:	018101e4 	.word	0x018101e4
     a88:	01e401e4 	.word	0x01e401e4
     a8c:	0181      	.short	0x0181
				conv->flag_dash = true;
     a8e:	f89d 3018 	ldrb.w	r3, [sp, #24]
     a92:	f043 0304 	orr.w	r3, r3, #4
     a96:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     a9a:	427f      	negs	r7, r7
     a9c:	e76f      	b.n	97e <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
     a9e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     aa2:	2b00      	cmp	r3, #0
     aa4:	db02      	blt.n	aac <z_cbvprintf_impl+0x190>
		int width = -1;
     aa6:	f04f 37ff 	mov.w	r7, #4294967295
     aaa:	e768      	b.n	97e <z_cbvprintf_impl+0x62>
			width = conv->width_value;
     aac:	9f07      	ldr	r7, [sp, #28]
     aae:	e766      	b.n	97e <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
     ab0:	f89d 3019 	ldrb.w	r3, [sp, #25]
     ab4:	f36f 0341 	bfc	r3, #1, #1
     ab8:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     abc:	f04f 3aff 	mov.w	sl, #4294967295
     ac0:	e76c      	b.n	99c <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
     ac2:	f013 0f02 	tst.w	r3, #2
     ac6:	d002      	beq.n	ace <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
     ac8:	f8dd a020 	ldr.w	sl, [sp, #32]
     acc:	e766      	b.n	99c <z_cbvprintf_impl+0x80>
		int precision = -1;
     ace:	f04f 3aff 	mov.w	sl, #4294967295
     ad2:	e763      	b.n	99c <z_cbvprintf_impl+0x80>
			switch (length_mod) {
     ad4:	1ecb      	subs	r3, r1, #3
     ad6:	2b04      	cmp	r3, #4
     ad8:	d804      	bhi.n	ae4 <z_cbvprintf_impl+0x1c8>
     ada:	e8df f003 	tbb	[pc, r3]
     ade:	1d0b      	.short	0x1d0b
     ae0:	3529      	.short	0x3529
     ae2:	35          	.byte	0x35
     ae3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     ae4:	9b03      	ldr	r3, [sp, #12]
     ae6:	1d1a      	adds	r2, r3, #4
     ae8:	9203      	str	r2, [sp, #12]
     aea:	681b      	ldr	r3, [r3, #0]
     aec:	17da      	asrs	r2, r3, #31
     aee:	9304      	str	r3, [sp, #16]
     af0:	9205      	str	r2, [sp, #20]
				break;
     af2:	e006      	b.n	b02 <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
     af4:	9b03      	ldr	r3, [sp, #12]
     af6:	1d1a      	adds	r2, r3, #4
     af8:	9203      	str	r2, [sp, #12]
     afa:	681b      	ldr	r3, [r3, #0]
     afc:	17da      	asrs	r2, r3, #31
     afe:	9304      	str	r3, [sp, #16]
     b00:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     b02:	2901      	cmp	r1, #1
     b04:	d028      	beq.n	b58 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
     b06:	2902      	cmp	r1, #2
     b08:	f47f af5f 	bne.w	9ca <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
     b0c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     b10:	17da      	asrs	r2, r3, #31
     b12:	9304      	str	r3, [sp, #16]
     b14:	9205      	str	r2, [sp, #20]
     b16:	e758      	b.n	9ca <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
     b18:	9b03      	ldr	r3, [sp, #12]
     b1a:	3307      	adds	r3, #7
     b1c:	f023 0307 	bic.w	r3, r3, #7
     b20:	f103 0208 	add.w	r2, r3, #8
     b24:	9203      	str	r2, [sp, #12]
     b26:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     b2e:	e7e8      	b.n	b02 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
     b30:	9b03      	ldr	r3, [sp, #12]
     b32:	3307      	adds	r3, #7
     b34:	f023 0307 	bic.w	r3, r3, #7
     b38:	f103 0208 	add.w	r2, r3, #8
     b3c:	9203      	str	r2, [sp, #12]
     b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     b42:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     b46:	e7dc      	b.n	b02 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     b48:	9b03      	ldr	r3, [sp, #12]
     b4a:	1d1a      	adds	r2, r3, #4
     b4c:	9203      	str	r2, [sp, #12]
     b4e:	681b      	ldr	r3, [r3, #0]
     b50:	17da      	asrs	r2, r3, #31
				value->sint =
     b52:	9304      	str	r3, [sp, #16]
     b54:	9205      	str	r2, [sp, #20]
				break;
     b56:	e7d4      	b.n	b02 <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
     b58:	f99d 3010 	ldrsb.w	r3, [sp, #16]
     b5c:	17da      	asrs	r2, r3, #31
     b5e:	9304      	str	r3, [sp, #16]
     b60:	9205      	str	r2, [sp, #20]
     b62:	e732      	b.n	9ca <z_cbvprintf_impl+0xae>
			switch (length_mod) {
     b64:	1ecb      	subs	r3, r1, #3
     b66:	2b04      	cmp	r3, #4
     b68:	d804      	bhi.n	b74 <z_cbvprintf_impl+0x258>
     b6a:	e8df f003 	tbb	[pc, r3]
     b6e:	1f0b      	.short	0x1f0b
     b70:	4135      	.short	0x4135
     b72:	41          	.byte	0x41
     b73:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     b74:	9b03      	ldr	r3, [sp, #12]
     b76:	1d1a      	adds	r2, r3, #4
     b78:	9203      	str	r2, [sp, #12]
     b7a:	681b      	ldr	r3, [r3, #0]
     b7c:	9304      	str	r3, [sp, #16]
     b7e:	2300      	movs	r3, #0
     b80:	9305      	str	r3, [sp, #20]
				break;
     b82:	e01e      	b.n	bc2 <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
     b84:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     b88:	2b63      	cmp	r3, #99	; 0x63
     b8a:	d007      	beq.n	b9c <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
     b8c:	9b03      	ldr	r3, [sp, #12]
     b8e:	1d1a      	adds	r2, r3, #4
     b90:	9203      	str	r2, [sp, #12]
     b92:	681b      	ldr	r3, [r3, #0]
     b94:	9304      	str	r3, [sp, #16]
     b96:	2300      	movs	r3, #0
     b98:	9305      	str	r3, [sp, #20]
     b9a:	e012      	b.n	bc2 <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
     b9c:	9b03      	ldr	r3, [sp, #12]
     b9e:	1d1a      	adds	r2, r3, #4
     ba0:	9203      	str	r2, [sp, #12]
     ba2:	681b      	ldr	r3, [r3, #0]
     ba4:	9304      	str	r3, [sp, #16]
     ba6:	2300      	movs	r3, #0
     ba8:	9305      	str	r3, [sp, #20]
     baa:	e00a      	b.n	bc2 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
     bac:	9b03      	ldr	r3, [sp, #12]
     bae:	3307      	adds	r3, #7
     bb0:	f023 0307 	bic.w	r3, r3, #7
     bb4:	f103 0208 	add.w	r2, r3, #8
     bb8:	9203      	str	r2, [sp, #12]
     bba:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     bbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     bc2:	2901      	cmp	r1, #1
     bc4:	d01c      	beq.n	c00 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
     bc6:	2902      	cmp	r1, #2
     bc8:	f47f aeff 	bne.w	9ca <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
     bcc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     bd0:	9304      	str	r3, [sp, #16]
     bd2:	2300      	movs	r3, #0
     bd4:	9305      	str	r3, [sp, #20]
     bd6:	e6f8      	b.n	9ca <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
     bd8:	9b03      	ldr	r3, [sp, #12]
     bda:	3307      	adds	r3, #7
     bdc:	f023 0307 	bic.w	r3, r3, #7
     be0:	f103 0208 	add.w	r2, r3, #8
     be4:	9203      	str	r2, [sp, #12]
     be6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     bea:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     bee:	e7e8      	b.n	bc2 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
     bf0:	9b03      	ldr	r3, [sp, #12]
     bf2:	1d1a      	adds	r2, r3, #4
     bf4:	9203      	str	r2, [sp, #12]
     bf6:	681b      	ldr	r3, [r3, #0]
				value->uint =
     bf8:	9304      	str	r3, [sp, #16]
     bfa:	2300      	movs	r3, #0
     bfc:	9305      	str	r3, [sp, #20]
				break;
     bfe:	e7e0      	b.n	bc2 <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
     c00:	f89d 3010 	ldrb.w	r3, [sp, #16]
     c04:	9304      	str	r3, [sp, #16]
     c06:	2300      	movs	r3, #0
     c08:	9305      	str	r3, [sp, #20]
     c0a:	e6de      	b.n	9ca <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
     c0c:	2908      	cmp	r1, #8
     c0e:	d00b      	beq.n	c28 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
     c10:	9b03      	ldr	r3, [sp, #12]
     c12:	3307      	adds	r3, #7
     c14:	f023 0307 	bic.w	r3, r3, #7
     c18:	f103 0208 	add.w	r2, r3, #8
     c1c:	9203      	str	r2, [sp, #12]
     c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
     c22:	e9cd 2304 	strd	r2, r3, [sp, #16]
     c26:	e6d0      	b.n	9ca <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
     c28:	9b03      	ldr	r3, [sp, #12]
     c2a:	3307      	adds	r3, #7
     c2c:	f023 0307 	bic.w	r3, r3, #7
     c30:	f103 0208 	add.w	r2, r3, #8
     c34:	9203      	str	r2, [sp, #12]
     c36:	e9d3 2300 	ldrd	r2, r3, [r3]
     c3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
     c3e:	e6c4      	b.n	9ca <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
     c40:	9b03      	ldr	r3, [sp, #12]
     c42:	1d1a      	adds	r2, r3, #4
     c44:	9203      	str	r2, [sp, #12]
     c46:	681b      	ldr	r3, [r3, #0]
     c48:	9304      	str	r3, [sp, #16]
     c4a:	e6be      	b.n	9ca <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
     c4c:	9f02      	ldr	r7, [sp, #8]
     c4e:	463b      	mov	r3, r7
     c50:	464a      	mov	r2, r9
     c52:	4629      	mov	r1, r5
     c54:	4630      	mov	r0, r6
     c56:	f004 fab2 	bl	51be <outs>
     c5a:	2800      	cmp	r0, #0
     c5c:	f2c0 8141 	blt.w	ee2 <z_cbvprintf_impl+0x5c6>
     c60:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     c62:	46b9      	mov	r9, r7
			continue;
     c64:	e662      	b.n	92c <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
     c66:	4629      	mov	r1, r5
     c68:	2025      	movs	r0, #37	; 0x25
     c6a:	47b0      	blx	r6
     c6c:	2800      	cmp	r0, #0
     c6e:	f2c0 8138 	blt.w	ee2 <z_cbvprintf_impl+0x5c6>
     c72:	3401      	adds	r4, #1
		char sign = 0;
     c74:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     c76:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     c7a:	f04f 0900 	mov.w	r9, #0
			break;
     c7e:	e09b      	b.n	db8 <z_cbvprintf_impl+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
     c80:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
     c84:	f1ba 0f00 	cmp.w	sl, #0
     c88:	db07      	blt.n	c9a <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
     c8a:	4651      	mov	r1, sl
     c8c:	4648      	mov	r0, r9
     c8e:	f004 fb85 	bl	539c <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     c92:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
     c96:	46d8      	mov	r8, fp
			precision = -1;

			break;
     c98:	e08e      	b.n	db8 <z_cbvprintf_impl+0x49c>
				len = strlen(bps);
     c9a:	4648      	mov	r0, r9
     c9c:	f004 fb75 	bl	538a <strlen>
     ca0:	e7f7      	b.n	c92 <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     ca2:	9b04      	ldr	r3, [sp, #16]
     ca4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
     ca8:	46d8      	mov	r8, fp
			bpe = buf + 1;
     caa:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
     cae:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
     cb2:	e081      	b.n	db8 <z_cbvprintf_impl+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     cb4:	f018 0f08 	tst.w	r8, #8
     cb8:	d105      	bne.n	cc6 <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
     cba:	f018 0810 	ands.w	r8, r8, #16
     cbe:	d004      	beq.n	cca <z_cbvprintf_impl+0x3ae>
				sign = ' ';
     cc0:	f04f 0820 	mov.w	r8, #32
     cc4:	e001      	b.n	cca <z_cbvprintf_impl+0x3ae>
				sign = '+';
     cc6:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     cca:	9a04      	ldr	r2, [sp, #16]
     ccc:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
     cce:	2b00      	cmp	r3, #0
     cd0:	db02      	blt.n	cd8 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     cd2:	9204      	str	r2, [sp, #16]
     cd4:	9305      	str	r3, [sp, #20]
     cd6:	e008      	b.n	cea <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
     cd8:	4252      	negs	r2, r2
     cda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     cde:	9204      	str	r2, [sp, #16]
     ce0:	9305      	str	r3, [sp, #20]
				sign = '-';
     ce2:	f04f 082d 	mov.w	r8, #45	; 0x2d
     ce6:	e000      	b.n	cea <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
     ce8:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     cea:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     cee:	9300      	str	r3, [sp, #0]
     cf0:	ab0a      	add	r3, sp, #40	; 0x28
     cf2:	aa06      	add	r2, sp, #24
     cf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     cf8:	f004 f9f7 	bl	50ea <encode_uint>
     cfc:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     cfe:	f1ba 0f00 	cmp.w	sl, #0
     d02:	f2c0 8088 	blt.w	e16 <z_cbvprintf_impl+0x4fa>
				size_t len = bpe - bps;
     d06:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     d0a:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     d0e:	f89d 2018 	ldrb.w	r2, [sp, #24]
     d12:	f36f 1286 	bfc	r2, #6, #1
     d16:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     d1a:	459a      	cmp	sl, r3
     d1c:	d97e      	bls.n	e1c <z_cbvprintf_impl+0x500>
					conv->pad0_value = precision - (int)len;
     d1e:	ebaa 0303 	sub.w	r3, sl, r3
     d22:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
     d24:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     d28:	e046      	b.n	db8 <z_cbvprintf_impl+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     d2a:	9804      	ldr	r0, [sp, #16]
     d2c:	b928      	cbnz	r0, d3a <z_cbvprintf_impl+0x41e>
		char sign = 0;
     d2e:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     d30:	f8df a1b4 	ldr.w	sl, [pc, #436]	; ee8 <z_cbvprintf_impl+0x5cc>
			bps = "(nil)";
     d34:	f1aa 0905 	sub.w	r9, sl, #5
     d38:	e03e      	b.n	db8 <z_cbvprintf_impl+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d3a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     d3e:	9300      	str	r3, [sp, #0]
     d40:	ab0a      	add	r3, sp, #40	; 0x28
     d42:	aa06      	add	r2, sp, #24
     d44:	2100      	movs	r1, #0
     d46:	f004 f9d0 	bl	50ea <encode_uint>
     d4a:	4681      	mov	r9, r0
				conv->altform_0c = true;
     d4c:	f89d 301a 	ldrb.w	r3, [sp, #26]
     d50:	f043 0310 	orr.w	r3, r3, #16
     d54:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
     d58:	2378      	movs	r3, #120	; 0x78
     d5a:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
     d5e:	46d8      	mov	r8, fp
				goto prec_int_pad0;
     d60:	e7cd      	b.n	cfe <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     d62:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
     d64:	f89d 3019 	ldrb.w	r3, [sp, #25]
     d68:	f3c3 03c3 	ubfx	r3, r3, #3, #4
     d6c:	2b07      	cmp	r3, #7
     d6e:	d806      	bhi.n	d7e <z_cbvprintf_impl+0x462>
     d70:	e8df f003 	tbb	[pc, r3]
     d74:	0f0d0b04 	.word	0x0f0d0b04
     d78:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
     d7c:	6014      	str	r4, [r2, #0]
		char sign = 0;
     d7e:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     d80:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     d84:	f04f 0900 	mov.w	r9, #0
}
     d88:	e016      	b.n	db8 <z_cbvprintf_impl+0x49c>
		*(signed char *)dp = (signed char)count;
     d8a:	7014      	strb	r4, [r2, #0]
		break;
     d8c:	e7f7      	b.n	d7e <z_cbvprintf_impl+0x462>
		*(short *)dp = (short)count;
     d8e:	8014      	strh	r4, [r2, #0]
		break;
     d90:	e7f5      	b.n	d7e <z_cbvprintf_impl+0x462>
		*(long *)dp = (long)count;
     d92:	6014      	str	r4, [r2, #0]
		break;
     d94:	e7f3      	b.n	d7e <z_cbvprintf_impl+0x462>
		*(long long *)dp = (long long)count;
     d96:	17e3      	asrs	r3, r4, #31
     d98:	6014      	str	r4, [r2, #0]
     d9a:	6053      	str	r3, [r2, #4]
		break;
     d9c:	e7ef      	b.n	d7e <z_cbvprintf_impl+0x462>
		*(intmax_t *)dp = (intmax_t)count;
     d9e:	17e3      	asrs	r3, r4, #31
     da0:	6014      	str	r4, [r2, #0]
     da2:	6053      	str	r3, [r2, #4]
		break;
     da4:	e7eb      	b.n	d7e <z_cbvprintf_impl+0x462>
		*(size_t *)dp = (size_t)count;
     da6:	6014      	str	r4, [r2, #0]
		break;
     da8:	e7e9      	b.n	d7e <z_cbvprintf_impl+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     daa:	6014      	str	r4, [r2, #0]
		break;
     dac:	e7e7      	b.n	d7e <z_cbvprintf_impl+0x462>
		switch (conv->specifier) {
     dae:	46d8      	mov	r8, fp
     db0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     db4:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     db8:	f1b9 0f00 	cmp.w	r9, #0
     dbc:	f000 808d 	beq.w	eda <z_cbvprintf_impl+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     dc0:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
     dc4:	f1b8 0f00 	cmp.w	r8, #0
     dc8:	d000      	beq.n	dcc <z_cbvprintf_impl+0x4b0>
			nj_len += 1U;
     dca:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
     dcc:	f89d 201a 	ldrb.w	r2, [sp, #26]
     dd0:	f012 0f10 	tst.w	r2, #16
     dd4:	d025      	beq.n	e22 <z_cbvprintf_impl+0x506>
			nj_len += 2U;
     dd6:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     dd8:	9907      	ldr	r1, [sp, #28]
     dda:	440b      	add	r3, r1
		if (conv->pad_fp) {
     ddc:	f012 0f40 	tst.w	r2, #64	; 0x40
     de0:	d001      	beq.n	de6 <z_cbvprintf_impl+0x4ca>
			nj_len += conv->pad0_pre_exp;
     de2:	9a08      	ldr	r2, [sp, #32]
     de4:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     de6:	2f00      	cmp	r7, #0
     de8:	dd31      	ble.n	e4e <z_cbvprintf_impl+0x532>
			width -= (int)nj_len;
     dea:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     dec:	f89d 3018 	ldrb.w	r3, [sp, #24]
     df0:	f013 0f04 	tst.w	r3, #4
     df4:	d12b      	bne.n	e4e <z_cbvprintf_impl+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     df6:	f013 0f40 	tst.w	r3, #64	; 0x40
     dfa:	d017      	beq.n	e2c <z_cbvprintf_impl+0x510>
					if (sign != 0) {
     dfc:	f1b8 0f00 	cmp.w	r8, #0
     e00:	d017      	beq.n	e32 <z_cbvprintf_impl+0x516>
						OUTC(sign);
     e02:	4629      	mov	r1, r5
     e04:	4640      	mov	r0, r8
     e06:	47b0      	blx	r6
     e08:	2800      	cmp	r0, #0
     e0a:	db6a      	blt.n	ee2 <z_cbvprintf_impl+0x5c6>
     e0c:	3401      	adds	r4, #1
						sign = 0;
     e0e:	46d8      	mov	r8, fp
					}
					pad = '0';
     e10:	f04f 0b30 	mov.w	fp, #48	; 0x30
     e14:	e00f      	b.n	e36 <z_cbvprintf_impl+0x51a>
		const char *bpe = buf + sizeof(buf);
     e16:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     e1a:	e7cd      	b.n	db8 <z_cbvprintf_impl+0x49c>
     e1c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     e20:	e7ca      	b.n	db8 <z_cbvprintf_impl+0x49c>
		} else if (conv->altform_0) {
     e22:	f012 0f08 	tst.w	r2, #8
     e26:	d0d7      	beq.n	dd8 <z_cbvprintf_impl+0x4bc>
			nj_len += 1U;
     e28:	3301      	adds	r3, #1
     e2a:	e7d5      	b.n	dd8 <z_cbvprintf_impl+0x4bc>
				char pad = ' ';
     e2c:	f04f 0b20 	mov.w	fp, #32
     e30:	e001      	b.n	e36 <z_cbvprintf_impl+0x51a>
					pad = '0';
     e32:	f04f 0b30 	mov.w	fp, #48	; 0x30
     e36:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     e38:	1e5f      	subs	r7, r3, #1
     e3a:	2b00      	cmp	r3, #0
     e3c:	dd07      	ble.n	e4e <z_cbvprintf_impl+0x532>
					OUTC(pad);
     e3e:	4629      	mov	r1, r5
     e40:	4658      	mov	r0, fp
     e42:	47b0      	blx	r6
     e44:	2800      	cmp	r0, #0
     e46:	db4c      	blt.n	ee2 <z_cbvprintf_impl+0x5c6>
     e48:	3401      	adds	r4, #1
				while (width-- > 0) {
     e4a:	463b      	mov	r3, r7
     e4c:	e7f4      	b.n	e38 <z_cbvprintf_impl+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     e4e:	f1b8 0f00 	cmp.w	r8, #0
     e52:	d005      	beq.n	e60 <z_cbvprintf_impl+0x544>
			OUTC(sign);
     e54:	4629      	mov	r1, r5
     e56:	4640      	mov	r0, r8
     e58:	47b0      	blx	r6
     e5a:	2800      	cmp	r0, #0
     e5c:	db41      	blt.n	ee2 <z_cbvprintf_impl+0x5c6>
     e5e:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     e60:	f89d 301a 	ldrb.w	r3, [sp, #26]
     e64:	f3c3 1200 	ubfx	r2, r3, #4, #1
     e68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     e6c:	4313      	orrs	r3, r2
     e6e:	d005      	beq.n	e7c <z_cbvprintf_impl+0x560>
				OUTC('0');
     e70:	4629      	mov	r1, r5
     e72:	2030      	movs	r0, #48	; 0x30
     e74:	47b0      	blx	r6
     e76:	2800      	cmp	r0, #0
     e78:	db33      	blt.n	ee2 <z_cbvprintf_impl+0x5c6>
     e7a:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     e7c:	f89d 301a 	ldrb.w	r3, [sp, #26]
     e80:	f013 0f10 	tst.w	r3, #16
     e84:	d006      	beq.n	e94 <z_cbvprintf_impl+0x578>
				OUTC(conv->specifier);
     e86:	4629      	mov	r1, r5
     e88:	f89d 001b 	ldrb.w	r0, [sp, #27]
     e8c:	47b0      	blx	r6
     e8e:	2800      	cmp	r0, #0
     e90:	db27      	blt.n	ee2 <z_cbvprintf_impl+0x5c6>
     e92:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     e94:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
     e96:	f103 38ff 	add.w	r8, r3, #4294967295
     e9a:	2b00      	cmp	r3, #0
     e9c:	dd07      	ble.n	eae <z_cbvprintf_impl+0x592>
				OUTC('0');
     e9e:	4629      	mov	r1, r5
     ea0:	2030      	movs	r0, #48	; 0x30
     ea2:	47b0      	blx	r6
     ea4:	2800      	cmp	r0, #0
     ea6:	db1c      	blt.n	ee2 <z_cbvprintf_impl+0x5c6>
     ea8:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     eaa:	4643      	mov	r3, r8
     eac:	e7f3      	b.n	e96 <z_cbvprintf_impl+0x57a>
			}

			OUTS(bps, bpe);
     eae:	4653      	mov	r3, sl
     eb0:	464a      	mov	r2, r9
     eb2:	4629      	mov	r1, r5
     eb4:	4630      	mov	r0, r6
     eb6:	f004 f982 	bl	51be <outs>
     eba:	2800      	cmp	r0, #0
     ebc:	db11      	blt.n	ee2 <z_cbvprintf_impl+0x5c6>
     ebe:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     ec0:	2f00      	cmp	r7, #0
     ec2:	dd07      	ble.n	ed4 <z_cbvprintf_impl+0x5b8>
			OUTC(' ');
     ec4:	4629      	mov	r1, r5
     ec6:	2020      	movs	r0, #32
     ec8:	47b0      	blx	r6
     eca:	2800      	cmp	r0, #0
     ecc:	db09      	blt.n	ee2 <z_cbvprintf_impl+0x5c6>
     ece:	3401      	adds	r4, #1
			--width;
     ed0:	3f01      	subs	r7, #1
     ed2:	e7f5      	b.n	ec0 <z_cbvprintf_impl+0x5a4>
		fp = extract_conversion(conv, sp);
     ed4:	f8dd 9008 	ldr.w	r9, [sp, #8]
     ed8:	e528      	b.n	92c <z_cbvprintf_impl+0x10>
     eda:	f8dd 9008 	ldr.w	r9, [sp, #8]
     ede:	e525      	b.n	92c <z_cbvprintf_impl+0x10>
		}
	}

	return count;
     ee0:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     ee2:	b011      	add	sp, #68	; 0x44
     ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ee8:	0000671d 	.word	0x0000671d

00000eec <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     eec:	b508      	push	{r3, lr}
     eee:	f04f 0220 	mov.w	r2, #32
     ef2:	f3ef 8311 	mrs	r3, BASEPRI
     ef6:	f382 8812 	msr	BASEPRI_MAX, r2
     efa:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     efe:	f000 fd37 	bl	1970 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     f02:	4803      	ldr	r0, [pc, #12]	; (f10 <sys_reboot+0x24>)
     f04:	f003 ff72 	bl	4dec <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     f08:	f000 faa2 	bl	1450 <arch_cpu_idle>
     f0c:	e7fc      	b.n	f08 <sys_reboot+0x1c>
     f0e:	bf00      	nop
     f10:	00006720 	.word	0x00006720

00000f14 <nordicsemi_nrf53_init>:
     f14:	f04f 0320 	mov.w	r3, #32
     f18:	f3ef 8011 	mrs	r0, BASEPRI
     f1c:	f383 8812 	msr	BASEPRI_MAX, r3
     f20:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     f24:	2101      	movs	r1, #1
     f26:	4b11      	ldr	r3, [pc, #68]	; (f6c <nordicsemi_nrf53_init+0x58>)
     f28:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
#endif /* NRF_GPIO_HAS_SEL */

#if defined(CONFIG_SOC_HFXO_CAP_INTERNAL)
static inline uint32_t soc_secure_read_xosc32mtrim(void)
{
	return NRF_FICR_S->XOSC32MTRIM;
     f2c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
     f30:	f8d3 3c20 	ldr.w	r3, [r3, #3104]	; 0xc20
	 * CAPVALUE = (((FICR->XOSC32MTRIM.SLOPE+56)*(CAPACITANCE*2-14))
	 *            +((FICR->XOSC32MTRIM.OFFSET-8)<<4)+32)>>6;
	 * where CAPACITANCE is the desired capacitor value in pF, holding any
	 * value between 7.0 pF and 20.0 pF in 0.5 pF steps.
	 */
	uint32_t slope = (xosc32mtrim & FICR_XOSC32MTRIM_SLOPE_Msk)
     f34:	f003 021f 	and.w	r2, r3, #31
			 >> FICR_XOSC32MTRIM_SLOPE_Pos;
	uint32_t offset = (xosc32mtrim & FICR_XOSC32MTRIM_OFFSET_Msk)
     f38:	f3c3 1344 	ubfx	r3, r3, #5, #5
			  >> FICR_XOSC32MTRIM_OFFSET_Pos;
	uint32_t capvalue =
		((slope + 56) * (CONFIG_SOC_HFXO_CAP_INT_VALUE_X2 - 14)
     f3c:	3238      	adds	r2, #56	; 0x38
		 + ((offset - 8) << 4) + 32) >> 6;
     f3e:	3b08      	subs	r3, #8
     f40:	011b      	lsls	r3, r3, #4
     f42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     f46:	3320      	adds	r3, #32
	uint32_t capvalue =
     f48:	099b      	lsrs	r3, r3, #6
                                                    uint32_t               cap_value)
{
    p_reg->XOSC32MCAPS =
        (enable ? ((OSCILLATORS_XOSC32MCAPS_ENABLE_Enabled << OSCILLATORS_XOSC32MCAPS_ENABLE_Pos) |
                   (cap_value << OSCILLATORS_XOSC32MCAPS_CAPVALUE_Pos))
                : (OSCILLATORS_XOSC32MCAPS_ENABLE_Disabled << OSCILLATORS_XOSC32MCAPS_ENABLE_Pos));
     f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    p_reg->XOSC32MCAPS =
     f4e:	4a08      	ldr	r2, [pc, #32]	; (f70 <nordicsemi_nrf53_init+0x5c>)
     f50:	f8c2 35c4 	str.w	r3, [r2, #1476]	; 0x5c4
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
     f54:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
     f58:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
     f5c:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
     f60:	f380 8811 	msr	BASEPRI, r0
     f64:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     f68:	2000      	movs	r0, #0
     f6a:	4770      	bx	lr
     f6c:	50001000 	.word	0x50001000
     f70:	50004000 	.word	0x50004000

00000f74 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     f74:	b170      	cbz	r0, f94 <arch_busy_wait+0x20>

void arch_busy_wait(uint32_t time_us)
{
     f76:	b508      	push	{r3, lr}
     f78:	4602      	mov	r2, r0

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     f7a:	4b07      	ldr	r3, [pc, #28]	; (f98 <arch_busy_wait+0x24>)
     f7c:	681b      	ldr	r3, [r3, #0]
     f7e:	4807      	ldr	r0, [pc, #28]	; (f9c <arch_busy_wait+0x28>)
     f80:	fba0 1303 	umull	r1, r3, r0, r3
     f84:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
     f86:	fb03 f002 	mul.w	r0, r3, r2
     f8a:	4b05      	ldr	r3, [pc, #20]	; (fa0 <arch_busy_wait+0x2c>)
     f8c:	f043 0301 	orr.w	r3, r3, #1
     f90:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
     f92:	bd08      	pop	{r3, pc}
     f94:	4770      	bx	lr
     f96:	bf00      	nop
     f98:	20000048 	.word	0x20000048
     f9c:	431bde83 	.word	0x431bde83
     fa0:	000066f0 	.word	0x000066f0

00000fa4 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
     fa4:	2806      	cmp	r0, #6
     fa6:	d000      	beq.n	faa <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
     fa8:	4770      	bx	lr
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
     faa:	4b04      	ldr	r3, [pc, #16]	; (fbc <pm_state_set+0x18>)
     fac:	2201      	movs	r2, #1
     fae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     fb2:	f3bf 8f4f 	dsb	sy
        __WFE();
     fb6:	bf20      	wfe
    while (true)
     fb8:	e7fd      	b.n	fb6 <pm_state_set+0x12>
     fba:	bf00      	nop
     fbc:	50004000 	.word	0x50004000

00000fc0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     fc0:	f001 bd7c 	b.w	2abc <SystemInit>

00000fc4 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
     fc4:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     fc6:	4b28      	ldr	r3, [pc, #160]	; (1068 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x68>)
     fc8:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     fca:	f005 031f 	and.w	r3, r5, #31
     fce:	2201      	movs	r2, #1
     fd0:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     fd2:	0969      	lsrs	r1, r5, #5
     fd4:	4b25      	ldr	r3, [pc, #148]	; (106c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x6c>)
     fd6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     fda:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     fdc:	e8d3 1fef 	ldaex	r1, [r3]
     fe0:	ea01 0400 	and.w	r4, r1, r0
     fe4:	e8c3 4fe6 	stlex	r6, r4, [r3]
     fe8:	2e00      	cmp	r6, #0
     fea:	d1f7      	bne.n	fdc <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     fec:	420a      	tst	r2, r1
     fee:	d100      	bne.n	ff2 <pm_system_resume+0x2e>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
     ff0:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
     ff2:	481f      	ldr	r0, [pc, #124]	; (1070 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x70>)
     ff4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
     ff8:	0093      	lsls	r3, r2, #2
     ffa:	18c1      	adds	r1, r0, r3
	if (pm_state_exit_post_ops != NULL) {
     ffc:	4a1d      	ldr	r2, [pc, #116]	; (1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>)
     ffe:	b172      	cbz	r2, 101e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1000:	7849      	ldrb	r1, [r1, #1]
    1002:	5cc0      	ldrb	r0, [r0, r3]
    1004:	f004 f8f6 	bl	51f4 <pm_state_exit_post_ops>
	__asm__ volatile(
    1008:	f04f 0320 	mov.w	r3, #32
    100c:	f3ef 8611 	mrs	r6, BASEPRI
    1010:	f383 8812 	msr	BASEPRI_MAX, r3
    1014:	f3bf 8f6f 	isb	sy
    1018:	4b17      	ldr	r3, [pc, #92]	; (1078 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x78>)
    101a:	681c      	ldr	r4, [r3, #0]
    101c:	e010      	b.n	1040 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x40>
	__asm__ volatile(
    101e:	2300      	movs	r3, #0
    1020:	f383 8811 	msr	BASEPRI, r3
    1024:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1028:	e7ee      	b.n	1008 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    102a:	4b0f      	ldr	r3, [pc, #60]	; (1068 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x68>)
    102c:	7d1b      	ldrb	r3, [r3, #20]
    102e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1032:	0099      	lsls	r1, r3, #2
    1034:	4b0e      	ldr	r3, [pc, #56]	; (1070 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x70>)
    1036:	5c58      	ldrb	r0, [r3, r1]
    1038:	4790      	blx	r2
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    103a:	b10c      	cbz	r4, 1040 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x40>
	return node->next;
    103c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    103e:	b124      	cbz	r4, 104a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4a>
    1040:	b11c      	cbz	r4, 104a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4a>
			callback = notifier->state_exit;
    1042:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    1044:	2a00      	cmp	r2, #0
    1046:	d1f0      	bne.n	102a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2a>
    1048:	e7f7      	b.n	103a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3a>
	__asm__ volatile(
    104a:	f386 8811 	msr	BASEPRI, r6
    104e:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1052:	4807      	ldr	r0, [pc, #28]	; (1070 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x70>)
    1054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1058:	00aa      	lsls	r2, r5, #2
    105a:	1881      	adds	r1, r0, r2
    105c:	2300      	movs	r3, #0
    105e:	5083      	str	r3, [r0, r2]
    1060:	604b      	str	r3, [r1, #4]
    1062:	608b      	str	r3, [r1, #8]
}
    1064:	e7c4      	b.n	ff0 <pm_system_resume+0x2c>
    1066:	bf00      	nop
    1068:	2000095c 	.word	0x2000095c
    106c:	20000340 	.word	0x20000340
    1070:	20000334 	.word	0x20000334
    1074:	000051f5 	.word	0x000051f5
    1078:	20000320 	.word	0x20000320

0000107c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    107e:	4604      	mov	r4, r0
	uint8_t id = CURRENT_CPU;
    1080:	4b4b      	ldr	r3, [pc, #300]	; (11b0 <pm_system_suspend+0x134>)
    1082:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    1084:	f04f 0320 	mov.w	r3, #32
    1088:	f3ef 8611 	mrs	r6, BASEPRI
    108c:	f383 8812 	msr	BASEPRI_MAX, r3
    1090:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    1094:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    1098:	4b46      	ldr	r3, [pc, #280]	; (11b4 <pm_system_suspend+0x138>)
    109a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    109e:	b34b      	cbz	r3, 10f4 <pm_system_suspend+0x78>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    10a0:	4b45      	ldr	r3, [pc, #276]	; (11b8 <pm_system_suspend+0x13c>)
    10a2:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    10a6:	4f43      	ldr	r7, [pc, #268]	; (11b4 <pm_system_suspend+0x138>)
    10a8:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    10ac:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    10b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    10b4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    10b8:	2300      	movs	r3, #0
    10ba:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    10be:	f386 8811 	msr	BASEPRI, r6
    10c2:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    10c6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    10ca:	4a3b      	ldr	r2, [pc, #236]	; (11b8 <pm_system_suspend+0x13c>)
    10cc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    10d0:	2b00      	cmp	r3, #0
    10d2:	d06a      	beq.n	11aa <pm_system_suspend+0x12e>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    10d4:	f1b4 3fff 	cmp.w	r4, #4294967295
    10d8:	d11b      	bne.n	1112 <pm_system_suspend+0x96>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    10da:	f002 ffcb 	bl	4074 <k_sched_lock>
	__asm__ volatile(
    10de:	f04f 0320 	mov.w	r3, #32
    10e2:	f3ef 8611 	mrs	r6, BASEPRI
    10e6:	f383 8812 	msr	BASEPRI_MAX, r3
    10ea:	f3bf 8f6f 	isb	sy
	return list->head;
    10ee:	4b33      	ldr	r3, [pc, #204]	; (11bc <pm_system_suspend+0x140>)
    10f0:	681c      	ldr	r4, [r3, #0]
    10f2:	e02e      	b.n	1152 <pm_system_suspend+0xd6>
		info = pm_policy_next_state(id, ticks);
    10f4:	4601      	mov	r1, r0
    10f6:	4628      	mov	r0, r5
    10f8:	f000 f86a 	bl	11d0 <pm_policy_next_state>
		if (info != NULL) {
    10fc:	2800      	cmp	r0, #0
    10fe:	d0de      	beq.n	10be <pm_system_suspend+0x42>
			z_cpus_pm_state[id] = *info;
    1100:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1104:	4a2c      	ldr	r2, [pc, #176]	; (11b8 <pm_system_suspend+0x13c>)
    1106:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    110a:	c807      	ldmia	r0, {r0, r1, r2}
    110c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    1110:	e7d5      	b.n	10be <pm_system_suspend+0x42>
		     k_us_to_ticks_ceil32(
    1112:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1116:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    111a:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    111c:	0c41      	lsrs	r1, r0, #17
    111e:	03c0      	lsls	r0, r0, #15
    1120:	4b27      	ldr	r3, [pc, #156]	; (11c0 <pm_system_suspend+0x144>)
    1122:	18c0      	adds	r0, r0, r3
    1124:	4a27      	ldr	r2, [pc, #156]	; (11c4 <pm_system_suspend+0x148>)
    1126:	f04f 0300 	mov.w	r3, #0
    112a:	f141 0100 	adc.w	r1, r1, #0
    112e:	f7ff f811 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1132:	2101      	movs	r1, #1
    1134:	1a20      	subs	r0, r4, r0
    1136:	f005 f8ff 	bl	6338 <z_set_timeout_expiry>
    113a:	e7ce      	b.n	10da <pm_system_suspend+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    113c:	4b1c      	ldr	r3, [pc, #112]	; (11b0 <pm_system_suspend+0x134>)
    113e:	7d1b      	ldrb	r3, [r3, #20]
    1140:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1144:	491c      	ldr	r1, [pc, #112]	; (11b8 <pm_system_suspend+0x13c>)
    1146:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    114a:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    114c:	b10c      	cbz	r4, 1152 <pm_system_suspend+0xd6>
	return node->next;
    114e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1150:	b124      	cbz	r4, 115c <pm_system_suspend+0xe0>
    1152:	b11c      	cbz	r4, 115c <pm_system_suspend+0xe0>
			callback = notifier->state_entry;
    1154:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    1156:	2a00      	cmp	r2, #0
    1158:	d1f0      	bne.n	113c <pm_system_suspend+0xc0>
    115a:	e7f7      	b.n	114c <pm_system_suspend+0xd0>
	__asm__ volatile(
    115c:	f386 8811 	msr	BASEPRI, r6
    1160:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1164:	f005 031f 	and.w	r3, r5, #31
    1168:	2101      	movs	r1, #1
    116a:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    116c:	096b      	lsrs	r3, r5, #5
    116e:	4a16      	ldr	r2, [pc, #88]	; (11c8 <pm_system_suspend+0x14c>)
    1170:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1174:	e8d3 2fef 	ldaex	r2, [r3]
    1178:	430a      	orrs	r2, r1
    117a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    117e:	2800      	cmp	r0, #0
    1180:	d1f8      	bne.n	1174 <pm_system_suspend+0xf8>
	if (pm_state_set != NULL) {
    1182:	4b12      	ldr	r3, [pc, #72]	; (11cc <pm_system_suspend+0x150>)
    1184:	b15b      	cbz	r3, 119e <pm_system_suspend+0x122>
		pm_state_set(info->state, info->substate_id);
    1186:	4a0c      	ldr	r2, [pc, #48]	; (11b8 <pm_system_suspend+0x13c>)
    1188:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    118c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1194:	7859      	ldrb	r1, [r3, #1]
    1196:	f812 0025 	ldrb.w	r0, [r2, r5, lsl #2]
    119a:	f7ff ff03 	bl	fa4 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    119e:	f7ff ff11 	bl	fc4 <pm_system_resume>
	k_sched_unlock();
    11a2:	f003 f989 	bl	44b8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    11a6:	2001      	movs	r0, #1
}
    11a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
    11aa:	2000      	movs	r0, #0
    11ac:	e7fc      	b.n	11a8 <pm_system_suspend+0x12c>
    11ae:	bf00      	nop
    11b0:	2000095c 	.word	0x2000095c
    11b4:	20000328 	.word	0x20000328
    11b8:	20000334 	.word	0x20000334
    11bc:	20000320 	.word	0x20000320
    11c0:	000f423f 	.word	0x000f423f
    11c4:	000f4240 	.word	0x000f4240
    11c8:	20000340 	.word	0x20000340
    11cc:	00000fa5 	.word	0x00000fa5

000011d0 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    11d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    11d4:	b082      	sub	sp, #8
    11d6:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    11d8:	a901      	add	r1, sp, #4
    11da:	f000 f845 	bl	1268 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    11de:	1e44      	subs	r4, r0, #1
    11e0:	b224      	sxth	r4, r4
    11e2:	e007      	b.n	11f4 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    11e4:	f1b6 3fff 	cmp.w	r6, #4294967295
    11e8:	d033      	beq.n	1252 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    11ea:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    11ec:	42b0      	cmp	r0, r6
    11ee:	d930      	bls.n	1252 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    11f0:	3c01      	subs	r4, #1
    11f2:	b224      	sxth	r4, r4
    11f4:	2c00      	cmp	r4, #0
    11f6:	db2b      	blt.n	1250 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    11f8:	9b01      	ldr	r3, [sp, #4]
    11fa:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    11fe:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    1202:	7869      	ldrb	r1, [r5, #1]
    1204:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    1208:	f003 fffa 	bl	5200 <pm_policy_state_lock_is_active>
    120c:	2800      	cmp	r0, #0
    120e:	d1ef      	bne.n	11f0 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    1210:	6868      	ldr	r0, [r5, #4]
    1212:	0c41      	lsrs	r1, r0, #17
    1214:	03c0      	lsls	r0, r0, #15
    1216:	4f11      	ldr	r7, [pc, #68]	; (125c <pm_policy_next_state+0x8c>)
    1218:	19c0      	adds	r0, r0, r7
    121a:	4a11      	ldr	r2, [pc, #68]	; (1260 <pm_policy_next_state+0x90>)
    121c:	f04f 0300 	mov.w	r3, #0
    1220:	f141 0100 	adc.w	r1, r1, #0
    1224:	f7fe ff96 	bl	154 <__aeabi_uldivmod>
    1228:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    122a:	68ab      	ldr	r3, [r5, #8]
    122c:	0c59      	lsrs	r1, r3, #17
    122e:	03db      	lsls	r3, r3, #15
    1230:	19d8      	adds	r0, r3, r7
    1232:	4a0b      	ldr	r2, [pc, #44]	; (1260 <pm_policy_next_state+0x90>)
    1234:	f04f 0300 	mov.w	r3, #0
    1238:	f141 0100 	adc.w	r1, r1, #0
    123c:	f7fe ff8a 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1240:	4b08      	ldr	r3, [pc, #32]	; (1264 <pm_policy_next_state+0x94>)
    1242:	681b      	ldr	r3, [r3, #0]
    1244:	f1b3 3fff 	cmp.w	r3, #4294967295
    1248:	d0cc      	beq.n	11e4 <pm_policy_next_state+0x14>
    124a:	4283      	cmp	r3, r0
    124c:	d8ca      	bhi.n	11e4 <pm_policy_next_state+0x14>
    124e:	e7cf      	b.n	11f0 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    1250:	2500      	movs	r5, #0
}
    1252:	4628      	mov	r0, r5
    1254:	b002      	add	sp, #8
    1256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    125a:	bf00      	nop
    125c:	000f423f 	.word	0x000f423f
    1260:	000f4240 	.word	0x000f4240
    1264:	20000004 	.word	0x20000004

00001268 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1268:	b908      	cbnz	r0, 126e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    126a:	4b02      	ldr	r3, [pc, #8]	; (1274 <pm_state_cpu_get_all+0xc>)
    126c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    126e:	2000      	movs	r0, #0
    1270:	4770      	bx	lr
    1272:	bf00      	nop
    1274:	0000674c 	.word	0x0000674c

00001278 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    1278:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    127a:	4802      	ldr	r0, [pc, #8]	; (1284 <nrf_cc3xx_platform_abort_init+0xc>)
    127c:	f003 fc66 	bl	4b4c <nrf_cc3xx_platform_set_abort>
}
    1280:	bd08      	pop	{r3, pc}
    1282:	bf00      	nop
    1284:	0000674c 	.word	0x0000674c

00001288 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1288:	b308      	cbz	r0, 12ce <mutex_unlock_platform+0x46>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    128a:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    128c:	6843      	ldr	r3, [r0, #4]
    128e:	2b04      	cmp	r3, #4
    1290:	d007      	beq.n	12a2 <mutex_unlock_platform+0x1a>
    1292:	2b08      	cmp	r3, #8
    1294:	d012      	beq.n	12bc <mutex_unlock_platform+0x34>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1296:	b1fb      	cbz	r3, 12d8 <mutex_unlock_platform+0x50>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1298:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    129a:	f002 fde7 	bl	3e6c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    129e:	2000      	movs	r0, #0
    12a0:	e014      	b.n	12cc <mutex_unlock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    12a2:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    12a4:	2200      	movs	r2, #0
    12a6:	e8d3 1fef 	ldaex	r1, [r3]
    12aa:	2901      	cmp	r1, #1
    12ac:	d103      	bne.n	12b6 <mutex_unlock_platform+0x2e>
    12ae:	e8c3 2fe0 	stlex	r0, r2, [r3]
    12b2:	2800      	cmp	r0, #0
    12b4:	d1f7      	bne.n	12a6 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    12b6:	d10d      	bne.n	12d4 <mutex_unlock_platform+0x4c>
    12b8:	4610      	mov	r0, r2
    12ba:	e007      	b.n	12cc <mutex_unlock_platform+0x44>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    12bc:	6803      	ldr	r3, [r0, #0]
    12be:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    12c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
    12c4:	2000      	movs	r0, #0
    12c6:	4a05      	ldr	r2, [pc, #20]	; (12dc <mutex_unlock_platform+0x54>)
    12c8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    12cc:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    12ce:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    12d2:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    12d4:	4802      	ldr	r0, [pc, #8]	; (12e0 <mutex_unlock_platform+0x58>)
    12d6:	e7f9      	b.n	12cc <mutex_unlock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    12d8:	4802      	ldr	r0, [pc, #8]	; (12e4 <mutex_unlock_platform+0x5c>)
    12da:	e7f7      	b.n	12cc <mutex_unlock_platform+0x44>
    12dc:	50030000 	.word	0x50030000
    12e0:	ffff8fe9 	.word	0xffff8fe9
    12e4:	ffff8fea 	.word	0xffff8fea

000012e8 <mutex_lock_platform>:
    if(mutex == NULL) {
    12e8:	b370      	cbz	r0, 1348 <mutex_lock_platform+0x60>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12ea:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    12ec:	6843      	ldr	r3, [r0, #4]
    12ee:	2b04      	cmp	r3, #4
    12f0:	d004      	beq.n	12fc <mutex_lock_platform+0x14>
    12f2:	2b08      	cmp	r3, #8
    12f4:	d00f      	beq.n	1316 <mutex_lock_platform+0x2e>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    12f6:	b9c3      	cbnz	r3, 132a <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    12f8:	4815      	ldr	r0, [pc, #84]	; (1350 <mutex_lock_platform+0x68>)
    12fa:	e00b      	b.n	1314 <mutex_lock_platform+0x2c>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    12fc:	6803      	ldr	r3, [r0, #0]
    12fe:	2201      	movs	r2, #1
    1300:	e8d3 1fef 	ldaex	r1, [r3]
    1304:	2900      	cmp	r1, #0
    1306:	d103      	bne.n	1310 <mutex_lock_platform+0x28>
    1308:	e8c3 2fe0 	stlex	r0, r2, [r3]
    130c:	2800      	cmp	r0, #0
    130e:	d1f7      	bne.n	1300 <mutex_lock_platform+0x18>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1310:	d116      	bne.n	1340 <mutex_lock_platform+0x58>
    1312:	2000      	movs	r0, #0
}
    1314:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    1316:	6803      	ldr	r3, [r0, #0]
    1318:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    131a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    131e:	4a0d      	ldr	r2, [pc, #52]	; (1354 <mutex_lock_platform+0x6c>)
    1320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1324:	b973      	cbnz	r3, 1344 <mutex_lock_platform+0x5c>
    1326:	2000      	movs	r0, #0
    1328:	e7f4      	b.n	1314 <mutex_lock_platform+0x2c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    132a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    132c:	f04f 32ff 	mov.w	r2, #4294967295
    1330:	f04f 33ff 	mov.w	r3, #4294967295
    1334:	f002 fd10 	bl	3d58 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1338:	2800      	cmp	r0, #0
    133a:	d0eb      	beq.n	1314 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    133c:	4806      	ldr	r0, [pc, #24]	; (1358 <mutex_lock_platform+0x70>)
    133e:	e7e9      	b.n	1314 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1340:	4805      	ldr	r0, [pc, #20]	; (1358 <mutex_lock_platform+0x70>)
    1342:	e7e7      	b.n	1314 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1344:	4804      	ldr	r0, [pc, #16]	; (1358 <mutex_lock_platform+0x70>)
    1346:	e7e5      	b.n	1314 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1348:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    134c:	4770      	bx	lr
    134e:	bf00      	nop
    1350:	ffff8fea 	.word	0xffff8fea
    1354:	50030000 	.word	0x50030000
    1358:	ffff8fe9 	.word	0xffff8fe9

0000135c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    135c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    135e:	4604      	mov	r4, r0
    1360:	b188      	cbz	r0, 1386 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1362:	6863      	ldr	r3, [r4, #4]
    1364:	2b04      	cmp	r3, #4
    1366:	d00d      	beq.n	1384 <mutex_free_platform+0x28>
    1368:	2b08      	cmp	r3, #8
    136a:	d00b      	beq.n	1384 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    136c:	b153      	cbz	r3, 1384 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    136e:	f013 0f02 	tst.w	r3, #2
    1372:	d00d      	beq.n	1390 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1374:	4621      	mov	r1, r4
    1376:	4809      	ldr	r0, [pc, #36]	; (139c <mutex_free_platform+0x40>)
    1378:	f004 fe21 	bl	5fbe <k_mem_slab_free>
        mutex->mutex = NULL;
    137c:	2300      	movs	r3, #0
    137e:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1380:	2300      	movs	r3, #0
    1382:	6063      	str	r3, [r4, #4]
}
    1384:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1386:	4b06      	ldr	r3, [pc, #24]	; (13a0 <mutex_free_platform+0x44>)
    1388:	685b      	ldr	r3, [r3, #4]
    138a:	4806      	ldr	r0, [pc, #24]	; (13a4 <mutex_free_platform+0x48>)
    138c:	4798      	blx	r3
    138e:	e7e8      	b.n	1362 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1390:	2214      	movs	r2, #20
    1392:	2100      	movs	r1, #0
    1394:	6820      	ldr	r0, [r4, #0]
    1396:	f004 f83a 	bl	540e <memset>
    139a:	e7f1      	b.n	1380 <mutex_free_platform+0x24>
    139c:	20000344 	.word	0x20000344
    13a0:	200000d4 	.word	0x200000d4
    13a4:	00006754 	.word	0x00006754

000013a8 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    13a8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    13aa:	4604      	mov	r4, r0
    13ac:	b178      	cbz	r0, 13ce <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    13ae:	6863      	ldr	r3, [r4, #4]
    13b0:	2b04      	cmp	r3, #4
    13b2:	d00b      	beq.n	13cc <mutex_init_platform+0x24>
    13b4:	2b08      	cmp	r3, #8
    13b6:	d009      	beq.n	13cc <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    13b8:	b90b      	cbnz	r3, 13be <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    13ba:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    13bc:	b163      	cbz	r3, 13d8 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    13be:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    13c0:	f004 fe66 	bl	6090 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    13c4:	6863      	ldr	r3, [r4, #4]
    13c6:	f043 0301 	orr.w	r3, r3, #1
    13ca:	6063      	str	r3, [r4, #4]
}
    13cc:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    13ce:	4b0f      	ldr	r3, [pc, #60]	; (140c <mutex_init_platform+0x64>)
    13d0:	685b      	ldr	r3, [r3, #4]
    13d2:	480f      	ldr	r0, [pc, #60]	; (1410 <mutex_init_platform+0x68>)
    13d4:	4798      	blx	r3
    13d6:	e7ea      	b.n	13ae <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    13d8:	f04f 32ff 	mov.w	r2, #4294967295
    13dc:	f04f 33ff 	mov.w	r3, #4294967295
    13e0:	4621      	mov	r1, r4
    13e2:	480c      	ldr	r0, [pc, #48]	; (1414 <mutex_init_platform+0x6c>)
    13e4:	f002 fb8a 	bl	3afc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    13e8:	b908      	cbnz	r0, 13ee <mutex_init_platform+0x46>
    13ea:	6823      	ldr	r3, [r4, #0]
    13ec:	b91b      	cbnz	r3, 13f6 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    13ee:	4b07      	ldr	r3, [pc, #28]	; (140c <mutex_init_platform+0x64>)
    13f0:	685b      	ldr	r3, [r3, #4]
    13f2:	4809      	ldr	r0, [pc, #36]	; (1418 <mutex_init_platform+0x70>)
    13f4:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    13f6:	2214      	movs	r2, #20
    13f8:	2100      	movs	r1, #0
    13fa:	6820      	ldr	r0, [r4, #0]
    13fc:	f004 f807 	bl	540e <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1400:	6863      	ldr	r3, [r4, #4]
    1402:	f043 0302 	orr.w	r3, r3, #2
    1406:	6063      	str	r3, [r4, #4]
    1408:	e7d9      	b.n	13be <mutex_init_platform+0x16>
    140a:	bf00      	nop
    140c:	200000d4 	.word	0x200000d4
    1410:	00006754 	.word	0x00006754
    1414:	20000344 	.word	0x20000344
    1418:	0000677c 	.word	0x0000677c

0000141c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    141c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    141e:	2340      	movs	r3, #64	; 0x40
    1420:	2214      	movs	r2, #20
    1422:	4904      	ldr	r1, [pc, #16]	; (1434 <nrf_cc3xx_platform_mutex_init+0x18>)
    1424:	4804      	ldr	r0, [pc, #16]	; (1438 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1426:	f004 fdbc 	bl	5fa2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    142a:	4904      	ldr	r1, [pc, #16]	; (143c <nrf_cc3xx_platform_mutex_init+0x20>)
    142c:	4804      	ldr	r0, [pc, #16]	; (1440 <nrf_cc3xx_platform_mutex_init+0x24>)
    142e:	f003 fbef 	bl	4c10 <nrf_cc3xx_platform_set_mutexes>
}
    1432:	bd08      	pop	{r3, pc}
    1434:	20000360 	.word	0x20000360
    1438:	20000344 	.word	0x20000344
    143c:	000067bc 	.word	0x000067bc
    1440:	000067ac 	.word	0x000067ac

00001444 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1444:	4901      	ldr	r1, [pc, #4]	; (144c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1446:	2210      	movs	r2, #16
	str	r2, [r1]
    1448:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    144a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    144c:	e000ed10 	.word	0xe000ed10

00001450 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1450:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1452:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1454:	f380 8811 	msr	BASEPRI, r0
	isb
    1458:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    145c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1460:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1462:	b662      	cpsie	i
	isb
    1464:	f3bf 8f6f 	isb	sy

	bx	lr
    1468:	4770      	bx	lr
    146a:	bf00      	nop

0000146c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    146c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    146e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1470:	f381 8811 	msr	BASEPRI, r1

	wfe
    1474:	bf20      	wfe

	msr	BASEPRI, r0
    1476:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    147a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    147c:	4770      	bx	lr
    147e:	bf00      	nop

00001480 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1480:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1482:	2800      	cmp	r0, #0
    1484:	db07      	blt.n	1496 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1486:	f000 021f 	and.w	r2, r0, #31
    148a:	0940      	lsrs	r0, r0, #5
    148c:	2301      	movs	r3, #1
    148e:	4093      	lsls	r3, r2
    1490:	4a01      	ldr	r2, [pc, #4]	; (1498 <arch_irq_enable+0x18>)
    1492:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    1496:	4770      	bx	lr
    1498:	e000e100 	.word	0xe000e100

0000149c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    149c:	0942      	lsrs	r2, r0, #5
    149e:	4b05      	ldr	r3, [pc, #20]	; (14b4 <arch_irq_is_enabled+0x18>)
    14a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    14a4:	f000 001f 	and.w	r0, r0, #31
    14a8:	2301      	movs	r3, #1
    14aa:	fa03 f000 	lsl.w	r0, r3, r0
}
    14ae:	4010      	ands	r0, r2
    14b0:	4770      	bx	lr
    14b2:	bf00      	nop
    14b4:	e000e100 	.word	0xe000e100

000014b8 <z_arm_irq_priority_set>:
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    14b8:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    14ba:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    14bc:	2800      	cmp	r0, #0
    14be:	db08      	blt.n	14d2 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14c0:	0149      	lsls	r1, r1, #5
    14c2:	b2c9      	uxtb	r1, r1
    14c4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    14c8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    14cc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    14d0:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14d2:	f000 000f 	and.w	r0, r0, #15
    14d6:	0149      	lsls	r1, r1, #5
    14d8:	b2c9      	uxtb	r1, r1
    14da:	4b01      	ldr	r3, [pc, #4]	; (14e0 <z_arm_irq_priority_set+0x28>)
    14dc:	5419      	strb	r1, [r3, r0]
}
    14de:	4770      	bx	lr
    14e0:	e000ed14 	.word	0xe000ed14

000014e4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    14e4:	bf30      	wfi
    b z_SysNmiOnReset
    14e6:	f7ff bffd 	b.w	14e4 <z_SysNmiOnReset>
    14ea:	bf00      	nop

000014ec <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    14ec:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    14ee:	4b0b      	ldr	r3, [pc, #44]	; (151c <z_arm_prep_c+0x30>)
    14f0:	4a0b      	ldr	r2, [pc, #44]	; (1520 <z_arm_prep_c+0x34>)
    14f2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    14f6:	609a      	str	r2, [r3, #8]
    14f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14fc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1500:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1504:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    150c:	f002 fa44 	bl	3998 <z_bss_zero>
	z_data_copy();
    1510:	f003 f94e 	bl	47b0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1514:	f000 f9de 	bl	18d4 <z_arm_interrupt_init>
	z_cstart();
    1518:	f002 fa9a 	bl	3a50 <z_cstart>
    151c:	e000ed00 	.word	0xe000ed00
    1520:	00000000 	.word	0x00000000

00001524 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1524:	4a0a      	ldr	r2, [pc, #40]	; (1550 <arch_swap+0x2c>)
    1526:	6893      	ldr	r3, [r2, #8]
    1528:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    152c:	4909      	ldr	r1, [pc, #36]	; (1554 <arch_swap+0x30>)
    152e:	6809      	ldr	r1, [r1, #0]
    1530:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1534:	4908      	ldr	r1, [pc, #32]	; (1558 <arch_swap+0x34>)
    1536:	684b      	ldr	r3, [r1, #4]
    1538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    153c:	604b      	str	r3, [r1, #4]
    153e:	2300      	movs	r3, #0
    1540:	f383 8811 	msr	BASEPRI, r3
    1544:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1548:	6893      	ldr	r3, [r2, #8]
}
    154a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    154e:	4770      	bx	lr
    1550:	2000095c 	.word	0x2000095c
    1554:	0000692c 	.word	0x0000692c
    1558:	e000ed00 	.word	0xe000ed00

0000155c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    155c:	4914      	ldr	r1, [pc, #80]	; (15b0 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    155e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1560:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1564:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1566:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    156a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    156e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1570:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1574:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1578:	4f0e      	ldr	r7, [pc, #56]	; (15b4 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    157a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    157e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1580:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1582:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1584:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1588:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    158a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    158e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1592:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1596:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    159a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    159e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    15a2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    15a4:	f003 fe48 	bl	5238 <configure_builtin_stack_guard>
    pop {r2, lr}
    15a8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    15ac:	4770      	bx	lr
    15ae:	0000      	.short	0x0000
    ldr r1, =_kernel
    15b0:	2000095c 	.word	0x2000095c
    ldr v4, =_SCS_ICSR
    15b4:	e000ed04 	.word	0xe000ed04

000015b8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    15b8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    15bc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    15be:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    15c2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    15c6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    15c8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    15cc:	2902      	cmp	r1, #2
    beq _oops
    15ce:	d0ff      	beq.n	15d0 <_oops>

000015d0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    15d0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    15d2:	f003 fe1f 	bl	5214 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    15d6:	bd01      	pop	{r0, pc}

000015d8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    15d8:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    15da:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    15de:	490e      	ldr	r1, [pc, #56]	; (1618 <arch_new_thread+0x40>)
    15e0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    15e4:	f021 0101 	bic.w	r1, r1, #1
    15e8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    15ec:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    15f0:	9b01      	ldr	r3, [sp, #4]
    15f2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    15f6:	9b02      	ldr	r3, [sp, #8]
    15f8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    15fc:	9b03      	ldr	r3, [sp, #12]
    15fe:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1602:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1606:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    160a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    160c:	2300      	movs	r3, #0
    160e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1612:	bc10      	pop	{r4}
    1614:	4770      	bx	lr
    1616:	bf00      	nop
    1618:	000050b3 	.word	0x000050b3

0000161c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    161c:	4b09      	ldr	r3, [pc, #36]	; (1644 <arch_switch_to_main_thread+0x28>)
    161e:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    1620:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1624:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1628:	4610      	mov	r0, r2
    162a:	f381 8809 	msr	PSP, r1
    162e:	2100      	movs	r1, #0
    1630:	b663      	cpsie	if
    1632:	f381 8811 	msr	BASEPRI, r1
    1636:	f3bf 8f6f 	isb	sy
    163a:	2200      	movs	r2, #0
    163c:	2300      	movs	r3, #0
    163e:	f003 fd38 	bl	50b2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1642:	bf00      	nop
    1644:	2000095c 	.word	0x2000095c

00001648 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1648:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    164a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    164c:	4a0b      	ldr	r2, [pc, #44]	; (167c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    164e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1650:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1652:	bf1e      	ittt	ne
	movne	r1, #0
    1654:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1656:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1658:	f004 fcfe 	blne	6058 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    165c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    165e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1662:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1666:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    166a:	4905      	ldr	r1, [pc, #20]	; (1680 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    166c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    166e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1670:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1672:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1676:	4903      	ldr	r1, [pc, #12]	; (1684 <_isr_wrapper+0x3c>)
	bx r1
    1678:	4708      	bx	r1
    167a:	0000      	.short	0x0000
	ldr r2, =_kernel
    167c:	2000095c 	.word	0x2000095c
	ldr r1, =_sw_isr_table
    1680:	0000645c 	.word	0x0000645c
	ldr r1, =z_arm_int_exit
    1684:	00001689 	.word	0x00001689

00001688 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1688:	4b04      	ldr	r3, [pc, #16]	; (169c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    168a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    168c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    168e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1690:	d003      	beq.n	169a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1692:	4903      	ldr	r1, [pc, #12]	; (16a0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1698:	600a      	str	r2, [r1, #0]

0000169a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    169a:	4770      	bx	lr
	ldr r3, =_kernel
    169c:	2000095c 	.word	0x2000095c
	ldr r1, =_SCS_ICSR
    16a0:	e000ed04 	.word	0xe000ed04

000016a4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    16a4:	b510      	push	{r4, lr}
    16a6:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    16a8:	4b18      	ldr	r3, [pc, #96]	; (170c <mem_manage_fault+0x68>)
    16aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    16ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    16ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16b0:	f013 0f02 	tst.w	r3, #2
    16b4:	d00b      	beq.n	16ce <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    16b6:	4b15      	ldr	r3, [pc, #84]	; (170c <mem_manage_fault+0x68>)
    16b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    16ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16bc:	f013 0f80 	tst.w	r3, #128	; 0x80
    16c0:	d005      	beq.n	16ce <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    16c2:	b121      	cbz	r1, 16ce <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    16c4:	4a11      	ldr	r2, [pc, #68]	; (170c <mem_manage_fault+0x68>)
    16c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    16cc:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    16ce:	4b0f      	ldr	r3, [pc, #60]	; (170c <mem_manage_fault+0x68>)
    16d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    16d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    16d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16d6:	f013 0f10 	tst.w	r3, #16
    16da:	d101      	bne.n	16e0 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    16dc:	4b0b      	ldr	r3, [pc, #44]	; (170c <mem_manage_fault+0x68>)
    16de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    16e0:	4b0a      	ldr	r3, [pc, #40]	; (170c <mem_manage_fault+0x68>)
    16e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16e4:	f013 0f20 	tst.w	r3, #32
    16e8:	d004      	beq.n	16f4 <mem_manage_fault+0x50>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    16ea:	4a08      	ldr	r2, [pc, #32]	; (170c <mem_manage_fault+0x68>)
    16ec:	6a53      	ldr	r3, [r2, #36]	; 0x24
    16ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    16f2:	6253      	str	r3, [r2, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    16f4:	4a05      	ldr	r2, [pc, #20]	; (170c <mem_manage_fault+0x68>)
    16f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16f8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    16fc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    16fe:	2101      	movs	r1, #1
    1700:	f003 fd9f 	bl	5242 <memory_fault_recoverable>
    1704:	7020      	strb	r0, [r4, #0]

	return reason;
}
    1706:	2000      	movs	r0, #0
    1708:	bd10      	pop	{r4, pc}
    170a:	bf00      	nop
    170c:	e000ed00 	.word	0xe000ed00

00001710 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    1710:	b510      	push	{r4, lr}
    1712:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1714:	4b12      	ldr	r3, [pc, #72]	; (1760 <bus_fault+0x50>)
    1716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    171c:	f413 7f00 	tst.w	r3, #512	; 0x200
    1720:	d00b      	beq.n	173a <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1722:	4b0f      	ldr	r3, [pc, #60]	; (1760 <bus_fault+0x50>)
    1724:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1728:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    172c:	d005      	beq.n	173a <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    172e:	b121      	cbz	r1, 173a <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1730:	4a0b      	ldr	r2, [pc, #44]	; (1760 <bus_fault+0x50>)
    1732:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1734:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1738:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    173a:	4b09      	ldr	r3, [pc, #36]	; (1760 <bus_fault+0x50>)
    173c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1740:	f413 7f80 	tst.w	r3, #256	; 0x100
    1744:	d101      	bne.n	174a <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1746:	4b06      	ldr	r3, [pc, #24]	; (1760 <bus_fault+0x50>)
    1748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    174a:	4a05      	ldr	r2, [pc, #20]	; (1760 <bus_fault+0x50>)
    174c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    174e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1752:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1754:	2101      	movs	r1, #1
    1756:	f003 fd74 	bl	5242 <memory_fault_recoverable>
    175a:	7020      	strb	r0, [r4, #0]

	return reason;
}
    175c:	2000      	movs	r0, #0
    175e:	bd10      	pop	{r4, pc}
    1760:	e000ed00 	.word	0xe000ed00

00001764 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1764:	4b0a      	ldr	r3, [pc, #40]	; (1790 <usage_fault+0x2c>)
    1766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    176a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    176c:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    1770:	d10b      	bne.n	178a <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1772:	4b07      	ldr	r3, [pc, #28]	; (1790 <usage_fault+0x2c>)
    1774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    177a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    177c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    177e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1782:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1786:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1788:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    178a:	2002      	movs	r0, #2
    178c:	e7f1      	b.n	1772 <usage_fault+0xe>
    178e:	bf00      	nop
    1790:	e000ed00 	.word	0xe000ed00

00001794 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    1794:	b508      	push	{r3, lr}
    1796:	4684      	mov	ip, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    1798:	2300      	movs	r3, #0
    179a:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    179c:	4b1c      	ldr	r3, [pc, #112]	; (1810 <hard_fault+0x7c>)
    179e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    17a0:	f010 0002 	ands.w	r0, r0, #2
    17a4:	d131      	bne.n	180a <hard_fault+0x76>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    17a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    17a8:	2b00      	cmp	r3, #0
    17aa:	db2f      	blt.n	180c <hard_fault+0x78>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    17ac:	4b18      	ldr	r3, [pc, #96]	; (1810 <hard_fault+0x7c>)
    17ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    17b0:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    17b4:	d02a      	beq.n	180c <hard_fault+0x78>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    17b6:	f8dc 3018 	ldr.w	r3, [ip, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    17ba:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    17be:	f64d 7302 	movw	r3, #57090	; 0xdf02
    17c2:	429a      	cmp	r2, r3
    17c4:	d012      	beq.n	17ec <hard_fault+0x58>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    17c6:	4b12      	ldr	r3, [pc, #72]	; (1810 <hard_fault+0x7c>)
    17c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17ca:	f013 0fff 	tst.w	r3, #255	; 0xff
    17ce:	d110      	bne.n	17f2 <hard_fault+0x5e>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    17d0:	4b0f      	ldr	r3, [pc, #60]	; (1810 <hard_fault+0x7c>)
    17d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17d4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    17d8:	d111      	bne.n	17fe <hard_fault+0x6a>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    17da:	4b0d      	ldr	r3, [pc, #52]	; (1810 <hard_fault+0x7c>)
    17dc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    17de:	0c00      	lsrs	r0, r0, #16
    17e0:	0400      	lsls	r0, r0, #16
    17e2:	b198      	cbz	r0, 180c <hard_fault+0x78>
			reason = usage_fault(esf);
    17e4:	4660      	mov	r0, ip
    17e6:	f7ff ffbd 	bl	1764 <usage_fault>
    17ea:	e00f      	b.n	180c <hard_fault+0x78>
			reason = esf->basic.r0;
    17ec:	f8dc 0000 	ldr.w	r0, [ip]
    17f0:	e00c      	b.n	180c <hard_fault+0x78>
			reason = mem_manage_fault(esf, 1, recoverable);
    17f2:	460a      	mov	r2, r1
    17f4:	2101      	movs	r1, #1
    17f6:	4660      	mov	r0, ip
    17f8:	f7ff ff54 	bl	16a4 <mem_manage_fault>
    17fc:	e006      	b.n	180c <hard_fault+0x78>
			reason = bus_fault(esf, 1, recoverable);
    17fe:	460a      	mov	r2, r1
    1800:	2101      	movs	r1, #1
    1802:	4660      	mov	r0, ip
    1804:	f7ff ff84 	bl	1710 <bus_fault>
    1808:	e000      	b.n	180c <hard_fault+0x78>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    180a:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    180c:	bd08      	pop	{r3, pc}
    180e:	bf00      	nop
    1810:	e000ed00 	.word	0xe000ed00

00001814 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1814:	b570      	push	{r4, r5, r6, lr}
    1816:	b08a      	sub	sp, #40	; 0x28
    1818:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    181a:	4b22      	ldr	r3, [pc, #136]	; (18a4 <z_arm_fault+0x90>)
    181c:	6859      	ldr	r1, [r3, #4]
    181e:	f3c1 0108 	ubfx	r1, r1, #0, #9
    1822:	2300      	movs	r3, #0
    1824:	f383 8811 	msr	BASEPRI, r3
    1828:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    182c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1830:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1834:	d115      	bne.n	1862 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1836:	f002 030c 	and.w	r3, r2, #12
    183a:	2b08      	cmp	r3, #8
    183c:	d014      	beq.n	1868 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    183e:	f012 0f08 	tst.w	r2, #8
    1842:	d00b      	beq.n	185c <z_arm_fault+0x48>
	*nested_exc = false;
    1844:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    1846:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    184a:	4620      	mov	r0, r4
    184c:	f003 fcfe 	bl	524c <fault_handle>
    1850:	4605      	mov	r5, r0
	if (recoverable) {
    1852:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    1856:	b153      	cbz	r3, 186e <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1858:	b00a      	add	sp, #40	; 0x28
    185a:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    185c:	4604      	mov	r4, r0
			*nested_exc = true;
    185e:	2601      	movs	r6, #1
    1860:	e7f1      	b.n	1846 <z_arm_fault+0x32>
	*nested_exc = false;
    1862:	2600      	movs	r6, #0
		return NULL;
    1864:	4634      	mov	r4, r6
    1866:	e7ee      	b.n	1846 <z_arm_fault+0x32>
	*nested_exc = false;
    1868:	2600      	movs	r6, #0
		return NULL;
    186a:	4634      	mov	r4, r6
    186c:	e7eb      	b.n	1846 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    186e:	2220      	movs	r2, #32
    1870:	4621      	mov	r1, r4
    1872:	a801      	add	r0, sp, #4
    1874:	f003 fd9c 	bl	53b0 <memcpy>
	if (nested_exc) {
    1878:	b14e      	cbz	r6, 188e <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    187a:	9b08      	ldr	r3, [sp, #32]
    187c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1880:	b95a      	cbnz	r2, 189a <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1882:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1886:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    188a:	9308      	str	r3, [sp, #32]
    188c:	e005      	b.n	189a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    188e:	9b08      	ldr	r3, [sp, #32]
    1890:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1894:	f023 0301 	bic.w	r3, r3, #1
    1898:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    189a:	a901      	add	r1, sp, #4
    189c:	4628      	mov	r0, r5
    189e:	f003 fcb5 	bl	520c <z_arm_fatal_error>
    18a2:	e7d9      	b.n	1858 <z_arm_fault+0x44>
    18a4:	e000ed00 	.word	0xe000ed00

000018a8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    18a8:	4b04      	ldr	r3, [pc, #16]	; (18bc <z_arm_fault_init+0x14>)
    18aa:	695a      	ldr	r2, [r3, #20]
    18ac:	f042 0210 	orr.w	r2, r2, #16
    18b0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    18b2:	695a      	ldr	r2, [r3, #20]
    18b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    18b8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    18ba:	4770      	bx	lr
    18bc:	e000ed00 	.word	0xe000ed00

000018c0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    18c0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    18c4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    18c8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    18ca:	4672      	mov	r2, lr
	bl z_arm_fault
    18cc:	f7ff ffa2 	bl	1814 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    18d0:	bd01      	pop	{r0, pc}
    18d2:	bf00      	nop

000018d4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    18d4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    18d6:	e007      	b.n	18e8 <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    18dc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    18e0:	2120      	movs	r1, #32
    18e2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    18e6:	3201      	adds	r2, #1
    18e8:	2a44      	cmp	r2, #68	; 0x44
    18ea:	dc09      	bgt.n	1900 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    18ec:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    18ee:	2b00      	cmp	r3, #0
    18f0:	daf2      	bge.n	18d8 <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18f2:	f002 010f 	and.w	r1, r2, #15
    18f6:	4b03      	ldr	r3, [pc, #12]	; (1904 <z_arm_interrupt_init+0x30>)
    18f8:	440b      	add	r3, r1
    18fa:	2120      	movs	r1, #32
    18fc:	7619      	strb	r1, [r3, #24]
    18fe:	e7f2      	b.n	18e6 <z_arm_interrupt_init+0x12>
	}
}
    1900:	4770      	bx	lr
    1902:	bf00      	nop
    1904:	e000ecfc 	.word	0xe000ecfc

00001908 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    1908:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    190a:	4915      	ldr	r1, [pc, #84]	; (1960 <__start+0x58>)
    strb r0, [r1]
    190c:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    190e:	2000      	movs	r0, #0
    msr CONTROL, r0
    1910:	f380 8814 	msr	CONTROL, r0
    isb
    1914:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1918:	2000      	movs	r0, #0
    msr MSPLIM, r0
    191a:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    191e:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1922:	f7ff fb4d 	bl	fc0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1926:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1928:	490e      	ldr	r1, [pc, #56]	; (1964 <__start+0x5c>)
    str r0, [r1]
    192a:	6008      	str	r0, [r1, #0]
    dsb
    192c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1930:	480d      	ldr	r0, [pc, #52]	; (1968 <__start+0x60>)
    msr msp, r0
    1932:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1936:	f000 f841 	bl	19bc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    193a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    193c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1940:	480a      	ldr	r0, [pc, #40]	; (196c <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1942:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1946:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1948:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    194c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1950:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1952:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1954:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1958:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    195c:	f7ff fdc6 	bl	14ec <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
    1960:	20000b73 	.word	0x20000b73
    ldr r1, =_SCS_MPU_CTRL
    1964:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1968:	20000f78 	.word	0x20000f78
    ldr r0, =z_interrupt_stacks
    196c:	200010b8 	.word	0x200010b8

00001970 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    1970:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1974:	4905      	ldr	r1, [pc, #20]	; (198c <sys_arch_reboot+0x1c>)
    1976:	68ca      	ldr	r2, [r1, #12]
    1978:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    197c:	4b04      	ldr	r3, [pc, #16]	; (1990 <sys_arch_reboot+0x20>)
    197e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1980:	60cb      	str	r3, [r1, #12]
    1982:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1986:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1988:	e7fd      	b.n	1986 <sys_arch_reboot+0x16>
    198a:	bf00      	nop
    198c:	e000ed00 	.word	0xe000ed00
    1990:	05fa0004 	.word	0x05fa0004

00001994 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1994:	4b08      	ldr	r3, [pc, #32]	; (19b8 <z_arm_clear_arm_mpu_config+0x24>)
    1996:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    199a:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    199e:	2300      	movs	r3, #0
    19a0:	e006      	b.n	19b0 <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    19a2:	4a05      	ldr	r2, [pc, #20]	; (19b8 <z_arm_clear_arm_mpu_config+0x24>)
    19a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
    19a8:	2100      	movs	r1, #0
    19aa:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    19ae:	3301      	adds	r3, #1
    19b0:	4283      	cmp	r3, r0
    19b2:	dbf6      	blt.n	19a2 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    19b4:	4770      	bx	lr
    19b6:	bf00      	nop
    19b8:	e000ed00 	.word	0xe000ed00

000019bc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    19bc:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    19be:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    19c0:	2400      	movs	r4, #0
    19c2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    19c6:	f7ff ffe5 	bl	1994 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    19ca:	4623      	mov	r3, r4
    19cc:	e008      	b.n	19e0 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    19ce:	f103 0120 	add.w	r1, r3, #32
    19d2:	4a0e      	ldr	r2, [pc, #56]	; (1a0c <z_arm_init_arch_hw_at_boot+0x50>)
    19d4:	f04f 30ff 	mov.w	r0, #4294967295
    19d8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    19dc:	3301      	adds	r3, #1
    19de:	b2db      	uxtb	r3, r3
    19e0:	2b0f      	cmp	r3, #15
    19e2:	d9f4      	bls.n	19ce <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    19e4:	2300      	movs	r3, #0
    19e6:	e008      	b.n	19fa <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    19e8:	f103 0160 	add.w	r1, r3, #96	; 0x60
    19ec:	4a07      	ldr	r2, [pc, #28]	; (1a0c <z_arm_init_arch_hw_at_boot+0x50>)
    19ee:	f04f 30ff 	mov.w	r0, #4294967295
    19f2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    19f6:	3301      	adds	r3, #1
    19f8:	b2db      	uxtb	r3, r3
    19fa:	2b0f      	cmp	r3, #15
    19fc:	d9f4      	bls.n	19e8 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    19fe:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1a00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a04:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1a08:	bd10      	pop	{r4, pc}
    1a0a:	bf00      	nop
    1a0c:	e000e100 	.word	0xe000e100

00001a10 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1a10:	b508      	push	{r3, lr}
	if (_current == thread) {
    1a12:	4b0a      	ldr	r3, [pc, #40]	; (1a3c <z_impl_k_thread_abort+0x2c>)
    1a14:	689b      	ldr	r3, [r3, #8]
    1a16:	4283      	cmp	r3, r0
    1a18:	d002      	beq.n	1a20 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    1a1a:	f002 fe91 	bl	4740 <z_thread_abort>
}
    1a1e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1a20:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1a24:	2b00      	cmp	r3, #0
    1a26:	d0f8      	beq.n	1a1a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a28:	4b05      	ldr	r3, [pc, #20]	; (1a40 <z_impl_k_thread_abort+0x30>)
    1a2a:	685a      	ldr	r2, [r3, #4]
    1a2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a30:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1a34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1a38:	625a      	str	r2, [r3, #36]	; 0x24
    1a3a:	e7ee      	b.n	1a1a <z_impl_k_thread_abort+0xa>
    1a3c:	2000095c 	.word	0x2000095c
    1a40:	e000ed00 	.word	0xe000ed00

00001a44 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1a44:	b510      	push	{r4, lr}
    1a46:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1a48:	4c0a      	ldr	r4, [pc, #40]	; (1a74 <z_arm_configure_static_mpu_regions+0x30>)
    1a4a:	4623      	mov	r3, r4
    1a4c:	4a0a      	ldr	r2, [pc, #40]	; (1a78 <z_arm_configure_static_mpu_regions+0x34>)
    1a4e:	2101      	movs	r1, #1
    1a50:	480a      	ldr	r0, [pc, #40]	; (1a7c <z_arm_configure_static_mpu_regions+0x38>)
    1a52:	f003 fc78 	bl	5346 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1a56:	2300      	movs	r3, #0
    1a58:	9301      	str	r3, [sp, #4]
    1a5a:	9302      	str	r3, [sp, #8]
    1a5c:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1a5e:	4b08      	ldr	r3, [pc, #32]	; (1a80 <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1a60:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1a62:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1a64:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1a66:	2101      	movs	r1, #1
    1a68:	a801      	add	r0, sp, #4
    1a6a:	f003 fc70 	bl	534e <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1a6e:	b004      	add	sp, #16
    1a70:	bd10      	pop	{r4, pc}
    1a72:	bf00      	nop
    1a74:	20070000 	.word	0x20070000
    1a78:	20000000 	.word	0x20000000
    1a7c:	000067d0 	.word	0x000067d0
    1a80:	20000198 	.word	0x20000198

00001a84 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
    1a84:	4b02      	ldr	r3, [pc, #8]	; (1a90 <mpu_init+0xc>)
    1a86:	4a03      	ldr	r2, [pc, #12]	; (1a94 <mpu_init+0x10>)
    1a88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
    1a8c:	4770      	bx	lr
    1a8e:	bf00      	nop
    1a90:	e000ed00 	.word	0xe000ed00
    1a94:	0044ffaa 	.word	0x0044ffaa

00001a98 <mpu_set_region>:
	MPU->RNR = rnr;
    1a98:	4b03      	ldr	r3, [pc, #12]	; (1aa8 <mpu_set_region+0x10>)
    1a9a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
    1a9e:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
    1aa2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
    1aa6:	4770      	bx	lr
    1aa8:	e000ed00 	.word	0xe000ed00

00001aac <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ab0:	b087      	sub	sp, #28
    1ab2:	4681      	mov	r9, r0
    1ab4:	9100      	str	r1, [sp, #0]
    1ab6:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    1ab8:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    1aba:	2700      	movs	r7, #0
    1abc:	e038      	b.n	1b30 <mpu_configure_regions_and_partition+0x84>
	return -EINVAL;
    1abe:	f06f 0615 	mvn.w	r6, #21
    1ac2:	e058      	b.n	1b76 <mpu_configure_regions_and_partition+0xca>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    1ac4:	45d8      	cmp	r8, fp
    1ac6:	d171      	bne.n	1bac <mpu_configure_regions_and_partition+0x100>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    1ac8:	4629      	mov	r1, r5
    1aca:	b2f0      	uxtb	r0, r6
    1acc:	f003 fc1c 	bl	5308 <mpu_configure_region>
    1ad0:	e02d      	b.n	1b2e <mpu_configure_regions_and_partition+0x82>
	MPU->RNR = rnr;
    1ad2:	4b5f      	ldr	r3, [pc, #380]	; (1c50 <mpu_configure_regions_and_partition+0x1a4>)
    1ad4:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    1ad8:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    1adc:	f001 011f 	and.w	r1, r1, #31
		     | (base & MPU_RBAR_BASE_Msk));
    1ae0:	f022 021f 	bic.w	r2, r2, #31
    1ae4:	430a      	orrs	r2, r1
	MPU->RBAR = rbar;
    1ae6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1aea:	4629      	mov	r1, r5
    1aec:	b2e0      	uxtb	r0, r4
    1aee:	f003 fc0b 	bl	5308 <mpu_configure_region>
    1af2:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1af4:	f110 0f16 	cmn.w	r0, #22
    1af8:	f000 80a3 	beq.w	1c42 <mpu_configure_regions_and_partition+0x196>
				return reg_index;
			}

			reg_index++;
    1afc:	3401      	adds	r4, #1
    1afe:	e016      	b.n	1b2e <mpu_configure_regions_and_partition+0x82>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    1b00:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    1b02:	4953      	ldr	r1, [pc, #332]	; (1c50 <mpu_configure_regions_and_partition+0x1a4>)
    1b04:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	return MPU->RLAR;
    1b08:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1b0c:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1b10:	f023 031f 	bic.w	r3, r3, #31
    1b14:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    1b16:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1b1a:	4629      	mov	r1, r5
    1b1c:	b2e0      	uxtb	r0, r4
    1b1e:	f003 fbf3 	bl	5308 <mpu_configure_region>
    1b22:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1b24:	f110 0f16 	cmn.w	r0, #22
    1b28:	f000 808b 	beq.w	1c42 <mpu_configure_regions_and_partition+0x196>
				return reg_index;
			}

			reg_index++;
    1b2c:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    1b2e:	3701      	adds	r7, #1
    1b30:	9b00      	ldr	r3, [sp, #0]
    1b32:	429f      	cmp	r7, r3
    1b34:	f280 8085 	bge.w	1c42 <mpu_configure_regions_and_partition+0x196>
		if (regions[i].size == 0U) {
    1b38:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    1b3c:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    1b40:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    1b44:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1b48:	f1b8 0f00 	cmp.w	r8, #0
    1b4c:	d0ef      	beq.n	1b2e <mpu_configure_regions_and_partition+0x82>
		if (do_sanity_check &&
    1b4e:	9b01      	ldr	r3, [sp, #4]
    1b50:	b123      	cbz	r3, 1b5c <mpu_configure_regions_and_partition+0xb0>
			(!mpu_partition_is_valid(&regions[i]))) {
    1b52:	4628      	mov	r0, r5
    1b54:	f003 fbbb 	bl	52ce <mpu_partition_is_valid>
		if (do_sanity_check &&
    1b58:	2800      	cmp	r0, #0
    1b5a:	d06e      	beq.n	1c3a <mpu_configure_regions_and_partition+0x18e>
			get_region_index(regions[i].start, regions[i].size);
    1b5c:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1b60:	4658      	mov	r0, fp
    1b62:	f003 fb96 	bl	5292 <arm_cmse_mpu_region_get>
    1b66:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1b68:	eb08 000b 	add.w	r0, r8, fp
    1b6c:	3801      	subs	r0, #1
    1b6e:	f003 fb90 	bl	5292 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1b72:	4286      	cmp	r6, r0
    1b74:	d1a3      	bne.n	1abe <mpu_configure_regions_and_partition+0x12>
		if ((u_reg_index == -EINVAL) ||
    1b76:	f116 0f16 	cmn.w	r6, #22
    1b7a:	d061      	beq.n	1c40 <mpu_configure_regions_and_partition+0x194>
    1b7c:	42b4      	cmp	r4, r6
    1b7e:	dd64      	ble.n	1c4a <mpu_configure_regions_and_partition+0x19e>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    1b80:	4630      	mov	r0, r6
	MPU->RNR = rnr;
    1b82:	4b33      	ldr	r3, [pc, #204]	; (1c50 <mpu_configure_regions_and_partition+0x1a4>)
    1b84:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
    1b88:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1b8c:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = rnr;
    1b90:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RLAR;
    1b94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1b98:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1b9c:	f859 300a 	ldr.w	r3, [r9, sl]
    1ba0:	686a      	ldr	r2, [r5, #4]
    1ba2:	441a      	add	r2, r3
    1ba4:	f102 3bff 	add.w	fp, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    1ba8:	4299      	cmp	r1, r3
    1baa:	d08b      	beq.n	1ac4 <mpu_configure_regions_and_partition+0x18>
		} else if (regions[i].start == u_reg_base) {
    1bac:	4299      	cmp	r1, r3
    1bae:	d090      	beq.n	1ad2 <mpu_configure_regions_and_partition+0x26>
		} else if (reg_last == u_reg_last) {
    1bb0:	45d8      	cmp	r8, fp
    1bb2:	d0a5      	beq.n	1b00 <mpu_configure_regions_and_partition+0x54>
			/* The new regions lies strictly inside the
			 * underlying region, which needs to split
			 * into two regions.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    1bb4:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    1bb6:	4926      	ldr	r1, [pc, #152]	; (1c50 <mpu_configure_regions_and_partition+0x1a4>)
    1bb8:	4606      	mov	r6, r0
    1bba:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	return MPU->RLAR;
    1bbe:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1bc2:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1bc6:	f023 031f 	bic.w	r3, r3, #31
    1bca:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    1bcc:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1bd0:	4629      	mov	r1, r5
    1bd2:	b2e0      	uxtb	r0, r4
    1bd4:	f003 fb98 	bl	5308 <mpu_configure_region>
    1bd8:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1bda:	f110 0f16 	cmn.w	r0, #22
    1bde:	d030      	beq.n	1c42 <mpu_configure_regions_and_partition+0x196>
				return reg_index;
			}
			reg_index++;
    1be0:	3001      	adds	r0, #1
	MPU->RNR = rnr;
    1be2:	4b1b      	ldr	r3, [pc, #108]	; (1c50 <mpu_configure_regions_and_partition+0x1a4>)
    1be4:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
    1be8:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1bec:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1bf0:	f361 0204 	bfi	r2, r1, #0, #5
    1bf4:	f88d 2010 	strb.w	r2, [sp, #16]
	return MPU->RLAR;
    1bf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1bfc:	f3c3 0342 	ubfx	r3, r3, #1, #3
    1c00:	b2d2      	uxtb	r2, r2
    1c02:	f363 1247 	bfi	r2, r3, #5, #3
    1c06:	f88d 2010 	strb.w	r2, [sp, #16]
			 */
			struct arm_mpu_region fill_region;

			mpu_region_get_access_attr(u_reg_index,
				&fill_region.attr);
			fill_region.base = regions[i].start +
    1c0a:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    1c0e:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    1c10:	4413      	add	r3, r2
    1c12:	9302      	str	r3, [sp, #8]
			fill_region.attr.r_limit =
			REGION_LIMIT_ADDR((regions[i].start +
    1c14:	f023 031f 	bic.w	r3, r3, #31
    1c18:	eba8 080b 	sub.w	r8, r8, fp
    1c1c:	4443      	add	r3, r8
    1c1e:	3b01      	subs	r3, #1
    1c20:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    1c24:	9305      	str	r3, [sp, #20]
				regions[i].size), (u_reg_last - reg_last));

			reg_index =
				region_allocate_and_init(reg_index,
    1c26:	a902      	add	r1, sp, #8
    1c28:	b2c0      	uxtb	r0, r0
    1c2a:	f003 fb62 	bl	52f2 <region_allocate_and_init>
    1c2e:	4604      	mov	r4, r0
					(const struct arm_mpu_region *)
						&fill_region);

			if (reg_index == -EINVAL) {
    1c30:	f110 0f16 	cmn.w	r0, #22
    1c34:	d005      	beq.n	1c42 <mpu_configure_regions_and_partition+0x196>
				return reg_index;
			}

			reg_index++;
    1c36:	3401      	adds	r4, #1
    1c38:	e779      	b.n	1b2e <mpu_configure_regions_and_partition+0x82>
			return -EINVAL;
    1c3a:	f06f 0415 	mvn.w	r4, #21
    1c3e:	e000      	b.n	1c42 <mpu_configure_regions_and_partition+0x196>
			return -EINVAL;
    1c40:	4634      	mov	r4, r6
		}
	}

	return reg_index;
}
    1c42:	4620      	mov	r0, r4
    1c44:	b007      	add	sp, #28
    1c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    1c4a:	f06f 0415 	mvn.w	r4, #21
    1c4e:	e7f8      	b.n	1c42 <mpu_configure_regions_and_partition+0x196>
    1c50:	e000ed00 	.word	0xe000ed00

00001c54 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1c54:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1c56:	4c03      	ldr	r4, [pc, #12]	; (1c64 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1c58:	2301      	movs	r3, #1
    1c5a:	7822      	ldrb	r2, [r4, #0]
    1c5c:	f7ff ff26 	bl	1aac <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1c60:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1c62:	bd10      	pop	{r4, pc}
    1c64:	20000b70 	.word	0x20000b70

00001c68 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    1c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c6c:	4607      	mov	r7, r0
    1c6e:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1c70:	2400      	movs	r4, #0
    1c72:	e003      	b.n	1c7c <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
    1c74:	f06f 0515 	mvn.w	r5, #21
    1c78:	e017      	b.n	1caa <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1c7a:	3401      	adds	r4, #1
    1c7c:	45a0      	cmp	r8, r4
    1c7e:	dd43      	ble.n	1d08 <mpu_mark_areas_for_dynamic_regions+0xa0>
		if (dyn_region_areas[i].size == 0U) {
    1c80:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1c84:	009a      	lsls	r2, r3, #2
    1c86:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    1c8a:	685e      	ldr	r6, [r3, #4]
    1c8c:	2e00      	cmp	r6, #0
    1c8e:	d0f4      	beq.n	1c7a <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1c90:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1c94:	4648      	mov	r0, r9
    1c96:	f003 fafc 	bl	5292 <arm_cmse_mpu_region_get>
    1c9a:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1c9c:	eb06 0009 	add.w	r0, r6, r9
    1ca0:	3801      	subs	r0, #1
    1ca2:	f003 faf6 	bl	5292 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1ca6:	4285      	cmp	r5, r0
    1ca8:	d1e4      	bne.n	1c74 <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
    1caa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1cae:	4a1a      	ldr	r2, [pc, #104]	; (1d18 <mpu_mark_areas_for_dynamic_regions+0xb0>)
    1cb0:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1cb4:	f115 0f16 	cmn.w	r5, #22
    1cb8:	d027      	beq.n	1d0a <mpu_mark_areas_for_dynamic_regions+0xa2>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1cba:	4b18      	ldr	r3, [pc, #96]	; (1d1c <mpu_mark_areas_for_dynamic_regions+0xb4>)
    1cbc:	781b      	ldrb	r3, [r3, #0]
    1cbe:	42ab      	cmp	r3, r5
    1cc0:	dd26      	ble.n	1d10 <mpu_mark_areas_for_dynamic_regions+0xa8>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    1cc2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1cc6:	4b14      	ldr	r3, [pc, #80]	; (1d18 <mpu_mark_areas_for_dynamic_regions+0xb0>)
    1cc8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	MPU->RNR = rnr;
    1ccc:	4b14      	ldr	r3, [pc, #80]	; (1d20 <mpu_mark_areas_for_dynamic_regions+0xb8>)
    1cce:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    1cd2:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
	return MPU->RBAR;
    1cd6:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1cda:	7b10      	ldrb	r0, [r2, #12]
    1cdc:	f365 0004 	bfi	r0, r5, #0, #5
    1ce0:	7310      	strb	r0, [r2, #12]
	return MPU->RLAR;
    1ce2:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1ce6:	f3c0 0042 	ubfx	r0, r0, #1, #3
    1cea:	7b15      	ldrb	r5, [r2, #12]
    1cec:	f360 1547 	bfi	r5, r0, #5, #3
    1cf0:	7315      	strb	r5, [r2, #12]
	return MPU->RBAR;
    1cf2:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1cf6:	f020 001f 	bic.w	r0, r0, #31
    1cfa:	6050      	str	r0, [r2, #4]
	return MPU->RLAR;
    1cfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    1d00:	f023 031f 	bic.w	r3, r3, #31
    1d04:	6113      	str	r3, [r2, #16]
}
    1d06:	e7b8      	b.n	1c7a <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    1d08:	2500      	movs	r5, #0
}
    1d0a:	4628      	mov	r0, r5
    1d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    1d10:	f06f 0515 	mvn.w	r5, #21
    1d14:	e7f9      	b.n	1d0a <mpu_mark_areas_for_dynamic_regions+0xa2>
    1d16:	bf00      	nop
    1d18:	20000860 	.word	0x20000860
    1d1c:	20000b70 	.word	0x20000b70
    1d20:	e000ed00 	.word	0xe000ed00

00001d24 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1d24:	4b04      	ldr	r3, [pc, #16]	; (1d38 <arm_core_mpu_enable+0x14>)
    1d26:	2205      	movs	r2, #5
    1d28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1d2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d30:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1d34:	4770      	bx	lr
    1d36:	bf00      	nop
    1d38:	e000ed00 	.word	0xe000ed00

00001d3c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1d3c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1d40:	4b02      	ldr	r3, [pc, #8]	; (1d4c <arm_core_mpu_disable+0x10>)
    1d42:	2200      	movs	r2, #0
    1d44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1d48:	4770      	bx	lr
    1d4a:	bf00      	nop
    1d4c:	e000ed00 	.word	0xe000ed00

00001d50 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1d50:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1d52:	4b0e      	ldr	r3, [pc, #56]	; (1d8c <z_arm_mpu_init+0x3c>)
    1d54:	681d      	ldr	r5, [r3, #0]
    1d56:	2d08      	cmp	r5, #8
    1d58:	d815      	bhi.n	1d86 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1d5a:	f7ff ffef 	bl	1d3c <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    1d5e:	f7ff fe91 	bl	1a84 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d62:	2400      	movs	r4, #0
    1d64:	e007      	b.n	1d76 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1d66:	4b09      	ldr	r3, [pc, #36]	; (1d8c <z_arm_mpu_init+0x3c>)
    1d68:	6859      	ldr	r1, [r3, #4]
    1d6a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    1d6e:	4620      	mov	r0, r4
    1d70:	f003 fa99 	bl	52a6 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d74:	3401      	adds	r4, #1
    1d76:	42a5      	cmp	r5, r4
    1d78:	d8f5      	bhi.n	1d66 <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1d7a:	4b05      	ldr	r3, [pc, #20]	; (1d90 <z_arm_mpu_init+0x40>)
    1d7c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1d7e:	f7ff ffd1 	bl	1d24 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1d82:	2000      	movs	r0, #0
}
    1d84:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1d86:	f04f 30ff 	mov.w	r0, #4294967295
    1d8a:	e7fb      	b.n	1d84 <z_arm_mpu_init+0x34>
    1d8c:	000067ec 	.word	0x000067ec
    1d90:	20000b70 	.word	0x20000b70

00001d94 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1d94:	4b01      	ldr	r3, [pc, #4]	; (1d9c <__stdout_hook_install+0x8>)
    1d96:	6018      	str	r0, [r3, #0]
}
    1d98:	4770      	bx	lr
    1d9a:	bf00      	nop
    1d9c:	20000028 	.word	0x20000028

00001da0 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1da0:	4800      	ldr	r0, [pc, #0]	; (1da4 <get_hf_flags+0x4>)
    1da2:	4770      	bx	lr
    1da4:	200008fc 	.word	0x200008fc

00001da8 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1da8:	4b03      	ldr	r3, [pc, #12]	; (1db8 <get_subsys+0x10>)
    1daa:	1ac0      	subs	r0, r0, r3
    1dac:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    1dae:	4b03      	ldr	r3, [pc, #12]	; (1dbc <get_subsys+0x14>)
    1db0:	fb03 f000 	mul.w	r0, r3, r0
    1db4:	4770      	bx	lr
    1db6:	bf00      	nop
    1db8:	20000884 	.word	0x20000884
    1dbc:	b6db6db7 	.word	0xb6db6db7

00001dc0 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1dc0:	b538      	push	{r3, r4, r5, lr}
    1dc2:	4605      	mov	r5, r0
    1dc4:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1dc6:	f7ff ffef 	bl	1da8 <get_subsys>
    1dca:	4601      	mov	r1, r0
    1dcc:	2240      	movs	r2, #64	; 0x40
    1dce:	4803      	ldr	r0, [pc, #12]	; (1ddc <onoff_stop+0x1c>)
    1dd0:	f003 fbb3 	bl	553a <stop>
    1dd4:	4601      	mov	r1, r0
	notify(mgr, res);
    1dd6:	4628      	mov	r0, r5
    1dd8:	47a0      	blx	r4
}
    1dda:	bd38      	pop	{r3, r4, r5, pc}
    1ddc:	000063fc 	.word	0x000063fc

00001de0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1de0:	b530      	push	{r4, r5, lr}
    1de2:	b083      	sub	sp, #12
    1de4:	4605      	mov	r5, r0
    1de6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1de8:	f7ff ffde 	bl	1da8 <get_subsys>
    1dec:	4601      	mov	r1, r0
    1dee:	2340      	movs	r3, #64	; 0x40
    1df0:	9300      	str	r3, [sp, #0]
    1df2:	4623      	mov	r3, r4
    1df4:	4a05      	ldr	r2, [pc, #20]	; (1e0c <onoff_start+0x2c>)
    1df6:	4806      	ldr	r0, [pc, #24]	; (1e10 <onoff_start+0x30>)
    1df8:	f003 fbb9 	bl	556e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1dfc:	1e01      	subs	r1, r0, #0
    1dfe:	db01      	blt.n	1e04 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    1e00:	b003      	add	sp, #12
    1e02:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    1e04:	4628      	mov	r0, r5
    1e06:	47a0      	blx	r4
}
    1e08:	e7fa      	b.n	1e00 <onoff_start+0x20>
    1e0a:	bf00      	nop
    1e0c:	000055b7 	.word	0x000055b7
    1e10:	000063fc 	.word	0x000063fc

00001e14 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    1e14:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    1e16:	2805      	cmp	r0, #5
    1e18:	d815      	bhi.n	1e46 <clock_event_handler+0x32>
    1e1a:	e8df f000 	tbb	[pc, r0]
    1e1e:	1a03      	.short	0x1a03
    1e20:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1e24:	2100      	movs	r1, #0
    1e26:	480d      	ldr	r0, [pc, #52]	; (1e5c <clock_event_handler+0x48>)
    1e28:	f003 fb12 	bl	5450 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1e2c:	6883      	ldr	r3, [r0, #8]
    1e2e:	f013 0f07 	tst.w	r3, #7
    1e32:	d108      	bne.n	1e46 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1e34:	2100      	movs	r1, #0
    1e36:	4809      	ldr	r0, [pc, #36]	; (1e5c <clock_event_handler+0x48>)
    1e38:	f003 fb6d 	bl	5516 <clkstarted_handle>
    1e3c:	e003      	b.n	1e46 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1e3e:	2102      	movs	r1, #2
    1e40:	4806      	ldr	r0, [pc, #24]	; (1e5c <clock_event_handler+0x48>)
    1e42:	f003 fb68 	bl	5516 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    1e46:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1e48:	2103      	movs	r1, #3
    1e4a:	4804      	ldr	r0, [pc, #16]	; (1e5c <clock_event_handler+0x48>)
    1e4c:	f003 fb63 	bl	5516 <clkstarted_handle>
		break;
    1e50:	e7f9      	b.n	1e46 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1e52:	2101      	movs	r1, #1
    1e54:	4801      	ldr	r0, [pc, #4]	; (1e5c <clock_event_handler+0x48>)
    1e56:	f003 fb5e 	bl	5516 <clkstarted_handle>
}
    1e5a:	e7f4      	b.n	1e46 <clock_event_handler+0x32>
    1e5c:	000063fc 	.word	0x000063fc

00001e60 <generic_hfclk_start>:
{
    1e60:	b510      	push	{r4, lr}
	__asm__ volatile(
    1e62:	f04f 0320 	mov.w	r3, #32
    1e66:	f3ef 8411 	mrs	r4, BASEPRI
    1e6a:	f383 8812 	msr	BASEPRI_MAX, r3
    1e6e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1e72:	4a13      	ldr	r2, [pc, #76]	; (1ec0 <generic_hfclk_start+0x60>)
    1e74:	6813      	ldr	r3, [r2, #0]
    1e76:	f043 0302 	orr.w	r3, r3, #2
    1e7a:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1e7c:	f013 0f01 	tst.w	r3, #1
    1e80:	d108      	bne.n	1e94 <generic_hfclk_start+0x34>
	bool already_started = false;
    1e82:	2300      	movs	r3, #0
	__asm__ volatile(
    1e84:	f384 8811 	msr	BASEPRI, r4
    1e88:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1e8c:	b99b      	cbnz	r3, 1eb6 <generic_hfclk_start+0x56>
	hfclk_start();
    1e8e:	f003 fb9a 	bl	55c6 <hfclk_start>
}
    1e92:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1e94:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1e98:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1e9c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1ea0:	f012 0f01 	tst.w	r2, #1
    1ea4:	d101      	bne.n	1eaa <generic_hfclk_start+0x4a>
	bool already_started = false;
    1ea6:	2300      	movs	r3, #0
    1ea8:	e7ec      	b.n	1e84 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    1eaa:	f7ff ff79 	bl	1da0 <get_hf_flags>
    1eae:	f003 fb1f 	bl	54f0 <set_on_state>
			already_started = true;
    1eb2:	2301      	movs	r3, #1
    1eb4:	e7e6      	b.n	1e84 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    1eb6:	2100      	movs	r1, #0
    1eb8:	4802      	ldr	r0, [pc, #8]	; (1ec4 <generic_hfclk_start+0x64>)
    1eba:	f003 fb2c 	bl	5516 <clkstarted_handle>
		return;
    1ebe:	e7e8      	b.n	1e92 <generic_hfclk_start+0x32>
    1ec0:	20000924 	.word	0x20000924
    1ec4:	000063fc 	.word	0x000063fc

00001ec8 <generic_hfclk_stop>:
{
    1ec8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1eca:	4b08      	ldr	r3, [pc, #32]	; (1eec <generic_hfclk_stop+0x24>)
    1ecc:	e8d3 2fef 	ldaex	r2, [r3]
    1ed0:	f022 0102 	bic.w	r1, r2, #2
    1ed4:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1ed8:	2800      	cmp	r0, #0
    1eda:	d1f7      	bne.n	1ecc <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1edc:	f012 0f01 	tst.w	r2, #1
    1ee0:	d000      	beq.n	1ee4 <generic_hfclk_stop+0x1c>
}
    1ee2:	bd08      	pop	{r3, pc}
	hfclk_stop();
    1ee4:	f003 fb83 	bl	55ee <hfclk_stop>
    1ee8:	e7fb      	b.n	1ee2 <generic_hfclk_stop+0x1a>
    1eea:	bf00      	nop
    1eec:	20000924 	.word	0x20000924

00001ef0 <api_blocking_start>:
{
    1ef0:	b500      	push	{lr}
    1ef2:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1ef4:	f8cd d000 	str.w	sp, [sp]
    1ef8:	f8cd d004 	str.w	sp, [sp, #4]
    1efc:	2300      	movs	r3, #0
    1efe:	9302      	str	r3, [sp, #8]
    1f00:	2301      	movs	r3, #1
    1f02:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1f04:	466b      	mov	r3, sp
    1f06:	4a07      	ldr	r2, [pc, #28]	; (1f24 <api_blocking_start+0x34>)
    1f08:	f003 fb4d 	bl	55a6 <api_start>
	if (err < 0) {
    1f0c:	2800      	cmp	r0, #0
    1f0e:	db05      	blt.n	1f1c <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1f10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1f14:	2300      	movs	r3, #0
    1f16:	4668      	mov	r0, sp
    1f18:	f002 f80a 	bl	3f30 <z_impl_k_sem_take>
}
    1f1c:	b005      	add	sp, #20
    1f1e:	f85d fb04 	ldr.w	pc, [sp], #4
    1f22:	bf00      	nop
    1f24:	00005617 	.word	0x00005617

00001f28 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1f28:	b570      	push	{r4, r5, r6, lr}
    1f2a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1f2c:	2200      	movs	r2, #0
    1f2e:	2101      	movs	r1, #1
    1f30:	2005      	movs	r0, #5
    1f32:	f7ff fac1 	bl	14b8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1f36:	4811      	ldr	r0, [pc, #68]	; (1f7c <clk_init+0x54>)
    1f38:	f000 ff58 	bl	2dec <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1f3c:	4b10      	ldr	r3, [pc, #64]	; (1f80 <clk_init+0x58>)
    1f3e:	4298      	cmp	r0, r3
    1f40:	d119      	bne.n	1f76 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1f42:	f003 ff3d 	bl	5dc0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    1f46:	2400      	movs	r4, #0
    1f48:	2c03      	cmp	r4, #3
    1f4a:	d812      	bhi.n	1f72 <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1f4c:	4621      	mov	r1, r4
    1f4e:	4630      	mov	r0, r6
    1f50:	f003 fa7e 	bl	5450 <get_sub_data>
    1f54:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1f56:	4621      	mov	r1, r4
    1f58:	4630      	mov	r0, r6
    1f5a:	f003 fa84 	bl	5466 <get_onoff_manager>
    1f5e:	4909      	ldr	r1, [pc, #36]	; (1f84 <clk_init+0x5c>)
    1f60:	f003 f82e 	bl	4fc0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1f64:	2800      	cmp	r0, #0
    1f66:	db05      	blt.n	1f74 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1f68:	2301      	movs	r3, #1
    1f6a:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1f6c:	441c      	add	r4, r3
    1f6e:	b2e4      	uxtb	r4, r4
    1f70:	e7ea      	b.n	1f48 <clk_init+0x20>
	}

	return 0;
    1f72:	2000      	movs	r0, #0
}
    1f74:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1f76:	f06f 0004 	mvn.w	r0, #4
    1f7a:	e7fb      	b.n	1f74 <clk_init+0x4c>
    1f7c:	00001e15 	.word	0x00001e15
    1f80:	0bad0000 	.word	0x0bad0000
    1f84:	0000685c 	.word	0x0000685c

00001f88 <lfclk_spinwait>:
{
    1f88:	b570      	push	{r4, r5, r6, lr}
    1f8a:	4605      	mov	r5, r0
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1f8c:	f004 f84f 	bl	602e <k_is_in_isr>
    1f90:	b920      	cbnz	r0, 1f9c <lfclk_spinwait+0x14>
	return !z_sys_post_kernel;
    1f92:	4b22      	ldr	r3, [pc, #136]	; (201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>)
    1f94:	781b      	ldrb	r3, [r3, #0]
    1f96:	b19b      	cbz	r3, 1fc0 <lfclk_spinwait+0x38>
    1f98:	2300      	movs	r3, #0
    1f9a:	e000      	b.n	1f9e <lfclk_spinwait+0x16>
    1f9c:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    1f9e:	461c      	mov	r4, r3
    1fa0:	b183      	cbz	r3, 1fc4 <lfclk_spinwait+0x3c>
	__asm__ volatile(
    1fa2:	f04f 0320 	mov.w	r3, #32
    1fa6:	f3ef 8611 	mrs	r6, BASEPRI
    1faa:	f383 8812 	msr	BASEPRI_MAX, r3
    1fae:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    1fb2:	b96c      	cbnz	r4, 1fd0 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
    1fb4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1fb8:	2202      	movs	r2, #2
    1fba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    1fbe:	e007      	b.n	1fd0 <lfclk_spinwait+0x48>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1fc0:	2301      	movs	r3, #1
    1fc2:	e7ec      	b.n	1f9e <lfclk_spinwait+0x16>
	int key = isr_mode ? irq_lock() : 0;
    1fc4:	2600      	movs	r6, #0
    1fc6:	e7f4      	b.n	1fb2 <lfclk_spinwait+0x2a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1fc8:	b1d4      	cbz	r4, 2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1fca:	4630      	mov	r0, r6
    1fcc:	f7ff fa4e 	bl	146c <arch_cpu_atomic_idle>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1fd0:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1fd4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    1fd8:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1fdc:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1fe0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    1fe4:	d111      	bne.n	200a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
    1fe6:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1fe8:	2a00      	cmp	r2, #0
    1fea:	d0ed      	beq.n	1fc8 <lfclk_spinwait+0x40>
    1fec:	2b01      	cmp	r3, #1
    1fee:	d001      	beq.n	1ff4 <lfclk_spinwait+0x6c>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1ff0:	2d01      	cmp	r5, #1
    1ff2:	d1e9      	bne.n	1fc8 <lfclk_spinwait+0x40>
	if (isr_mode) {
    1ff4:	b15c      	cbz	r4, 200e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe>
	__asm__ volatile(
    1ff6:	f386 8811 	msr	BASEPRI, r6
    1ffa:	f3bf 8f6f 	isb	sy
}
    1ffe:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    2000:	2021      	movs	r0, #33	; 0x21
    2002:	2100      	movs	r1, #0
    2004:	f002 fb6a 	bl	46dc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2008:	e7e2      	b.n	1fd0 <lfclk_spinwait+0x48>
                return true;
    200a:	2201      	movs	r2, #1
    200c:	e7ec      	b.n	1fe8 <lfclk_spinwait+0x60>
    p_reg->INTENSET = mask;
    200e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2012:	2202      	movs	r2, #2
    2014:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2018:	e7f1      	b.n	1ffe <lfclk_spinwait+0x76>
    201a:	bf00      	nop
    201c:	20000b73 	.word	0x20000b73

00002020 <z_nrf_clock_control_lf_on>:
{
    2020:	b510      	push	{r4, lr}
    2022:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2024:	4b0e      	ldr	r3, [pc, #56]	; (2060 <z_nrf_clock_control_lf_on+0x40>)
    2026:	2101      	movs	r1, #1
    2028:	e8d3 2fef 	ldaex	r2, [r3]
    202c:	e8c3 1fe0 	stlex	r0, r1, [r3]
    2030:	2800      	cmp	r0, #0
    2032:	d1f9      	bne.n	2028 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    2034:	b11a      	cbz	r2, 203e <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    2036:	1e63      	subs	r3, r4, #1
    2038:	2b01      	cmp	r3, #1
    203a:	d90d      	bls.n	2058 <z_nrf_clock_control_lf_on+0x38>
}
    203c:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    203e:	4809      	ldr	r0, [pc, #36]	; (2064 <z_nrf_clock_control_lf_on+0x44>)
    2040:	f003 fa11 	bl	5466 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2044:	4908      	ldr	r1, [pc, #32]	; (2068 <z_nrf_clock_control_lf_on+0x48>)
    2046:	2300      	movs	r3, #0
    2048:	604b      	str	r3, [r1, #4]
    204a:	608b      	str	r3, [r1, #8]
    204c:	60cb      	str	r3, [r1, #12]
    204e:	2301      	movs	r3, #1
    2050:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    2052:	f002 ffd2 	bl	4ffa <onoff_request>
    2056:	e7ee      	b.n	2036 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    2058:	4620      	mov	r0, r4
    205a:	f7ff ff95 	bl	1f88 <lfclk_spinwait>
		break;
    205e:	e7ed      	b.n	203c <z_nrf_clock_control_lf_on+0x1c>
    2060:	20000928 	.word	0x20000928
    2064:	000063fc 	.word	0x000063fc
    2068:	20000874 	.word	0x20000874

0000206c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    206c:	b510      	push	{r4, lr}
    206e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    2070:	280a      	cmp	r0, #10
    2072:	d007      	beq.n	2084 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    2074:	4b07      	ldr	r3, [pc, #28]	; (2094 <console_out+0x28>)
    2076:	6818      	ldr	r0, [r3, #0]
    2078:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    207a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    207c:	685b      	ldr	r3, [r3, #4]
    207e:	4798      	blx	r3

	return c;
}
    2080:	4620      	mov	r0, r4
    2082:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    2084:	4b03      	ldr	r3, [pc, #12]	; (2094 <console_out+0x28>)
    2086:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    2088:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    208a:	685b      	ldr	r3, [r3, #4]
    208c:	210d      	movs	r1, #13
    208e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    2090:	e7f0      	b.n	2074 <console_out+0x8>
    2092:	bf00      	nop
    2094:	2000092c 	.word	0x2000092c

00002098 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    2098:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    209a:	4c04      	ldr	r4, [pc, #16]	; (20ac <uart_console_hook_install+0x14>)
    209c:	4620      	mov	r0, r4
    209e:	f7ff fe79 	bl	1d94 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    20a2:	4620      	mov	r0, r4
    20a4:	f7fe f9f0 	bl	488 <__printk_hook_install>
#endif
}
    20a8:	bd10      	pop	{r4, pc}
    20aa:	bf00      	nop
    20ac:	0000206d 	.word	0x0000206d

000020b0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    20b0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    20b2:	4806      	ldr	r0, [pc, #24]	; (20cc <uart_console_init+0x1c>)
    20b4:	4b06      	ldr	r3, [pc, #24]	; (20d0 <uart_console_init+0x20>)
    20b6:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    20b8:	f003 ff2d 	bl	5f16 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    20bc:	b118      	cbz	r0, 20c6 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    20be:	f7ff ffeb 	bl	2098 <uart_console_hook_install>

	return 0;
    20c2:	2000      	movs	r0, #0
}
    20c4:	bd08      	pop	{r3, pc}
		return -ENODEV;
    20c6:	f06f 0012 	mvn.w	r0, #18
    20ca:	e7fb      	b.n	20c4 <uart_console_init+0x14>
    20cc:	00006444 	.word	0x00006444
    20d0:	2000092c 	.word	0x2000092c

000020d4 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    20d4:	b128      	cbz	r0, 20e2 <get_dev+0xe>
    20d6:	2801      	cmp	r0, #1
    20d8:	d101      	bne.n	20de <get_dev+0xa>
    20da:	4803      	ldr	r0, [pc, #12]	; (20e8 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    20dc:	4770      	bx	lr
	const struct device *dev = NULL;
    20de:	2000      	movs	r0, #0
    20e0:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    20e2:	4802      	ldr	r0, [pc, #8]	; (20ec <get_dev+0x18>)
    20e4:	4770      	bx	lr
    20e6:	bf00      	nop
    20e8:	00006414 	.word	0x00006414
    20ec:	0000642c 	.word	0x0000642c

000020f0 <gpio_nrfx_pin_interrupt_configure>:
{
    20f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20f2:	b085      	sub	sp, #20
    20f4:	460e      	mov	r6, r1
    20f6:	4619      	mov	r1, r3
	return port->config;
    20f8:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    20fa:	7b1b      	ldrb	r3, [r3, #12]
    20fc:	f006 051f 	and.w	r5, r6, #31
    2100:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2104:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    2108:	d022      	beq.n	2150 <gpio_nrfx_pin_interrupt_configure+0x60>
    210a:	4607      	mov	r7, r0
    210c:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    210e:	2300      	movs	r3, #0
    2110:	9301      	str	r3, [sp, #4]
    2112:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    2114:	4610      	mov	r0, r2
    2116:	f003 faf6 	bl	5706 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    211a:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    211e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2120:	6899      	ldr	r1, [r3, #8]
    2122:	40f1      	lsrs	r1, r6
    2124:	f011 0f01 	tst.w	r1, #1
    2128:	d102      	bne.n	2130 <gpio_nrfx_pin_interrupt_configure+0x40>
    212a:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    212e:	d014      	beq.n	215a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2130:	2300      	movs	r3, #0
    2132:	aa01      	add	r2, sp, #4
    2134:	4619      	mov	r1, r3
    2136:	4628      	mov	r0, r5
    2138:	f001 f8da 	bl	32f0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    213c:	4b1a      	ldr	r3, [pc, #104]	; (21a8 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    213e:	4298      	cmp	r0, r3
    2140:	d12f      	bne.n	21a2 <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2142:	2101      	movs	r1, #1
    2144:	4628      	mov	r0, r5
    2146:	f001 fab5 	bl	36b4 <nrfx_gpiote_trigger_enable>
	return 0;
    214a:	2000      	movs	r0, #0
}
    214c:	b005      	add	sp, #20
    214e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    2150:	4628      	mov	r0, r5
    2152:	f001 fb11 	bl	3778 <nrfx_gpiote_trigger_disable>
		return 0;
    2156:	2000      	movs	r0, #0
    2158:	e7f8      	b.n	214c <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    215a:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    215e:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2160:	2a01      	cmp	r2, #1
    2162:	d012      	beq.n	218a <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
    2164:	4a11      	ldr	r2, [pc, #68]	; (21ac <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2166:	3380      	adds	r3, #128	; 0x80
    2168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    216c:	f013 0f01 	tst.w	r3, #1
    2170:	d1de      	bne.n	2130 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2172:	f10d 010f 	add.w	r1, sp, #15
    2176:	4628      	mov	r0, r5
    2178:	f001 fa40 	bl	35fc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    217c:	4b0c      	ldr	r3, [pc, #48]	; (21b0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    217e:	4298      	cmp	r0, r3
    2180:	d005      	beq.n	218e <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    2182:	f10d 030f 	add.w	r3, sp, #15
    2186:	9302      	str	r3, [sp, #8]
    2188:	e7d2      	b.n	2130 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    218a:	4a0a      	ldr	r2, [pc, #40]	; (21b4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    218c:	e7eb      	b.n	2166 <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
    218e:	f10d 000f 	add.w	r0, sp, #15
    2192:	f001 fa87 	bl	36a4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2196:	4b04      	ldr	r3, [pc, #16]	; (21a8 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    2198:	4298      	cmp	r0, r3
    219a:	d0f2      	beq.n	2182 <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
    219c:	f06f 000b 	mvn.w	r0, #11
    21a0:	e7d4      	b.n	214c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    21a2:	f06f 0015 	mvn.w	r0, #21
    21a6:	e7d1      	b.n	214c <gpio_nrfx_pin_interrupt_configure+0x5c>
    21a8:	0bad0000 	.word	0x0bad0000
    21ac:	50842500 	.word	0x50842500
    21b0:	0bad0004 	.word	0x0bad0004
    21b4:	50842800 	.word	0x50842800

000021b8 <gpio_nrfx_pin_configure>:
{
    21b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21bc:	b086      	sub	sp, #24
    21be:	460e      	mov	r6, r1
    21c0:	4614      	mov	r4, r2
	return port->config;
    21c2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    21c6:	f898 300c 	ldrb.w	r3, [r8, #12]
    21ca:	f001 051f 	and.w	r5, r1, #31
    21ce:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    21d2:	f10d 0117 	add.w	r1, sp, #23
    21d6:	4628      	mov	r0, r5
    21d8:	f001 fa10 	bl	35fc <nrfx_gpiote_channel_get>
    21dc:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    21de:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    21e2:	d03a      	beq.n	225a <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    21e4:	2100      	movs	r1, #0
    21e6:	9103      	str	r1, [sp, #12]
    21e8:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    21ea:	460b      	mov	r3, r1
    21ec:	aa03      	add	r2, sp, #12
    21ee:	4628      	mov	r0, r5
    21f0:	f001 f87e 	bl	32f0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    21f4:	4b33      	ldr	r3, [pc, #204]	; (22c4 <gpio_nrfx_pin_configure+0x10c>)
    21f6:	4298      	cmp	r0, r3
    21f8:	d161      	bne.n	22be <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
    21fa:	429f      	cmp	r7, r3
    21fc:	d03d      	beq.n	227a <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
    21fe:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    2202:	d049      	beq.n	2298 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
    2204:	f10d 0103 	add.w	r1, sp, #3
    2208:	4620      	mov	r0, r4
    220a:	f003 fa09 	bl	5620 <get_drive>
		if (rv != 0) {
    220e:	4607      	mov	r7, r0
    2210:	bb50      	cbnz	r0, 2268 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
    2212:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2216:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    221a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    221e:	bf0c      	ite	eq
    2220:	2301      	moveq	r3, #1
    2222:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2224:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    2228:	4620      	mov	r0, r4
    222a:	f003 fa3c 	bl	56a6 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    222e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2232:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    2236:	d025      	beq.n	2284 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2238:	f8d8 3004 	ldr.w	r3, [r8, #4]
    223c:	2101      	movs	r1, #1
    223e:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2242:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2244:	2200      	movs	r2, #0
    2246:	a901      	add	r1, sp, #4
    2248:	4628      	mov	r0, r5
    224a:	f001 f90b 	bl	3464 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    224e:	4b1d      	ldr	r3, [pc, #116]	; (22c4 <gpio_nrfx_pin_configure+0x10c>)
    2250:	4298      	cmp	r0, r3
    2252:	d009      	beq.n	2268 <gpio_nrfx_pin_configure+0xb0>
    2254:	f06f 0715 	mvn.w	r7, #21
    2258:	e006      	b.n	2268 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    225a:	4628      	mov	r0, r5
    225c:	f001 fabc 	bl	37d8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    2260:	4b18      	ldr	r3, [pc, #96]	; (22c4 <gpio_nrfx_pin_configure+0x10c>)
    2262:	429f      	cmp	r7, r3
    2264:	d004      	beq.n	2270 <gpio_nrfx_pin_configure+0xb8>
		return 0;
    2266:	2700      	movs	r7, #0
}
    2268:	4638      	mov	r0, r7
    226a:	b006      	add	sp, #24
    226c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    2270:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2274:	f001 fa0e 	bl	3694 <nrfx_gpiote_channel_free>
    2278:	e7f5      	b.n	2266 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
    227a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    227e:	f001 fa09 	bl	3694 <nrfx_gpiote_channel_free>
    2282:	e7bc      	b.n	21fe <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2284:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    2288:	d0dc      	beq.n	2244 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    228a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    228e:	2301      	movs	r3, #1
    2290:	fa03 f606 	lsl.w	r6, r3, r6
    p_reg->OUTCLR = clr_mask;
    2294:	60d6      	str	r6, [r2, #12]
}
    2296:	e7d5      	b.n	2244 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    2298:	4620      	mov	r0, r4
    229a:	f003 fa04 	bl	56a6 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    229e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    22a2:	2300      	movs	r3, #0
    22a4:	461a      	mov	r2, r3
    22a6:	a902      	add	r1, sp, #8
    22a8:	4628      	mov	r0, r5
    22aa:	f001 f821 	bl	32f0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    22ae:	4b05      	ldr	r3, [pc, #20]	; (22c4 <gpio_nrfx_pin_configure+0x10c>)
    22b0:	4298      	cmp	r0, r3
    22b2:	d101      	bne.n	22b8 <gpio_nrfx_pin_configure+0x100>
    22b4:	2700      	movs	r7, #0
    22b6:	e7d7      	b.n	2268 <gpio_nrfx_pin_configure+0xb0>
    22b8:	f06f 0715 	mvn.w	r7, #21
    22bc:	e7d4      	b.n	2268 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
    22be:	f06f 0715 	mvn.w	r7, #21
    22c2:	e7d1      	b.n	2268 <gpio_nrfx_pin_configure+0xb0>
    22c4:	0bad0000 	.word	0x0bad0000

000022c8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    22c8:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    22ca:	f001 f9d9 	bl	3680 <nrfx_gpiote_is_init>
    22ce:	b108      	cbz	r0, 22d4 <gpio_nrfx_init+0xc>
		return 0;
    22d0:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    22d2:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    22d4:	f001 f9aa 	bl	362c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    22d8:	4b08      	ldr	r3, [pc, #32]	; (22fc <gpio_nrfx_init+0x34>)
    22da:	4298      	cmp	r0, r3
    22dc:	d10a      	bne.n	22f4 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    22de:	2100      	movs	r1, #0
    22e0:	4807      	ldr	r0, [pc, #28]	; (2300 <gpio_nrfx_init+0x38>)
    22e2:	f001 f985 	bl	35f0 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    22e6:	2200      	movs	r2, #0
    22e8:	2105      	movs	r1, #5
    22ea:	200d      	movs	r0, #13
    22ec:	f7ff f8e4 	bl	14b8 <z_arm_irq_priority_set>
	return 0;
    22f0:	2000      	movs	r0, #0
    22f2:	e7ee      	b.n	22d2 <gpio_nrfx_init+0xa>
		return -EIO;
    22f4:	f06f 0004 	mvn.w	r0, #4
    22f8:	e7eb      	b.n	22d2 <gpio_nrfx_init+0xa>
    22fa:	bf00      	nop
    22fc:	0bad0000 	.word	0x0bad0000
    2300:	000057a5 	.word	0x000057a5

00002304 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    2304:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    2306:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    2308:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    230c:	d06f      	beq.n	23ee <baudrate_set+0xea>
    230e:	d83a      	bhi.n	2386 <baudrate_set+0x82>
    2310:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    2314:	d06e      	beq.n	23f4 <baudrate_set+0xf0>
    2316:	d90a      	bls.n	232e <baudrate_set+0x2a>
    2318:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    231c:	d075      	beq.n	240a <baudrate_set+0x106>
    231e:	d924      	bls.n	236a <baudrate_set+0x66>
    2320:	f647 2312 	movw	r3, #31250	; 0x7a12
    2324:	4299      	cmp	r1, r3
    2326:	d12b      	bne.n	2380 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2328:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    232c:	e013      	b.n	2356 <baudrate_set+0x52>
	switch (baudrate) {
    232e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    2332:	d061      	beq.n	23f8 <baudrate_set+0xf4>
    2334:	d907      	bls.n	2346 <baudrate_set+0x42>
    2336:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    233a:	d063      	beq.n	2404 <baudrate_set+0x100>
    233c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2340:	d110      	bne.n	2364 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2342:	4b3c      	ldr	r3, [pc, #240]	; (2434 <baudrate_set+0x130>)
    2344:	e007      	b.n	2356 <baudrate_set+0x52>
	switch (baudrate) {
    2346:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    234a:	d058      	beq.n	23fe <baudrate_set+0xfa>
    234c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2350:	d105      	bne.n	235e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    2352:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2356:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    235a:	2000      	movs	r0, #0
    235c:	4770      	bx	lr
	switch (baudrate) {
    235e:	f06f 0015 	mvn.w	r0, #21
    2362:	4770      	bx	lr
    2364:	f06f 0015 	mvn.w	r0, #21
    2368:	4770      	bx	lr
    236a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    236e:	d04e      	beq.n	240e <baudrate_set+0x10a>
    2370:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2374:	d101      	bne.n	237a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2376:	4b30      	ldr	r3, [pc, #192]	; (2438 <baudrate_set+0x134>)
    2378:	e7ed      	b.n	2356 <baudrate_set+0x52>
	switch (baudrate) {
    237a:	f06f 0015 	mvn.w	r0, #21
    237e:	4770      	bx	lr
    2380:	f06f 0015 	mvn.w	r0, #21
    2384:	4770      	bx	lr
    2386:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    238a:	d042      	beq.n	2412 <baudrate_set+0x10e>
    238c:	d909      	bls.n	23a2 <baudrate_set+0x9e>
    238e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    2392:	d046      	beq.n	2422 <baudrate_set+0x11e>
    2394:	d91f      	bls.n	23d6 <baudrate_set+0xd2>
    2396:	4b29      	ldr	r3, [pc, #164]	; (243c <baudrate_set+0x138>)
    2398:	4299      	cmp	r1, r3
    239a:	d148      	bne.n	242e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    239c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    23a0:	e7d9      	b.n	2356 <baudrate_set+0x52>
	switch (baudrate) {
    23a2:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    23a6:	d037      	beq.n	2418 <baudrate_set+0x114>
    23a8:	d905      	bls.n	23b6 <baudrate_set+0xb2>
    23aa:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    23ae:	d10f      	bne.n	23d0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    23b0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    23b4:	e7cf      	b.n	2356 <baudrate_set+0x52>
	switch (baudrate) {
    23b6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    23ba:	4299      	cmp	r1, r3
    23bc:	d02e      	beq.n	241c <baudrate_set+0x118>
    23be:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    23c2:	d102      	bne.n	23ca <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    23c4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    23c8:	e7c5      	b.n	2356 <baudrate_set+0x52>
	switch (baudrate) {
    23ca:	f06f 0015 	mvn.w	r0, #21
    23ce:	4770      	bx	lr
    23d0:	f06f 0015 	mvn.w	r0, #21
    23d4:	4770      	bx	lr
    23d6:	4b1a      	ldr	r3, [pc, #104]	; (2440 <baudrate_set+0x13c>)
    23d8:	4299      	cmp	r1, r3
    23da:	d025      	beq.n	2428 <baudrate_set+0x124>
    23dc:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    23e0:	d102      	bne.n	23e8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    23e2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    23e6:	e7b6      	b.n	2356 <baudrate_set+0x52>
	switch (baudrate) {
    23e8:	f06f 0015 	mvn.w	r0, #21
    23ec:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    23ee:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    23f2:	e7b0      	b.n	2356 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    23f4:	4b13      	ldr	r3, [pc, #76]	; (2444 <baudrate_set+0x140>)
    23f6:	e7ae      	b.n	2356 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    23f8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    23fc:	e7ab      	b.n	2356 <baudrate_set+0x52>
	switch (baudrate) {
    23fe:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2402:	e7a8      	b.n	2356 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2404:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2408:	e7a5      	b.n	2356 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    240a:	4b0f      	ldr	r3, [pc, #60]	; (2448 <baudrate_set+0x144>)
    240c:	e7a3      	b.n	2356 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    240e:	4b0f      	ldr	r3, [pc, #60]	; (244c <baudrate_set+0x148>)
    2410:	e7a1      	b.n	2356 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2412:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2416:	e79e      	b.n	2356 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2418:	4b0d      	ldr	r3, [pc, #52]	; (2450 <baudrate_set+0x14c>)
    241a:	e79c      	b.n	2356 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    241c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2420:	e799      	b.n	2356 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2422:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2426:	e796      	b.n	2356 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2428:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    242c:	e793      	b.n	2356 <baudrate_set+0x52>
	switch (baudrate) {
    242e:	f06f 0015 	mvn.w	r0, #21
}
    2432:	4770      	bx	lr
    2434:	0013b000 	.word	0x0013b000
    2438:	004ea000 	.word	0x004ea000
    243c:	000f4240 	.word	0x000f4240
    2440:	0003d090 	.word	0x0003d090
    2444:	00275000 	.word	0x00275000
    2448:	0075c000 	.word	0x0075c000
    244c:	003af000 	.word	0x003af000
    2450:	013a9000 	.word	0x013a9000

00002454 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2458:	4605      	mov	r5, r0
    245a:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    245c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2460:	f003 fde5 	bl	602e <k_is_in_isr>
    2464:	b920      	cbnz	r0, 2470 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    2466:	4b17      	ldr	r3, [pc, #92]	; (24c4 <uarte_nrfx_poll_out+0x70>)
    2468:	781b      	ldrb	r3, [r3, #0]
    246a:	b143      	cbz	r3, 247e <uarte_nrfx_poll_out+0x2a>
    246c:	2300      	movs	r3, #0
    246e:	e000      	b.n	2472 <uarte_nrfx_poll_out+0x1e>
    2470:	2301      	movs	r3, #1

		t = now;
	}
#endif

	if (isr_mode) {
    2472:	b953      	cbnz	r3, 248a <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    2474:	4628      	mov	r0, r5
    2476:	f003 fabc 	bl	59f2 <wait_tx_ready>
    247a:	4606      	mov	r6, r0
    247c:	e013      	b.n	24a6 <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    247e:	2301      	movs	r3, #1
    2480:	e7f7      	b.n	2472 <uarte_nrfx_poll_out+0x1e>
    2482:	f384 8811 	msr	BASEPRI, r4
    2486:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    248a:	f04f 0320 	mov.w	r3, #32
    248e:	f3ef 8411 	mrs	r4, BASEPRI
    2492:	f383 8812 	msr	BASEPRI_MAX, r3
    2496:	f3bf 8f6f 	isb	sy
    249a:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    249c:	4628      	mov	r0, r5
    249e:	f003 fa59 	bl	5954 <is_tx_ready>
    24a2:	2800      	cmp	r0, #0
    24a4:	d0ed      	beq.n	2482 <uarte_nrfx_poll_out+0x2e>
	}

	*data->char_out = c;
    24a6:	f8d8 3010 	ldr.w	r3, [r8, #16]
    24aa:	701f      	strb	r7, [r3, #0]
	tx_start(dev, data->char_out, 1);
    24ac:	2201      	movs	r2, #1
    24ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
    24b2:	4628      	mov	r0, r5
    24b4:	f003 fa68 	bl	5988 <tx_start>
	__asm__ volatile(
    24b8:	f386 8811 	msr	BASEPRI, r6
    24bc:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    24c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24c4:	20000b73 	.word	0x20000b73

000024c8 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    24c8:	b538      	push	{r3, r4, r5, lr}
    24ca:	4605      	mov	r5, r0
    24cc:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    24ce:	f101 0018 	add.w	r0, r1, #24
    24d2:	f000 fcef 	bl	2eb4 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    24d6:	4b0a      	ldr	r3, [pc, #40]	; (2500 <endtx_stoptx_ppi_init+0x38>)
    24d8:	4298      	cmp	r0, r3
    24da:	d10e      	bne.n	24fa <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    24dc:	7e23      	ldrb	r3, [r4, #24]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    24de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    24e2:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    24e6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    24ea:	7e22      	ldrb	r2, [r4, #24]
    24ec:	2301      	movs	r3, #1
    24ee:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    24f0:	4a04      	ldr	r2, [pc, #16]	; (2504 <endtx_stoptx_ppi_init+0x3c>)
    24f2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    24f6:	2000      	movs	r0, #0
}
    24f8:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    24fa:	f06f 0004 	mvn.w	r0, #4
    24fe:	e7fb      	b.n	24f8 <endtx_stoptx_ppi_init+0x30>
    2500:	0bad0000 	.word	0x0bad0000
    2504:	50017000 	.word	0x50017000

00002508 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2508:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    250c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2510:	4b01      	ldr	r3, [pc, #4]	; (2518 <set_comparator+0x10>)
    2512:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    2516:	4770      	bx	lr
    2518:	50015000 	.word	0x50015000

0000251c <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    251c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2520:	4b01      	ldr	r3, [pc, #4]	; (2528 <get_comparator+0xc>)
    2522:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    2526:	4770      	bx	lr
    2528:	50015000 	.word	0x50015000

0000252c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    252c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2530:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2532:	4a02      	ldr	r2, [pc, #8]	; (253c <event_enable+0x10>)
    2534:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    2538:	4770      	bx	lr
    253a:	bf00      	nop
    253c:	50015000 	.word	0x50015000

00002540 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2544:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2546:	4a02      	ldr	r2, [pc, #8]	; (2550 <event_disable+0x10>)
    2548:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    254c:	4770      	bx	lr
    254e:	bf00      	nop
    2550:	50015000 	.word	0x50015000

00002554 <counter>:
     return p_reg->COUNTER;
    2554:	4b01      	ldr	r3, [pc, #4]	; (255c <counter+0x8>)
    2556:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    255a:	4770      	bx	lr
    255c:	50015000 	.word	0x50015000

00002560 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2560:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2562:	2301      	movs	r3, #1
    2564:	4083      	lsls	r3, r0
    2566:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    256a:	4a0d      	ldr	r2, [pc, #52]	; (25a0 <compare_int_lock+0x40>)
    256c:	e8d2 1fef 	ldaex	r1, [r2]
    2570:	ea01 0e0c 	and.w	lr, r1, ip
    2574:	e8c2 efe4 	stlex	r4, lr, [r2]
    2578:	2c00      	cmp	r4, #0
    257a:	d1f7      	bne.n	256c <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    257c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2580:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    2584:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    2588:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    258c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2590:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2594:	420b      	tst	r3, r1
}
    2596:	bf14      	ite	ne
    2598:	2001      	movne	r0, #1
    259a:	2000      	moveq	r0, #0
    259c:	bd10      	pop	{r4, pc}
    259e:	bf00      	nop
    25a0:	2000094c 	.word	0x2000094c

000025a4 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    25a4:	b570      	push	{r4, r5, r6, lr}
    25a6:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    25a8:	f003 face 	bl	5b48 <full_int_lock>
    25ac:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    25ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    25b2:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    25b4:	4a15      	ldr	r2, [pc, #84]	; (260c <channel_processing_check_and_clear+0x68>)
    25b6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    25ba:	4213      	tst	r3, r2
    25bc:	d105      	bne.n	25ca <channel_processing_check_and_clear+0x26>
	bool result = false;
    25be:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    25c0:	4628      	mov	r0, r5
    25c2:	f003 faca 	bl	5b5a <full_int_unlock>

	return result;
}
    25c6:	4630      	mov	r0, r6
    25c8:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    25ca:	2301      	movs	r3, #1
    25cc:	40a3      	lsls	r3, r4
    25ce:	43db      	mvns	r3, r3
    25d0:	4a0f      	ldr	r2, [pc, #60]	; (2610 <channel_processing_check_and_clear+0x6c>)
    25d2:	e8d2 1fef 	ldaex	r1, [r2]
    25d6:	ea01 0003 	and.w	r0, r1, r3
    25da:	e8c2 0fe6 	stlex	r6, r0, [r2]
    25de:	2e00      	cmp	r6, #0
    25e0:	d1f7      	bne.n	25d2 <channel_processing_check_and_clear+0x2e>
    25e2:	b959      	cbnz	r1, 25fc <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    25e4:	f104 0350 	add.w	r3, r4, #80	; 0x50
    25e8:	009b      	lsls	r3, r3, #2
    25ea:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    25ec:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    25f0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    25f4:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    25f6:	b113      	cbz	r3, 25fe <channel_processing_check_and_clear+0x5a>
    25f8:	2301      	movs	r3, #1
    25fa:	e000      	b.n	25fe <channel_processing_check_and_clear+0x5a>
    25fc:	2301      	movs	r3, #1
		if (result) {
    25fe:	461e      	mov	r6, r3
    2600:	2b00      	cmp	r3, #0
    2602:	d0dd      	beq.n	25c0 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    2604:	4620      	mov	r0, r4
    2606:	f003 fa90 	bl	5b2a <event_clear>
    260a:	e7d9      	b.n	25c0 <channel_processing_check_and_clear+0x1c>
    260c:	50015000 	.word	0x50015000
    2610:	20000948 	.word	0x20000948

00002614 <compare_int_unlock>:
	if (key) {
    2614:	b901      	cbnz	r1, 2618 <compare_int_unlock+0x4>
}
    2616:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    2618:	2301      	movs	r3, #1
    261a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    261c:	4a0e      	ldr	r2, [pc, #56]	; (2658 <compare_int_unlock+0x44>)
    261e:	e8d2 1fef 	ldaex	r1, [r2]
    2622:	4319      	orrs	r1, r3
    2624:	e8c2 1fec 	stlex	ip, r1, [r2]
    2628:	f1bc 0f00 	cmp.w	ip, #0
    262c:	d1f7      	bne.n	261e <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    262e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2632:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    2634:	4a09      	ldr	r2, [pc, #36]	; (265c <compare_int_unlock+0x48>)
    2636:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    263a:	4b09      	ldr	r3, [pc, #36]	; (2660 <compare_int_unlock+0x4c>)
    263c:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2640:	fa23 f000 	lsr.w	r0, r3, r0
    2644:	f010 0f01 	tst.w	r0, #1
    2648:	d0e5      	beq.n	2616 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    264a:	4b06      	ldr	r3, [pc, #24]	; (2664 <compare_int_unlock+0x50>)
    264c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2650:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2654:	e7df      	b.n	2616 <compare_int_unlock+0x2>
    2656:	bf00      	nop
    2658:	2000094c 	.word	0x2000094c
    265c:	50015000 	.word	0x50015000
    2660:	20000948 	.word	0x20000948
    2664:	e000e100 	.word	0xe000e100

00002668 <sys_clock_timeout_handler>:
{
    2668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    266c:	4607      	mov	r7, r0
    266e:	4614      	mov	r4, r2
    2670:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    2672:	4610      	mov	r0, r2
    2674:	4619      	mov	r1, r3
    2676:	f003 fa64 	bl	5b42 <absolute_time_to_cc>
    267a:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    267c:	4b15      	ldr	r3, [pc, #84]	; (26d4 <sys_clock_timeout_handler+0x6c>)
    267e:	681a      	ldr	r2, [r3, #0]
    2680:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    2682:	601c      	str	r4, [r3, #0]
    2684:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2686:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    268a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    268e:	d309      	bcc.n	26a4 <sys_clock_timeout_handler+0x3c>
	return false;
    2690:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2692:	f002 f97b 	bl	498c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    2696:	4638      	mov	r0, r7
    2698:	f7ff ff40 	bl	251c <get_comparator>
    269c:	42a8      	cmp	r0, r5
    269e:	d00e      	beq.n	26be <sys_clock_timeout_handler+0x56>
}
    26a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    26a4:	4b0c      	ldr	r3, [pc, #48]	; (26d8 <sys_clock_timeout_handler+0x70>)
    26a6:	681b      	ldr	r3, [r3, #0]
    26a8:	0a1a      	lsrs	r2, r3, #8
    26aa:	061b      	lsls	r3, r3, #24
    26ac:	eb15 0803 	adds.w	r8, r5, r3
    26b0:	f142 0900 	adc.w	r9, r2, #0
    26b4:	4b09      	ldr	r3, [pc, #36]	; (26dc <sys_clock_timeout_handler+0x74>)
    26b6:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    26ba:	2401      	movs	r4, #1
    26bc:	e7e9      	b.n	2692 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    26be:	b11c      	cbz	r4, 26c8 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    26c0:	4638      	mov	r0, r7
    26c2:	f7ff ff33 	bl	252c <event_enable>
}
    26c6:	e7eb      	b.n	26a0 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    26c8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    26cc:	4638      	mov	r0, r7
    26ce:	f7ff ff1b 	bl	2508 <set_comparator>
    26d2:	e7f5      	b.n	26c0 <sys_clock_timeout_handler+0x58>
    26d4:	200001b0 	.word	0x200001b0
    26d8:	20000950 	.word	0x20000950
    26dc:	20000198 	.word	0x20000198

000026e0 <z_nrf_rtc_timer_read>:
{
    26e0:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    26e2:	4b0d      	ldr	r3, [pc, #52]	; (2718 <z_nrf_rtc_timer_read+0x38>)
    26e4:	681c      	ldr	r4, [r3, #0]
    26e6:	0a25      	lsrs	r5, r4, #8
    26e8:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    26ea:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    26ee:	f7ff ff31 	bl	2554 <counter>
    26f2:	4603      	mov	r3, r0
	val += cntr;
    26f4:	1900      	adds	r0, r0, r4
    26f6:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    26fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    26fe:	d20a      	bcs.n	2716 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    2700:	4b06      	ldr	r3, [pc, #24]	; (271c <z_nrf_rtc_timer_read+0x3c>)
    2702:	e9d3 2300 	ldrd	r2, r3, [r3]
    2706:	4290      	cmp	r0, r2
    2708:	eb71 0303 	sbcs.w	r3, r1, r3
    270c:	d203      	bcs.n	2716 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    270e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2712:	f141 0100 	adc.w	r1, r1, #0
}
    2716:	bd38      	pop	{r3, r4, r5, pc}
    2718:	20000950 	.word	0x20000950
    271c:	20000198 	.word	0x20000198

00002720 <compare_set_nolocks>:
{
    2720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2722:	4606      	mov	r6, r0
    2724:	4614      	mov	r4, r2
    2726:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    2728:	4610      	mov	r0, r2
    272a:	4619      	mov	r1, r3
    272c:	f003 fa09 	bl	5b42 <absolute_time_to_cc>
    2730:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2732:	f7ff ffd5 	bl	26e0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2736:	42a0      	cmp	r0, r4
    2738:	eb71 0305 	sbcs.w	r3, r1, r5
    273c:	d21d      	bcs.n	277a <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    273e:	1a23      	subs	r3, r4, r0
    2740:	eb65 0101 	sbc.w	r1, r5, r1
    2744:	4a19      	ldr	r2, [pc, #100]	; (27ac <compare_set_nolocks+0x8c>)
    2746:	4293      	cmp	r3, r2
    2748:	f171 0300 	sbcs.w	r3, r1, #0
    274c:	d22b      	bcs.n	27a6 <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
    274e:	4b18      	ldr	r3, [pc, #96]	; (27b0 <compare_set_nolocks+0x90>)
    2750:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2754:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2758:	42ab      	cmp	r3, r5
    275a:	bf08      	it	eq
    275c:	42a2      	cmpeq	r2, r4
    275e:	d016      	beq.n	278e <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    2760:	4639      	mov	r1, r7
    2762:	4630      	mov	r0, r6
    2764:	f003 f9fe 	bl	5b64 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    2768:	4639      	mov	r1, r7
    276a:	f003 f9da 	bl	5b22 <counter_sub>
    276e:	1900      	adds	r0, r0, r4
    2770:	f145 0300 	adc.w	r3, r5, #0
    2774:	4604      	mov	r4, r0
    2776:	461d      	mov	r5, r3
    2778:	e009      	b.n	278e <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
    277a:	2301      	movs	r3, #1
    277c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    277e:	4a0d      	ldr	r2, [pc, #52]	; (27b4 <compare_set_nolocks+0x94>)
    2780:	e8d2 1fef 	ldaex	r1, [r2]
    2784:	4319      	orrs	r1, r3
    2786:	e8c2 1fe0 	stlex	r0, r1, [r2]
    278a:	2800      	cmp	r0, #0
    278c:	d1f8      	bne.n	2780 <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
    278e:	4b08      	ldr	r3, [pc, #32]	; (27b0 <compare_set_nolocks+0x90>)
    2790:	0132      	lsls	r2, r6, #4
    2792:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    2796:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    279a:	9906      	ldr	r1, [sp, #24]
    279c:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    279e:	9b07      	ldr	r3, [sp, #28]
    27a0:	6073      	str	r3, [r6, #4]
	return ret;
    27a2:	2000      	movs	r0, #0
}
    27a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    27a6:	f06f 0015 	mvn.w	r0, #21
    27aa:	e7fb      	b.n	27a4 <compare_set_nolocks+0x84>
    27ac:	01000001 	.word	0x01000001
    27b0:	200001a0 	.word	0x200001a0
    27b4:	20000948 	.word	0x20000948

000027b8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    27b8:	b530      	push	{r4, r5, lr}
    27ba:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    27bc:	2300      	movs	r3, #0
    27be:	4a1d      	ldr	r2, [pc, #116]	; (2834 <sys_clock_driver_init+0x7c>)
    27c0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    27c4:	2b00      	cmp	r3, #0
    27c6:	dd24      	ble.n	2812 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    27c8:	4c1a      	ldr	r4, [pc, #104]	; (2834 <sys_clock_driver_init+0x7c>)
    27ca:	2502      	movs	r5, #2
    27cc:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27d0:	4b19      	ldr	r3, [pc, #100]	; (2838 <sys_clock_driver_init+0x80>)
    27d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    27d6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    27da:	2200      	movs	r2, #0
    27dc:	2101      	movs	r1, #1
    27de:	2015      	movs	r0, #21
    27e0:	f7fe fe6a 	bl	14b8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    27e4:	2015      	movs	r0, #21
    27e6:	f7fe fe4b 	bl	1480 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    27ea:	2301      	movs	r3, #1
    27ec:	60a3      	str	r3, [r4, #8]
    27ee:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    27f0:	4a12      	ldr	r2, [pc, #72]	; (283c <sys_clock_driver_init+0x84>)
    27f2:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    27f4:	2400      	movs	r4, #0
    27f6:	9401      	str	r4, [sp, #4]
    27f8:	4b11      	ldr	r3, [pc, #68]	; (2840 <sys_clock_driver_init+0x88>)
    27fa:	9300      	str	r3, [sp, #0]
    27fc:	4a11      	ldr	r2, [pc, #68]	; (2844 <sys_clock_driver_init+0x8c>)
    27fe:	2300      	movs	r3, #0
    2800:	4620      	mov	r0, r4
    2802:	f003 f9ea 	bl	5bda <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2806:	4628      	mov	r0, r5
    2808:	f7ff fc0a 	bl	2020 <z_nrf_clock_control_lf_on>

	return 0;
}
    280c:	4620      	mov	r0, r4
    280e:	b003      	add	sp, #12
    2810:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2812:	4a0d      	ldr	r2, [pc, #52]	; (2848 <sys_clock_driver_init+0x90>)
    2814:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2818:	f04f 30ff 	mov.w	r0, #4294967295
    281c:	f04f 31ff 	mov.w	r1, #4294967295
    2820:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2824:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2828:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    282a:	4902      	ldr	r1, [pc, #8]	; (2834 <sys_clock_driver_init+0x7c>)
    282c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2830:	3301      	adds	r3, #1
    2832:	e7c7      	b.n	27c4 <sys_clock_driver_init+0xc>
    2834:	50015000 	.word	0x50015000
    2838:	e000e100 	.word	0xe000e100
    283c:	2000094c 	.word	0x2000094c
    2840:	00002669 	.word	0x00002669
    2844:	007fffff 	.word	0x007fffff
    2848:	200001a0 	.word	0x200001a0

0000284c <process_channel>:
{
    284c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2850:	b082      	sub	sp, #8
    2852:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    2854:	f7ff fea6 	bl	25a4 <channel_processing_check_and_clear>
    2858:	b910      	cbnz	r0, 2860 <process_channel+0x14>
}
    285a:	b002      	add	sp, #8
    285c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2860:	f7ff ff3e 	bl	26e0 <z_nrf_rtc_timer_read>
    2864:	4682      	mov	sl, r0
    2866:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    2868:	f003 f96e 	bl	5b48 <full_int_lock>
    286c:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    286e:	4b13      	ldr	r3, [pc, #76]	; (28bc <process_channel+0x70>)
    2870:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2874:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2878:	45c2      	cmp	sl, r8
    287a:	eb76 0309 	sbcs.w	r3, r6, r9
    287e:	d20b      	bcs.n	2898 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2880:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    2882:	4628      	mov	r0, r5
    2884:	f003 f969 	bl	5b5a <full_int_unlock>
		if (handler) {
    2888:	2e00      	cmp	r6, #0
    288a:	d0e6      	beq.n	285a <process_channel+0xe>
			handler(chan, expire_time, user_context);
    288c:	9700      	str	r7, [sp, #0]
    288e:	4642      	mov	r2, r8
    2890:	464b      	mov	r3, r9
    2892:	4620      	mov	r0, r4
    2894:	47b0      	blx	r6
}
    2896:	e7e0      	b.n	285a <process_channel+0xe>
			handler = cc_data[chan].callback;
    2898:	4a08      	ldr	r2, [pc, #32]	; (28bc <process_channel+0x70>)
    289a:	0123      	lsls	r3, r4, #4
    289c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    28a0:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    28a2:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    28a4:	2000      	movs	r0, #0
    28a6:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    28a8:	f04f 32ff 	mov.w	r2, #4294967295
    28ac:	f04f 33ff 	mov.w	r3, #4294967295
    28b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    28b4:	4620      	mov	r0, r4
    28b6:	f7ff fe43 	bl	2540 <event_disable>
    28ba:	e7e2      	b.n	2882 <process_channel+0x36>
    28bc:	200001a0 	.word	0x200001a0

000028c0 <rtc_nrf_isr>:
{
    28c0:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    28c2:	4b0e      	ldr	r3, [pc, #56]	; (28fc <rtc_nrf_isr+0x3c>)
    28c4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    28c8:	f013 0f02 	tst.w	r3, #2
    28cc:	d00d      	beq.n	28ea <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    28ce:	4b0b      	ldr	r3, [pc, #44]	; (28fc <rtc_nrf_isr+0x3c>)
    28d0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    28d4:	b14b      	cbz	r3, 28ea <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    28d6:	4b09      	ldr	r3, [pc, #36]	; (28fc <rtc_nrf_isr+0x3c>)
    28d8:	2200      	movs	r2, #0
    28da:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    28de:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    28e2:	4a07      	ldr	r2, [pc, #28]	; (2900 <rtc_nrf_isr+0x40>)
    28e4:	6813      	ldr	r3, [r2, #0]
    28e6:	3301      	adds	r3, #1
    28e8:	6013      	str	r3, [r2, #0]
{
    28ea:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    28ec:	2c00      	cmp	r4, #0
    28ee:	dd00      	ble.n	28f2 <rtc_nrf_isr+0x32>
}
    28f0:	bd10      	pop	{r4, pc}
		process_channel(chan);
    28f2:	4620      	mov	r0, r4
    28f4:	f7ff ffaa 	bl	284c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    28f8:	3401      	adds	r4, #1
    28fa:	e7f7      	b.n	28ec <rtc_nrf_isr+0x2c>
    28fc:	50015000 	.word	0x50015000
    2900:	20000950 	.word	0x20000950

00002904 <sys_clock_set_timeout>:
{
    2904:	b510      	push	{r4, lr}
    2906:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2908:	f1b0 3fff 	cmp.w	r0, #4294967295
    290c:	d006      	beq.n	291c <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    290e:	2801      	cmp	r0, #1
    2910:	dd06      	ble.n	2920 <sys_clock_set_timeout+0x1c>
    2912:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2916:	da05      	bge.n	2924 <sys_clock_set_timeout+0x20>
    2918:	1e44      	subs	r4, r0, #1
    291a:	e004      	b.n	2926 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    291c:	480f      	ldr	r0, [pc, #60]	; (295c <sys_clock_set_timeout+0x58>)
    291e:	e7f8      	b.n	2912 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2920:	2400      	movs	r4, #0
    2922:	e000      	b.n	2926 <sys_clock_set_timeout+0x22>
    2924:	4c0d      	ldr	r4, [pc, #52]	; (295c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2926:	f7ff fedb 	bl	26e0 <z_nrf_rtc_timer_read>
    292a:	4b0d      	ldr	r3, [pc, #52]	; (2960 <sys_clock_set_timeout+0x5c>)
    292c:	6819      	ldr	r1, [r3, #0]
    292e:	685b      	ldr	r3, [r3, #4]
    2930:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    2932:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2936:	d300      	bcc.n	293a <sys_clock_set_timeout+0x36>
		ticks = 0;
    2938:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    293a:	4420      	add	r0, r4
    293c:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    293e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    2942:	d300      	bcc.n	2946 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    2944:	4a05      	ldr	r2, [pc, #20]	; (295c <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    2946:	2000      	movs	r0, #0
    2948:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    294a:	9001      	str	r0, [sp, #4]
    294c:	4905      	ldr	r1, [pc, #20]	; (2964 <sys_clock_set_timeout+0x60>)
    294e:	9100      	str	r1, [sp, #0]
    2950:	f143 0300 	adc.w	r3, r3, #0
    2954:	f003 f941 	bl	5bda <compare_set>
}
    2958:	b002      	add	sp, #8
    295a:	bd10      	pop	{r4, pc}
    295c:	007fffff 	.word	0x007fffff
    2960:	200001b0 	.word	0x200001b0
    2964:	00002669 	.word	0x00002669

00002968 <sys_clock_elapsed>:
{
    2968:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    296a:	f7ff feb9 	bl	26e0 <z_nrf_rtc_timer_read>
    296e:	4b02      	ldr	r3, [pc, #8]	; (2978 <sys_clock_elapsed+0x10>)
    2970:	681b      	ldr	r3, [r3, #0]
}
    2972:	1ac0      	subs	r0, r0, r3
    2974:	bd08      	pop	{r3, pc}
    2976:	bf00      	nop
    2978:	200001b0 	.word	0x200001b0

0000297c <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
    297c:	b510      	push	{r4, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    297e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    2982:	d001      	beq.n	2988 <nrf_pin_configure+0xc>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2984:	2201      	movs	r2, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    2986:	2100      	movs	r1, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
    2988:	f3c0 1e81 	ubfx	lr, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    298c:	f000 0c1f 	and.w	ip, r0, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2990:	f010 0f20 	tst.w	r0, #32
    2994:	d110      	bne.n	29b8 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    2996:	4c09      	ldr	r4, [pc, #36]	; (29bc <nrf_pin_configure+0x40>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2998:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    299c:	f854 002c 	ldr.w	r0, [r4, ip, lsl #2]
    29a0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    29a4:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    29a8:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    29ac:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    29b0:	4301      	orrs	r1, r0
    reg->PIN_CNF[pin_number] = cnf;
    29b2:	f844 102c 	str.w	r1, [r4, ip, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
    29b6:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    29b8:	4c01      	ldr	r4, [pc, #4]	; (29c0 <nrf_pin_configure+0x44>)
    29ba:	e7ed      	b.n	2998 <nrf_pin_configure+0x1c>
    29bc:	50842500 	.word	0x50842500
    29c0:	50842800 	.word	0x50842800

000029c4 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    29c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29c8:	4606      	mov	r6, r0
    29ca:	460f      	mov	r7, r1
    29cc:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    29ce:	2400      	movs	r4, #0
    29d0:	e015      	b.n	29fe <pinctrl_configure_pins+0x3a>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    29d2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    29d6:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    29da:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    29de:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    29e2:	f011 0f20 	tst.w	r1, #32
    29e6:	d11f      	bne.n	2a28 <pinctrl_configure_pins+0x64>
        case 0: return NRF_P0;
    29e8:	4d2a      	ldr	r5, [pc, #168]	; (2a94 <pinctrl_configure_pins+0xd0>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    29ea:	2101      	movs	r1, #1
    29ec:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    29f0:	60aa      	str	r2, [r5, #8]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    29f2:	460a      	mov	r2, r1
    29f4:	5830      	ldr	r0, [r6, r0]
    29f6:	f7ff ffc1 	bl	297c <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    29fa:	3401      	adds	r4, #1
    29fc:	b2e4      	uxtb	r4, r4
    29fe:	42bc      	cmp	r4, r7
    2a00:	d241      	bcs.n	2a86 <pinctrl_configure_pins+0xc2>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2a02:	00a0      	lsls	r0, r4, #2
    2a04:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
    2a08:	f3c5 2303 	ubfx	r3, r5, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
    2a0c:	0c2a      	lsrs	r2, r5, #16
    2a0e:	2a03      	cmp	r2, #3
    2a10:	d83c      	bhi.n	2a8c <pinctrl_configure_pins+0xc8>
    2a12:	a101      	add	r1, pc, #4	; (adr r1, 2a18 <pinctrl_configure_pins+0x54>)
    2a14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    2a18:	000029d3 	.word	0x000029d3
    2a1c:	00002a2d 	.word	0x00002a2d
    2a20:	00002a43 	.word	0x00002a43
    2a24:	00002a71 	.word	0x00002a71
        case 1: return NRF_P1;
    2a28:	4d1b      	ldr	r5, [pc, #108]	; (2a98 <pinctrl_configure_pins+0xd4>)
    2a2a:	e7de      	b.n	29ea <pinctrl_configure_pins+0x26>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    2a2c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2a30:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2a34:	2200      	movs	r2, #0
    2a36:	4611      	mov	r1, r2
    2a38:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2a3c:	f7ff ff9e 	bl	297c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    2a40:	e7db      	b.n	29fa <pinctrl_configure_pins+0x36>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    2a42:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2a46:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    2a4a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    2a4e:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2a52:	f011 0f20 	tst.w	r1, #32
    2a56:	d109      	bne.n	2a6c <pinctrl_configure_pins+0xa8>
        case 0: return NRF_P0;
    2a58:	4d0e      	ldr	r5, [pc, #56]	; (2a94 <pinctrl_configure_pins+0xd0>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2a5a:	2101      	movs	r1, #1
    2a5c:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    2a60:	60aa      	str	r2, [r5, #8]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2a62:	460a      	mov	r2, r1
    2a64:	5830      	ldr	r0, [r6, r0]
    2a66:	f7ff ff89 	bl	297c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2a6a:	e7c6      	b.n	29fa <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
    2a6c:	4d0a      	ldr	r5, [pc, #40]	; (2a98 <pinctrl_configure_pins+0xd4>)
    2a6e:	e7f4      	b.n	2a5a <pinctrl_configure_pins+0x96>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    2a70:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2a74:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2a78:	2200      	movs	r2, #0
    2a7a:	4611      	mov	r1, r2
    2a7c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2a80:	f7ff ff7c 	bl	297c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    2a84:	e7b9      	b.n	29fa <pinctrl_configure_pins+0x36>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    2a86:	2000      	movs	r0, #0
}
    2a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (NRF_GET_FUN(pins[i])) {
    2a8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2a90:	e7fa      	b.n	2a88 <pinctrl_configure_pins+0xc4>
    2a92:	bf00      	nop
    2a94:	50842500 	.word	0x50842500
    2a98:	50842800 	.word	0x50842800

00002a9c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    2a9c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2aa0:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    2aa4:	f002 0203 	and.w	r2, r2, #3
    2aa8:	4b02      	ldr	r3, [pc, #8]	; (2ab4 <SystemCoreClockUpdate+0x18>)
    2aaa:	40d3      	lsrs	r3, r2
    2aac:	4a02      	ldr	r2, [pc, #8]	; (2ab8 <SystemCoreClockUpdate+0x1c>)
    2aae:	6013      	str	r3, [r2, #0]
#endif
}
    2ab0:	4770      	bx	lr
    2ab2:	bf00      	nop
    2ab4:	07a12000 	.word	0x07a12000
    2ab8:	20000048 	.word	0x20000048

00002abc <SystemInit>:

void SystemInit(void)
{
    2abc:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    2abe:	f003 f945 	bl	5d4c <nrf53_errata_97>
    2ac2:	b168      	cbz	r0, 2ae0 <SystemInit+0x24>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    2ac4:	4b4e      	ldr	r3, [pc, #312]	; (2c00 <SystemInit+0x144>)
    2ac6:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
    2aca:	b94b      	cbnz	r3, 2ae0 <SystemInit+0x24>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    2acc:	4b4c      	ldr	r3, [pc, #304]	; (2c00 <SystemInit+0x144>)
    2ace:	220d      	movs	r2, #13
    2ad0:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    2ad4:	2201      	movs	r2, #1
    2ad6:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    2ada:	2200      	movs	r2, #0
    2adc:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    2ae0:	2200      	movs	r2, #0
    2ae2:	e00b      	b.n	2afc <SystemInit+0x40>
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2ae4:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2ae8:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2aec:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    2af0:	00db      	lsls	r3, r3, #3
    2af2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    2af6:	685b      	ldr	r3, [r3, #4]
    2af8:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2afa:	3201      	adds	r2, #1
    2afc:	2a1f      	cmp	r2, #31
    2afe:	d808      	bhi.n	2b12 <SystemInit+0x56>
    2b00:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2b04:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2b08:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    2b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2b10:	d1e8      	bne.n	2ae4 <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2b12:	f003 f8f3 	bl	5cfc <nrf53_errata_64>
    2b16:	b130      	cbz	r0, 2b26 <SystemInit+0x6a>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2b18:	4b39      	ldr	r3, [pc, #228]	; (2c00 <SystemInit+0x144>)
    2b1a:	2229      	movs	r2, #41	; 0x29
    2b1c:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    2b20:	2203      	movs	r2, #3
    2b22:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    2b26:	f003 f89d 	bl	5c64 <nrf53_errata_42>
    2b2a:	b140      	cbz	r0, 2b3e <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2b2c:	4b35      	ldr	r3, [pc, #212]	; (2c04 <SystemInit+0x148>)
    2b2e:	4a36      	ldr	r2, [pc, #216]	; (2c08 <SystemInit+0x14c>)
    2b30:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    2b34:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b38:	2201      	movs	r2, #1
    2b3a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    2b3e:	f003 f8a5 	bl	5c8c <nrf53_errata_46>
    2b42:	b118      	cbz	r0, 2b4c <SystemInit+0x90>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    2b44:	4b31      	ldr	r3, [pc, #196]	; (2c0c <SystemInit+0x150>)
    2b46:	2200      	movs	r2, #0
    2b48:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    2b4c:	f003 f8b6 	bl	5cbc <nrf53_errata_49>
    2b50:	b168      	cbz	r0, 2b6e <SystemInit+0xb2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    2b52:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b56:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2b5a:	f013 0f01 	tst.w	r3, #1
    2b5e:	d006      	beq.n	2b6e <SystemInit+0xb2>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    2b60:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b64:	2200      	movs	r2, #0
    2b66:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2b6a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    2b6e:	f003 f8b9 	bl	5ce4 <nrf53_errata_55>
    2b72:	b160      	cbz	r0, 2b8e <SystemInit+0xd2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    2b74:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b78:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2b7c:	f013 0f01 	tst.w	r3, #1
    2b80:	d005      	beq.n	2b8e <SystemInit+0xd2>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    2b82:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b86:	f06f 0201 	mvn.w	r2, #1
    2b8a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    2b8e:	f003 f8c9 	bl	5d24 <nrf53_errata_69>
    2b92:	b118      	cbz	r0, 2b9c <SystemInit+0xe0>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    2b94:	4b1a      	ldr	r3, [pc, #104]	; (2c00 <SystemInit+0x144>)
    2b96:	2265      	movs	r2, #101	; 0x65
    2b98:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        }

        if (nrf53_errata_140())
    2b9c:	f003 f8ea 	bl	5d74 <nrf53_errata_140>
    2ba0:	b120      	cbz	r0, 2bac <SystemInit+0xf0>
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    2ba2:	4b1a      	ldr	r3, [pc, #104]	; (2c0c <SystemInit+0x150>)
    2ba4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    2ba8:	2b00      	cmp	r3, #0
    2baa:	db11      	blt.n	2bd0 <SystemInit+0x114>

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2bac:	4a18      	ldr	r2, [pc, #96]	; (2c10 <SystemInit+0x154>)
    2bae:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2bb2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2bb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2bba:	4a16      	ldr	r2, [pc, #88]	; (2c14 <SystemInit+0x158>)
    2bbc:	6811      	ldr	r1, [r2, #0]
    2bbe:	4b16      	ldr	r3, [pc, #88]	; (2c18 <SystemInit+0x15c>)
    2bc0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    2bc4:	69d2      	ldr	r2, [r2, #28]
    2bc6:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    2bca:	f7ff ff67 	bl	2a9c <SystemCoreClockUpdate>
}
    2bce:	bd08      	pop	{r3, pc}
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    2bd0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2bd4:	2203      	movs	r2, #3
    2bd6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    2bda:	2201      	movs	r2, #1
    2bdc:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    2bde:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2be2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2be6:	2b00      	cmp	r3, #0
    2be8:	d0f9      	beq.n	2bde <SystemInit+0x122>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    2bea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2bee:	2200      	movs	r2, #0
    2bf0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    2bf4:	2201      	movs	r2, #1
    2bf6:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    2bf8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    2bfc:	e7d6      	b.n	2bac <SystemInit+0xf0>
    2bfe:	bf00      	nop
    2c00:	50004000 	.word	0x50004000
    2c04:	50039000 	.word	0x50039000
    2c08:	beef0044 	.word	0xbeef0044
    2c0c:	50032000 	.word	0x50032000
    2c10:	e000ed00 	.word	0xe000ed00
    2c14:	00ff8000 	.word	0x00ff8000
    2c18:	50006000 	.word	0x50006000

00002c1c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2c1c:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    2c1e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2c20:	fab4 f384 	clz	r3, r4
    2c24:	f1c3 031f 	rsb	r3, r3, #31
    2c28:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	db12      	blt.n	2c56 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2c30:	2201      	movs	r2, #1
    2c32:	fa02 f303 	lsl.w	r3, r2, r3
    2c36:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2c3a:	e8d0 2fef 	ldaex	r2, [r0]
    2c3e:	42a2      	cmp	r2, r4
    2c40:	d104      	bne.n	2c4c <nrfx_flag32_alloc+0x30>
    2c42:	e8c0 3fee 	stlex	lr, r3, [r0]
    2c46:	f1be 0f00 	cmp.w	lr, #0
    2c4a:	d1f6      	bne.n	2c3a <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2c4c:	d1e7      	bne.n	2c1e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    2c4e:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    2c52:	4802      	ldr	r0, [pc, #8]	; (2c5c <nrfx_flag32_alloc+0x40>)
}
    2c54:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    2c56:	4802      	ldr	r0, [pc, #8]	; (2c60 <nrfx_flag32_alloc+0x44>)
    2c58:	e7fc      	b.n	2c54 <nrfx_flag32_alloc+0x38>
    2c5a:	bf00      	nop
    2c5c:	0bad0000 	.word	0x0bad0000
    2c60:	0bad0002 	.word	0x0bad0002

00002c64 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2c64:	6803      	ldr	r3, [r0, #0]
    2c66:	40cb      	lsrs	r3, r1
    2c68:	f013 0f01 	tst.w	r3, #1
    2c6c:	d111      	bne.n	2c92 <nrfx_flag32_free+0x2e>
{
    2c6e:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    2c70:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    2c72:	2301      	movs	r3, #1
    2c74:	408b      	lsls	r3, r1
    2c76:	4313      	orrs	r3, r2
    2c78:	e8d0 cfef 	ldaex	ip, [r0]
    2c7c:	4594      	cmp	ip, r2
    2c7e:	d104      	bne.n	2c8a <nrfx_flag32_free+0x26>
    2c80:	e8c0 3fee 	stlex	lr, r3, [r0]
    2c84:	f1be 0f00 	cmp.w	lr, #0
    2c88:	d1f6      	bne.n	2c78 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2c8a:	d1f1      	bne.n	2c70 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    2c8c:	4802      	ldr	r0, [pc, #8]	; (2c98 <nrfx_flag32_free+0x34>)
}
    2c8e:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    2c92:	4802      	ldr	r0, [pc, #8]	; (2c9c <nrfx_flag32_free+0x38>)
}
    2c94:	4770      	bx	lr
    2c96:	bf00      	nop
    2c98:	0bad0000 	.word	0x0bad0000
    2c9c:	0bad0004 	.word	0x0bad0004

00002ca0 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    2ca0:	b570      	push	{r4, r5, r6, lr}
    2ca2:	b082      	sub	sp, #8
    2ca4:	4605      	mov	r5, r0
    switch (domain)
    2ca6:	2803      	cmp	r0, #3
    2ca8:	f200 809e 	bhi.w	2de8 <clock_stop+0x148>
    2cac:	e8df f000 	tbb	[pc, r0]
    2cb0:	31231702 	.word	0x31231702
    p_reg->INTENCLR = mask;
    2cb4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cb8:	2202      	movs	r2, #2
    2cba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cbe:	2200      	movs	r2, #0
    2cc0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2cc4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2cc8:	2201      	movs	r2, #1
    2cca:	60da      	str	r2, [r3, #12]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2ccc:	2301      	movs	r3, #1
    2cce:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2cd2:	429d      	cmp	r5, r3
    2cd4:	d02b      	beq.n	2d2e <clock_stop+0x8e>
    2cd6:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2cd8:	f242 7410 	movw	r4, #10000	; 0x2710
    2cdc:	e06e      	b.n	2dbc <clock_stop+0x11c>
    p_reg->INTENCLR = mask;
    2cde:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ce2:	2201      	movs	r2, #1
    2ce4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ce8:	2100      	movs	r1, #0
    2cea:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    2cee:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2cf2:	605a      	str	r2, [r3, #4]
}
    2cf4:	e7ea      	b.n	2ccc <clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    2cf6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
    2cfe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d02:	2200      	movs	r2, #0
    2d04:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    2d08:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d0c:	2201      	movs	r2, #1
    2d0e:	625a      	str	r2, [r3, #36]	; 0x24
}
    2d10:	e7dc      	b.n	2ccc <clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    2d12:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d16:	f44f 7280 	mov.w	r2, #256	; 0x100
    2d1a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d1e:	2200      	movs	r2, #0
    2d20:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2d24:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d28:	2201      	movs	r2, #1
    2d2a:	61da      	str	r2, [r3, #28]
}
    2d2c:	e7ce      	b.n	2ccc <clock_stop+0x2c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2d2e:	f10d 0607 	add.w	r6, sp, #7
    2d32:	e7d1      	b.n	2cd8 <clock_stop+0x38>
            if (p_clk_src != NULL)
    2d34:	b136      	cbz	r6, 2d44 <clock_stop+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2d36:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d3a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2d3e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    2d42:	7033      	strb	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2d44:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d48:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2d4c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2d50:	d144      	bne.n	2ddc <clock_stop+0x13c>
    return false;
    2d52:	2300      	movs	r3, #0
    2d54:	e027      	b.n	2da6 <clock_stop+0x106>
            if (p_clk_src != NULL)
    2d56:	b136      	cbz	r6, 2d66 <clock_stop+0xc6>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2d58:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d5c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2d60:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2d64:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2d66:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d6a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2d6e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2d72:	d135      	bne.n	2de0 <clock_stop+0x140>
    return false;
    2d74:	2300      	movs	r3, #0
    2d76:	e016      	b.n	2da6 <clock_stop+0x106>
            if (p_clk_src != NULL)
    2d78:	b136      	cbz	r6, 2d88 <clock_stop+0xe8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    2d7a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d7e:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    2d82:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2d86:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    2d88:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d8c:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    2d90:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2d94:	d126      	bne.n	2de4 <clock_stop+0x144>
    return false;
    2d96:	2300      	movs	r3, #0
    2d98:	e005      	b.n	2da6 <clock_stop+0x106>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    2d9a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d9e:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    2da2:	f3c3 4300 	ubfx	r3, r3, #16, #1
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2da6:	b1fb      	cbz	r3, 2de8 <clock_stop+0x148>
    2da8:	b11e      	cbz	r6, 2db2 <clock_stop+0x112>
    2daa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2dae:	2b01      	cmp	r3, #1
    2db0:	d11a      	bne.n	2de8 <clock_stop+0x148>
    2db2:	2001      	movs	r0, #1
    2db4:	f002 ffed 	bl	5d92 <nrfx_busy_wait>
    2db8:	3c01      	subs	r4, #1
    2dba:	d015      	beq.n	2de8 <clock_stop+0x148>
    switch (domain)
    2dbc:	2d03      	cmp	r5, #3
    2dbe:	d80b      	bhi.n	2dd8 <clock_stop+0x138>
    2dc0:	a301      	add	r3, pc, #4	; (adr r3, 2dc8 <clock_stop+0x128>)
    2dc2:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    2dc6:	bf00      	nop
    2dc8:	00002d35 	.word	0x00002d35
    2dcc:	00002d57 	.word	0x00002d57
    2dd0:	00002d79 	.word	0x00002d79
    2dd4:	00002d9b 	.word	0x00002d9b
    2dd8:	2300      	movs	r3, #0
    2dda:	e7e4      	b.n	2da6 <clock_stop+0x106>
                return true;
    2ddc:	2301      	movs	r3, #1
    2dde:	e7e2      	b.n	2da6 <clock_stop+0x106>
                return true;
    2de0:	2301      	movs	r3, #1
    2de2:	e7e0      	b.n	2da6 <clock_stop+0x106>
                return true;
    2de4:	2301      	movs	r3, #1
    2de6:	e7de      	b.n	2da6 <clock_stop+0x106>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2de8:	b002      	add	sp, #8
    2dea:	bd70      	pop	{r4, r5, r6, pc}

00002dec <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2dec:	4b05      	ldr	r3, [pc, #20]	; (2e04 <nrfx_clock_init+0x18>)
    2dee:	791b      	ldrb	r3, [r3, #4]
    2df0:	b92b      	cbnz	r3, 2dfe <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    2df2:	4b04      	ldr	r3, [pc, #16]	; (2e04 <nrfx_clock_init+0x18>)
    2df4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2df6:	2201      	movs	r2, #1
    2df8:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2dfa:	4803      	ldr	r0, [pc, #12]	; (2e08 <nrfx_clock_init+0x1c>)
    2dfc:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2dfe:	4803      	ldr	r0, [pc, #12]	; (2e0c <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2e00:	4770      	bx	lr
    2e02:	bf00      	nop
    2e04:	20000954 	.word	0x20000954
    2e08:	0bad0000 	.word	0x0bad0000
    2e0c:	0bad000c 	.word	0x0bad000c

00002e10 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2e10:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e12:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e16:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2e1a:	b163      	cbz	r3, 2e36 <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e1c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e20:	2000      	movs	r0, #0
    2e22:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    2e26:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2e2a:	2201      	movs	r2, #1
    2e2c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2e30:	4b1f      	ldr	r3, [pc, #124]	; (2eb0 <nrfx_power_clock_irq_handler+0xa0>)
    2e32:	681b      	ldr	r3, [r3, #0]
    2e34:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e36:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e3a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2e3e:	b16b      	cbz	r3, 2e5c <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e40:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e44:	2200      	movs	r2, #0
    2e46:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2e4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    2e4e:	2202      	movs	r2, #2
    2e50:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2e54:	4b16      	ldr	r3, [pc, #88]	; (2eb0 <nrfx_power_clock_irq_handler+0xa0>)
    2e56:	681b      	ldr	r3, [r3, #0]
    2e58:	2001      	movs	r0, #1
    2e5a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e5c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e60:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    2e64:	b173      	cbz	r3, 2e84 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e66:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e6a:	2200      	movs	r2, #0
    2e6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2e70:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    2e74:	f44f 7280 	mov.w	r2, #256	; 0x100
    2e78:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    2e7c:	4b0c      	ldr	r3, [pc, #48]	; (2eb0 <nrfx_power_clock_irq_handler+0xa0>)
    2e7e:	681b      	ldr	r3, [r3, #0]
    2e80:	2004      	movs	r0, #4
    2e82:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e84:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e88:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    2e8c:	b173      	cbz	r3, 2eac <nrfx_power_clock_irq_handler+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e8e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e92:	2200      	movs	r2, #0
    2e94:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    2e98:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    2e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
    2ea0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2ea4:	4b02      	ldr	r3, [pc, #8]	; (2eb0 <nrfx_power_clock_irq_handler+0xa0>)
    2ea6:	681b      	ldr	r3, [r3, #0]
    2ea8:	2005      	movs	r0, #5
    2eaa:	4798      	blx	r3
    }
#endif
}
    2eac:	bd08      	pop	{r3, pc}
    2eae:	bf00      	nop
    2eb0:	20000954 	.word	0x20000954

00002eb4 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    2eb4:	b508      	push	{r3, lr}
    2eb6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    2eb8:	4801      	ldr	r0, [pc, #4]	; (2ec0 <nrfx_dppi_channel_alloc+0xc>)
    2eba:	f7ff feaf 	bl	2c1c <nrfx_flag32_alloc>
}
    2ebe:	bd08      	pop	{r3, pc}
    2ec0:	2000004c 	.word	0x2000004c

00002ec4 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2ec4:	3008      	adds	r0, #8
    2ec6:	4b03      	ldr	r3, [pc, #12]	; (2ed4 <pin_in_use+0x10>)
    2ec8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2ecc:	f000 0001 	and.w	r0, r0, #1
    2ed0:	4770      	bx	lr
    2ed2:	bf00      	nop
    2ed4:	20000050 	.word	0x20000050

00002ed8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2ed8:	3008      	adds	r0, #8
    2eda:	4b03      	ldr	r3, [pc, #12]	; (2ee8 <pin_in_use_by_te+0x10>)
    2edc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2ee0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2ee4:	4770      	bx	lr
    2ee6:	bf00      	nop
    2ee8:	20000050 	.word	0x20000050

00002eec <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    2eec:	3008      	adds	r0, #8
    2eee:	4b04      	ldr	r3, [pc, #16]	; (2f00 <pin_has_trigger+0x14>)
    2ef0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2ef4:	f010 001c 	ands.w	r0, r0, #28
    2ef8:	bf18      	it	ne
    2efa:	2001      	movne	r0, #1
    2efc:	4770      	bx	lr
    2efe:	bf00      	nop
    2f00:	20000050 	.word	0x20000050

00002f04 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2f04:	3008      	adds	r0, #8
    2f06:	4b03      	ldr	r3, [pc, #12]	; (2f14 <pin_is_output+0x10>)
    2f08:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2f0c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2f10:	4770      	bx	lr
    2f12:	bf00      	nop
    2f14:	20000050 	.word	0x20000050

00002f18 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2f18:	3008      	adds	r0, #8
    2f1a:	4b02      	ldr	r3, [pc, #8]	; (2f24 <pin_te_get+0xc>)
    2f1c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2f20:	0b40      	lsrs	r0, r0, #13
    2f22:	4770      	bx	lr
    2f24:	20000050 	.word	0x20000050

00002f28 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2f28:	2200      	movs	r2, #0
    2f2a:	e004      	b.n	2f36 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2f2c:	f04f 33ff 	mov.w	r3, #4294967295
    2f30:	4283      	cmp	r3, r0
    2f32:	d00f      	beq.n	2f54 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2f34:	3201      	adds	r2, #1
    2f36:	2a2f      	cmp	r2, #47	; 0x2f
    2f38:	d80a      	bhi.n	2f50 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2f3a:	f102 0308 	add.w	r3, r2, #8
    2f3e:	4906      	ldr	r1, [pc, #24]	; (2f58 <handler_in_use+0x30>)
    2f40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    2f44:	f413 7f80 	tst.w	r3, #256	; 0x100
    2f48:	d0f0      	beq.n	2f2c <handler_in_use+0x4>
    2f4a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2f4e:	e7ef      	b.n	2f30 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    2f50:	2000      	movs	r0, #0
    2f52:	4770      	bx	lr
            return true;
    2f54:	2001      	movs	r0, #1
}
    2f56:	4770      	bx	lr
    2f58:	20000050 	.word	0x20000050

00002f5c <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    2f5c:	2300      	movs	r3, #0
    2f5e:	b113      	cbz	r3, 2f66 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    2f60:	f04f 30ff 	mov.w	r0, #4294967295
}
    2f64:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2f66:	4a07      	ldr	r2, [pc, #28]	; (2f84 <find_handler+0x28>)
    2f68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    2f6c:	4282      	cmp	r2, r0
    2f6e:	d001      	beq.n	2f74 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    2f70:	3301      	adds	r3, #1
    2f72:	e7f4      	b.n	2f5e <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2f74:	4a03      	ldr	r2, [pc, #12]	; (2f84 <find_handler+0x28>)
    2f76:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2f7a:	6852      	ldr	r2, [r2, #4]
    2f7c:	428a      	cmp	r2, r1
    2f7e:	d1f7      	bne.n	2f70 <find_handler+0x14>
            return i;
    2f80:	4618      	mov	r0, r3
    2f82:	4770      	bx	lr
    2f84:	20000050 	.word	0x20000050

00002f88 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2f88:	3008      	adds	r0, #8
    2f8a:	4b06      	ldr	r3, [pc, #24]	; (2fa4 <channel_handler_get+0x1c>)
    2f8c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    2f90:	f410 7f80 	tst.w	r0, #256	; 0x100
    2f94:	d004      	beq.n	2fa0 <channel_handler_get+0x18>
    2f96:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    2f9a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2f9e:	4770      	bx	lr
        return NULL;
    2fa0:	2000      	movs	r0, #0
}
    2fa2:	4770      	bx	lr
    2fa4:	20000050 	.word	0x20000050

00002fa8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2fa8:	b570      	push	{r4, r5, r6, lr}
    2faa:	4604      	mov	r4, r0
    2fac:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    2fae:	f7ff ffeb 	bl	2f88 <channel_handler_get>

    if (handler)
    2fb2:	b120      	cbz	r0, 2fbe <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    2fb4:	6806      	ldr	r6, [r0, #0]
    2fb6:	6842      	ldr	r2, [r0, #4]
    2fb8:	4629      	mov	r1, r5
    2fba:	4620      	mov	r0, r4
    2fbc:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    2fbe:	4b04      	ldr	r3, [pc, #16]	; (2fd0 <call_handler+0x28>)
    2fc0:	689b      	ldr	r3, [r3, #8]
    2fc2:	b123      	cbz	r3, 2fce <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2fc4:	4a02      	ldr	r2, [pc, #8]	; (2fd0 <call_handler+0x28>)
    2fc6:	68d2      	ldr	r2, [r2, #12]
    2fc8:	4629      	mov	r1, r5
    2fca:	4620      	mov	r0, r4
    2fcc:	4798      	blx	r3
    }
}
    2fce:	bd70      	pop	{r4, r5, r6, pc}
    2fd0:	20000050 	.word	0x20000050

00002fd4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2fd4:	f100 0208 	add.w	r2, r0, #8
    2fd8:	4b0e      	ldr	r3, [pc, #56]	; (3014 <release_handler+0x40>)
    2fda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2fde:	f413 7f80 	tst.w	r3, #256	; 0x100
    2fe2:	d016      	beq.n	3012 <release_handler+0x3e>
{
    2fe4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2fe6:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2fea:	4610      	mov	r0, r2
    2fec:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2ff0:	4a08      	ldr	r2, [pc, #32]	; (3014 <release_handler+0x40>)
    2ff2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    2ff6:	4620      	mov	r0, r4
    2ff8:	f7ff ff96 	bl	2f28 <handler_in_use>
    2ffc:	b100      	cbz	r0, 3000 <release_handler+0x2c>
}
    2ffe:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    3000:	4804      	ldr	r0, [pc, #16]	; (3014 <release_handler+0x40>)
    3002:	2300      	movs	r3, #0
    3004:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3008:	4621      	mov	r1, r4
    300a:	3074      	adds	r0, #116	; 0x74
    300c:	f7ff fe2a 	bl	2c64 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3010:	e7f5      	b.n	2ffe <release_handler+0x2a>
    3012:	4770      	bx	lr
    3014:	20000050 	.word	0x20000050

00003018 <pin_handler_trigger_uninit>:
{
    3018:	b510      	push	{r4, lr}
    301a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    301c:	f7ff ff5c 	bl	2ed8 <pin_in_use_by_te>
    3020:	b150      	cbz	r0, 3038 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3022:	4620      	mov	r0, r4
    3024:	f7ff ff78 	bl	2f18 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3028:	4b08      	ldr	r3, [pc, #32]	; (304c <pin_handler_trigger_uninit+0x34>)
    302a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    302e:	2200      	movs	r2, #0
    3030:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    3034:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    3038:	4620      	mov	r0, r4
    303a:	f7ff ffcb 	bl	2fd4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    303e:	3408      	adds	r4, #8
    3040:	4b03      	ldr	r3, [pc, #12]	; (3050 <pin_handler_trigger_uninit+0x38>)
    3042:	2200      	movs	r2, #0
    3044:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    3048:	bd10      	pop	{r4, pc}
    304a:	bf00      	nop
    304c:	5000d000 	.word	0x5000d000
    3050:	20000050 	.word	0x20000050

00003054 <pin_handler_set>:
{
    3054:	b570      	push	{r4, r5, r6, lr}
    3056:	b082      	sub	sp, #8
    3058:	4606      	mov	r6, r0
    305a:	460c      	mov	r4, r1
    305c:	4615      	mov	r5, r2
    release_handler(pin);
    305e:	f7ff ffb9 	bl	2fd4 <release_handler>
    if (!handler)
    3062:	b324      	cbz	r4, 30ae <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    3064:	4629      	mov	r1, r5
    3066:	4620      	mov	r0, r4
    3068:	f7ff ff78 	bl	2f5c <find_handler>
    if (handler_id < 0)
    306c:	1e03      	subs	r3, r0, #0
    306e:	db13      	blt.n	3098 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    3070:	4a10      	ldr	r2, [pc, #64]	; (30b4 <pin_handler_set+0x60>)
    3072:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3076:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    307a:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    307c:	025b      	lsls	r3, r3, #9
    307e:	b29b      	uxth	r3, r3
    3080:	f106 0008 	add.w	r0, r6, #8
    3084:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    3088:	430b      	orrs	r3, r1
    308a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    308e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    3092:	4809      	ldr	r0, [pc, #36]	; (30b8 <pin_handler_set+0x64>)
}
    3094:	b002      	add	sp, #8
    3096:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3098:	f10d 0107 	add.w	r1, sp, #7
    309c:	4807      	ldr	r0, [pc, #28]	; (30bc <pin_handler_set+0x68>)
    309e:	f7ff fdbd 	bl	2c1c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    30a2:	4b05      	ldr	r3, [pc, #20]	; (30b8 <pin_handler_set+0x64>)
    30a4:	4298      	cmp	r0, r3
    30a6:	d1f5      	bne.n	3094 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    30a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    30ac:	e7e0      	b.n	3070 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    30ae:	4802      	ldr	r0, [pc, #8]	; (30b8 <pin_handler_set+0x64>)
    30b0:	e7f0      	b.n	3094 <pin_handler_set+0x40>
    30b2:	bf00      	nop
    30b4:	20000050 	.word	0x20000050
    30b8:	0bad0000 	.word	0x0bad0000
    30bc:	200000c4 	.word	0x200000c4

000030c0 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    30c0:	b538      	push	{r3, r4, r5, lr}
    30c2:	4604      	mov	r4, r0
    while (mask)
    30c4:	e018      	b.n	30f8 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    30c6:	fa94 f3a4 	rbit	r3, r4
    30ca:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    30ce:	2201      	movs	r2, #1
    30d0:	409a      	lsls	r2, r3
    30d2:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    30d6:	4a0a      	ldr	r2, [pc, #40]	; (3100 <gpiote_evt_handle+0x40>)
    30d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    30dc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    30e0:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    30e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    30e8:	f3c0 4001 	ubfx	r0, r0, #16, #2
    30ec:	f002 ff0c 	bl	5f08 <gpiote_polarity_to_trigger>
    30f0:	4601      	mov	r1, r0
    30f2:	4628      	mov	r0, r5
    30f4:	f7ff ff58 	bl	2fa8 <call_handler>
    while (mask)
    30f8:	2c00      	cmp	r4, #0
    30fa:	d1e4      	bne.n	30c6 <gpiote_evt_handle+0x6>
    }
}
    30fc:	bd38      	pop	{r3, r4, r5, pc}
    30fe:	bf00      	nop
    3100:	5000d000 	.word	0x5000d000

00003104 <latch_pending_read_and_check>:
{
    3104:	b082      	sub	sp, #8
    3106:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    3108:	4b10      	ldr	r3, [pc, #64]	; (314c <latch_pending_read_and_check+0x48>)
    310a:	e893 0003 	ldmia.w	r3, {r0, r1}
    310e:	ab02      	add	r3, sp, #8
    3110:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    3114:	4660      	mov	r0, ip
    3116:	2300      	movs	r3, #0
    3118:	e009      	b.n	312e <latch_pending_read_and_check+0x2a>
        *p_masks = gpio_regs[i]->LATCH;
    311a:	aa02      	add	r2, sp, #8
    311c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    3120:	f852 2c08 	ldr.w	r2, [r2, #-8]
    3124:	6a11      	ldr	r1, [r2, #32]
    3126:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    312a:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
    312c:	3301      	adds	r3, #1
    312e:	2b01      	cmp	r3, #1
    3130:	d9f3      	bls.n	311a <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    3132:	2300      	movs	r3, #0
    3134:	2b01      	cmp	r3, #1
    3136:	d804      	bhi.n	3142 <latch_pending_read_and_check+0x3e>
        if (latch[port_idx])
    3138:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    313c:	b922      	cbnz	r2, 3148 <latch_pending_read_and_check+0x44>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    313e:	3301      	adds	r3, #1
    3140:	e7f8      	b.n	3134 <latch_pending_read_and_check+0x30>
    return false;
    3142:	2000      	movs	r0, #0
}
    3144:	b002      	add	sp, #8
    3146:	4770      	bx	lr
            return true;
    3148:	2001      	movs	r0, #1
    314a:	e7fb      	b.n	3144 <latch_pending_read_and_check+0x40>
    314c:	000066e0 	.word	0x000066e0

00003150 <next_sense_cond_call_handler>:
{
    3150:	b570      	push	{r4, r5, r6, lr}
    3152:	4604      	mov	r4, r0
    3154:	460d      	mov	r5, r1
    3156:	4616      	mov	r6, r2
    if (is_level(trigger))
    3158:	4608      	mov	r0, r1
    315a:	f002 fed7 	bl	5f0c <is_level>
    315e:	b9c0      	cbnz	r0, 3192 <next_sense_cond_call_handler+0x42>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3160:	2e02      	cmp	r6, #2
    3162:	d04a      	beq.n	31fa <next_sense_cond_call_handler+0xaa>
    3164:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    3166:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    316a:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    316c:	2901      	cmp	r1, #1
    316e:	d046      	beq.n	31fe <next_sense_cond_call_handler+0xae>
        case 0: return NRF_P0;
    3170:	4929      	ldr	r1, [pc, #164]	; (3218 <next_sense_cond_call_handler+0xc8>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3172:	3280      	adds	r2, #128	; 0x80
    3174:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    3178:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    317c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    3180:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3184:	2d03      	cmp	r5, #3
    3186:	d03e      	beq.n	3206 <next_sense_cond_call_handler+0xb6>
    3188:	2e02      	cmp	r6, #2
    318a:	d03a      	beq.n	3202 <next_sense_cond_call_handler+0xb2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    318c:	2e03      	cmp	r6, #3
    318e:	d03f      	beq.n	3210 <next_sense_cond_call_handler+0xc0>
}
    3190:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    3192:	4629      	mov	r1, r5
    3194:	4620      	mov	r0, r4
    3196:	f7ff ff07 	bl	2fa8 <call_handler>
    *p_pin = pin_number & 0x1F;
    319a:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    319e:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    31a0:	2a01      	cmp	r2, #1
    31a2:	d024      	beq.n	31ee <next_sense_cond_call_handler+0x9e>
        case 0: return NRF_P0;
    31a4:	4a1c      	ldr	r2, [pc, #112]	; (3218 <next_sense_cond_call_handler+0xc8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    31a6:	3380      	adds	r3, #128	; 0x80
    31a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    31ac:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    31b0:	429e      	cmp	r6, r3
    31b2:	d1ed      	bne.n	3190 <next_sense_cond_call_handler+0x40>
    *p_pin = pin_number & 0x1F;
    31b4:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    31b8:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    31ba:	2a01      	cmp	r2, #1
    31bc:	d019      	beq.n	31f2 <next_sense_cond_call_handler+0xa2>
        case 0: return NRF_P0;
    31be:	4916      	ldr	r1, [pc, #88]	; (3218 <next_sense_cond_call_handler+0xc8>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    31c0:	3380      	adds	r3, #128	; 0x80
    31c2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    31c6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    31ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    31ce:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    31d2:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    31d4:	2c01      	cmp	r4, #1
    31d6:	d00e      	beq.n	31f6 <next_sense_cond_call_handler+0xa6>
        case 0: return NRF_P0;
    31d8:	490f      	ldr	r1, [pc, #60]	; (3218 <next_sense_cond_call_handler+0xc8>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    31da:	3380      	adds	r3, #128	; 0x80
    31dc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    31e0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    31e4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    31e8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    31ec:	e7d0      	b.n	3190 <next_sense_cond_call_handler+0x40>
        case 1: return NRF_P1;
    31ee:	4a0b      	ldr	r2, [pc, #44]	; (321c <next_sense_cond_call_handler+0xcc>)
    31f0:	e7d9      	b.n	31a6 <next_sense_cond_call_handler+0x56>
    31f2:	490a      	ldr	r1, [pc, #40]	; (321c <next_sense_cond_call_handler+0xcc>)
    31f4:	e7e4      	b.n	31c0 <next_sense_cond_call_handler+0x70>
    31f6:	4909      	ldr	r1, [pc, #36]	; (321c <next_sense_cond_call_handler+0xcc>)
    31f8:	e7ef      	b.n	31da <next_sense_cond_call_handler+0x8a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    31fa:	2003      	movs	r0, #3
    31fc:	e7b3      	b.n	3166 <next_sense_cond_call_handler+0x16>
    31fe:	4907      	ldr	r1, [pc, #28]	; (321c <next_sense_cond_call_handler+0xcc>)
    3200:	e7b7      	b.n	3172 <next_sense_cond_call_handler+0x22>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3202:	2d01      	cmp	r5, #1
    3204:	d1c2      	bne.n	318c <next_sense_cond_call_handler+0x3c>
            call_handler(pin, trigger);
    3206:	4629      	mov	r1, r5
    3208:	4620      	mov	r0, r4
    320a:	f7ff fecd 	bl	2fa8 <call_handler>
}
    320e:	e7bf      	b.n	3190 <next_sense_cond_call_handler+0x40>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3210:	2d02      	cmp	r5, #2
    3212:	d1bd      	bne.n	3190 <next_sense_cond_call_handler+0x40>
    3214:	e7f7      	b.n	3206 <next_sense_cond_call_handler+0xb6>
    3216:	bf00      	nop
    3218:	50842500 	.word	0x50842500
    321c:	50842800 	.word	0x50842800

00003220 <port_event_handle>:
{
    3220:	b570      	push	{r4, r5, r6, lr}
    3222:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    3224:	4a2d      	ldr	r2, [pc, #180]	; (32dc <port_event_handle+0xbc>)
    3226:	466b      	mov	r3, sp
    3228:	e892 0003 	ldmia.w	r2, {r0, r1}
    322c:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    3230:	2300      	movs	r3, #0
    3232:	a802      	add	r0, sp, #8
    3234:	e009      	b.n	324a <port_event_handle+0x2a>
        *p_masks = gpio_regs[i]->LATCH;
    3236:	aa04      	add	r2, sp, #16
    3238:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    323c:	f852 2c10 	ldr.w	r2, [r2, #-16]
    3240:	6a11      	ldr	r1, [r2, #32]
    3242:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    3246:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
    3248:	3301      	adds	r3, #1
    324a:	2b01      	cmp	r3, #1
    324c:	d9f3      	bls.n	3236 <port_event_handle+0x16>
    324e:	e040      	b.n	32d2 <port_event_handle+0xb2>
        case 1: return NRF_P1;
    3250:	4e23      	ldr	r6, [pc, #140]	; (32e0 <port_event_handle+0xc0>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3252:	f105 0380 	add.w	r3, r5, #128	; 0x80
    3256:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    325a:	f3c2 4201 	ubfx	r2, r2, #16, #2
    325e:	f7ff ff77 	bl	3150 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    3262:	2301      	movs	r3, #1
    3264:	40ab      	lsls	r3, r5
    3266:	6233      	str	r3, [r6, #32]
            while (latch[i])
    3268:	ab04      	add	r3, sp, #16
    326a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    326e:	f853 0c08 	ldr.w	r0, [r3, #-8]
    3272:	b308      	cbz	r0, 32b8 <port_event_handle+0x98>
                uint32_t pin = NRF_CTZ(latch[i]);
    3274:	fa90 f0a0 	rbit	r0, r0
    3278:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    327c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3280:	f100 0208 	add.w	r2, r0, #8
    3284:	4b17      	ldr	r3, [pc, #92]	; (32e4 <port_event_handle+0xc4>)
    3286:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    328a:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    328e:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    3290:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3294:	f10d 0c08 	add.w	ip, sp, #8
    3298:	2301      	movs	r3, #1
    329a:	fa03 f202 	lsl.w	r2, r3, r2
    329e:	f81c 3005 	ldrb.w	r3, [ip, r5]
    32a2:	ea23 0302 	bic.w	r3, r3, r2
    32a6:	f80c 3005 	strb.w	r3, [ip, r5]
    *p_pin = pin_number & 0x1F;
    32aa:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    32ae:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    32b0:	2b01      	cmp	r3, #1
    32b2:	d0cd      	beq.n	3250 <port_event_handle+0x30>
        case 0: return NRF_P0;
    32b4:	4e0c      	ldr	r6, [pc, #48]	; (32e8 <port_event_handle+0xc8>)
    32b6:	e7cc      	b.n	3252 <port_event_handle+0x32>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    32b8:	3401      	adds	r4, #1
    32ba:	2c01      	cmp	r4, #1
    32bc:	d9d4      	bls.n	3268 <port_event_handle+0x48>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    32be:	4b0b      	ldr	r3, [pc, #44]	; (32ec <port_event_handle+0xcc>)
    32c0:	2200      	movs	r2, #0
    32c2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    32c6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    32ca:	a802      	add	r0, sp, #8
    32cc:	f7ff ff1a 	bl	3104 <latch_pending_read_and_check>
    32d0:	b108      	cbz	r0, 32d6 <port_event_handle+0xb6>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    32d2:	2400      	movs	r4, #0
    32d4:	e7f1      	b.n	32ba <port_event_handle+0x9a>
}
    32d6:	b004      	add	sp, #16
    32d8:	bd70      	pop	{r4, r5, r6, pc}
    32da:	bf00      	nop
    32dc:	000066e0 	.word	0x000066e0
    32e0:	50842800 	.word	0x50842800
    32e4:	20000050 	.word	0x20000050
    32e8:	50842500 	.word	0x50842500
    32ec:	5000d000 	.word	0x5000d000

000032f0 <nrfx_gpiote_input_configure>:
{
    32f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32f4:	4604      	mov	r4, r0
    32f6:	4615      	mov	r5, r2
    32f8:	461e      	mov	r6, r3
    if (p_input_config)
    32fa:	b361      	cbz	r1, 3356 <nrfx_gpiote_input_configure+0x66>
    32fc:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    32fe:	f002 fded 	bl	5edc <pin_is_task_output>
    3302:	2800      	cmp	r0, #0
    3304:	f040 8099 	bne.w	343a <nrfx_gpiote_input_configure+0x14a>
    *p_pin = pin_number & 0x1F;
    3308:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    330c:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    330e:	2b01      	cmp	r3, #1
    3310:	d043      	beq.n	339a <nrfx_gpiote_input_configure+0xaa>
        case 0: return NRF_P0;
    3312:	484e      	ldr	r0, [pc, #312]	; (344c <nrfx_gpiote_input_configure+0x15c>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3314:	f102 0380 	add.w	r3, r2, #128	; 0x80
    3318:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    331c:	2f00      	cmp	r7, #0
    331e:	d03e      	beq.n	339e <nrfx_gpiote_input_configure+0xae>
    3320:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3322:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    3326:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    332a:	2f00      	cmp	r7, #0
    332c:	d039      	beq.n	33a2 <nrfx_gpiote_input_configure+0xb2>
    332e:	7839      	ldrb	r1, [r7, #0]
    3330:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3332:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    3334:	3280      	adds	r2, #128	; 0x80
    3336:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    333a:	4a45      	ldr	r2, [pc, #276]	; (3450 <nrfx_gpiote_input_configure+0x160>)
    333c:	f104 0108 	add.w	r1, r4, #8
    3340:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3344:	f023 0302 	bic.w	r3, r3, #2
    3348:	b29b      	uxth	r3, r3
    334a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    334e:	f043 0301 	orr.w	r3, r3, #1
    3352:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3356:	b1bd      	cbz	r5, 3388 <nrfx_gpiote_input_configure+0x98>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3358:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    335a:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    335e:	4620      	mov	r0, r4
    3360:	f7ff fdd0 	bl	2f04 <pin_is_output>
    3364:	b1f8      	cbz	r0, 33a6 <nrfx_gpiote_input_configure+0xb6>
            if (use_evt)
    3366:	f1b8 0f00 	cmp.w	r8, #0
    336a:	d168      	bne.n	343e <nrfx_gpiote_input_configure+0x14e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    336c:	4a38      	ldr	r2, [pc, #224]	; (3450 <nrfx_gpiote_input_configure+0x160>)
    336e:	f104 0108 	add.w	r1, r4, #8
    3372:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3376:	f023 031c 	bic.w	r3, r3, #28
    337a:	b29b      	uxth	r3, r3
    337c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3380:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    3384:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    3388:	2e00      	cmp	r6, #0
    338a:	d05c      	beq.n	3446 <nrfx_gpiote_input_configure+0x156>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    338c:	6872      	ldr	r2, [r6, #4]
    338e:	6831      	ldr	r1, [r6, #0]
    3390:	4620      	mov	r0, r4
    3392:	f7ff fe5f 	bl	3054 <pin_handler_set>
}
    3396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
    339a:	482e      	ldr	r0, [pc, #184]	; (3454 <nrfx_gpiote_input_configure+0x164>)
    339c:	e7ba      	b.n	3314 <nrfx_gpiote_input_configure+0x24>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    339e:	2100      	movs	r1, #0
    33a0:	e7bf      	b.n	3322 <nrfx_gpiote_input_configure+0x32>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    33a2:	2100      	movs	r1, #0
    33a4:	e7c5      	b.n	3332 <nrfx_gpiote_input_configure+0x42>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    33a6:	4a2a      	ldr	r2, [pc, #168]	; (3450 <nrfx_gpiote_input_configure+0x160>)
    33a8:	f104 0108 	add.w	r1, r4, #8
    33ac:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    33b0:	f023 0320 	bic.w	r3, r3, #32
    33b4:	04db      	lsls	r3, r3, #19
    33b6:	0cdb      	lsrs	r3, r3, #19
    33b8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    33bc:	f1b8 0f00 	cmp.w	r8, #0
    33c0:	d0d4      	beq.n	336c <nrfx_gpiote_input_configure+0x7c>
                if (!edge)
    33c2:	2f03      	cmp	r7, #3
    33c4:	d83d      	bhi.n	3442 <nrfx_gpiote_input_configure+0x152>
                uint8_t ch = *p_trigger_config->p_in_channel;
    33c6:	686b      	ldr	r3, [r5, #4]
    33c8:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    33ca:	b947      	cbnz	r7, 33de <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
    33cc:	4b22      	ldr	r3, [pc, #136]	; (3458 <nrfx_gpiote_input_configure+0x168>)
    33ce:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    33d2:	2200      	movs	r2, #0
    33d4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    33d8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
    33dc:	e7c6      	b.n	336c <nrfx_gpiote_input_configure+0x7c>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    33de:	4638      	mov	r0, r7
    33e0:	f002 fd93 	bl	5f0a <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    33e4:	4b1c      	ldr	r3, [pc, #112]	; (3458 <nrfx_gpiote_input_configure+0x168>)
    33e6:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    33ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    33ee:	f021 0103 	bic.w	r1, r1, #3
    33f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    33f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    33fa:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    33fe:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    3402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3406:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    340a:	0221      	lsls	r1, r4, #8
    340c:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    3410:	0400      	lsls	r0, r0, #16
    3412:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3416:	4301      	orrs	r1, r0
    3418:	ea4c 0101 	orr.w	r1, ip, r1
    341c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3420:	036b      	lsls	r3, r5, #13
    3422:	b29b      	uxth	r3, r3
    3424:	4a0a      	ldr	r2, [pc, #40]	; (3450 <nrfx_gpiote_input_configure+0x160>)
    3426:	f104 0108 	add.w	r1, r4, #8
    342a:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    342e:	4303      	orrs	r3, r0
    3430:	f043 0320 	orr.w	r3, r3, #32
    3434:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    3438:	e798      	b.n	336c <nrfx_gpiote_input_configure+0x7c>
            return NRFX_ERROR_INVALID_PARAM;
    343a:	4808      	ldr	r0, [pc, #32]	; (345c <nrfx_gpiote_input_configure+0x16c>)
    343c:	e7ab      	b.n	3396 <nrfx_gpiote_input_configure+0xa6>
                return NRFX_ERROR_INVALID_PARAM;
    343e:	4807      	ldr	r0, [pc, #28]	; (345c <nrfx_gpiote_input_configure+0x16c>)
    3440:	e7a9      	b.n	3396 <nrfx_gpiote_input_configure+0xa6>
                    return NRFX_ERROR_INVALID_PARAM;
    3442:	4806      	ldr	r0, [pc, #24]	; (345c <nrfx_gpiote_input_configure+0x16c>)
    3444:	e7a7      	b.n	3396 <nrfx_gpiote_input_configure+0xa6>
        err = NRFX_SUCCESS;
    3446:	4806      	ldr	r0, [pc, #24]	; (3460 <nrfx_gpiote_input_configure+0x170>)
    3448:	e7a5      	b.n	3396 <nrfx_gpiote_input_configure+0xa6>
    344a:	bf00      	nop
    344c:	50842500 	.word	0x50842500
    3450:	20000050 	.word	0x20000050
    3454:	50842800 	.word	0x50842800
    3458:	5000d000 	.word	0x5000d000
    345c:	0bad0004 	.word	0x0bad0004
    3460:	0bad0000 	.word	0x0bad0000

00003464 <nrfx_gpiote_output_configure>:
{
    3464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3466:	4604      	mov	r4, r0
    3468:	4615      	mov	r5, r2
    if (p_config)
    346a:	2900      	cmp	r1, #0
    346c:	d053      	beq.n	3516 <nrfx_gpiote_output_configure+0xb2>
    346e:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3470:	f002 fd43 	bl	5efa <pin_is_input>
    3474:	b128      	cbz	r0, 3482 <nrfx_gpiote_output_configure+0x1e>
    3476:	4620      	mov	r0, r4
    3478:	f7ff fd2e 	bl	2ed8 <pin_in_use_by_te>
    347c:	2800      	cmp	r0, #0
    347e:	f040 80a2 	bne.w	35c6 <nrfx_gpiote_output_configure+0x162>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3482:	4620      	mov	r0, r4
    3484:	f7ff fd32 	bl	2eec <pin_has_trigger>
    3488:	b118      	cbz	r0, 3492 <nrfx_gpiote_output_configure+0x2e>
    348a:	7873      	ldrb	r3, [r6, #1]
    348c:	2b01      	cmp	r3, #1
    348e:	f000 809c 	beq.w	35ca <nrfx_gpiote_output_configure+0x166>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3492:	f106 0c01 	add.w	ip, r6, #1
    3496:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
    3498:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    349c:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    349e:	2b01      	cmp	r3, #1
    34a0:	d057      	beq.n	3552 <nrfx_gpiote_output_configure+0xee>
        case 0: return NRF_P0;
    34a2:	494d      	ldr	r1, [pc, #308]	; (35d8 <nrfx_gpiote_output_configure+0x174>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    34a4:	f102 0380 	add.w	r3, r2, #128	; 0x80
    34a8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    34ac:	f1bc 0f00 	cmp.w	ip, #0
    34b0:	d051      	beq.n	3556 <nrfx_gpiote_output_configure+0xf2>
    34b2:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    34b4:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    34b8:	2f00      	cmp	r7, #0
    34ba:	d04e      	beq.n	355a <nrfx_gpiote_output_configure+0xf6>
    34bc:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    34c0:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    34c4:	2e00      	cmp	r6, #0
    34c6:	d04b      	beq.n	3560 <nrfx_gpiote_output_configure+0xfc>
    34c8:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    34cc:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
    34d0:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    34d4:	f1bc 0f00 	cmp.w	ip, #0
    34d8:	d045      	beq.n	3566 <nrfx_gpiote_output_configure+0x102>
    34da:	7873      	ldrb	r3, [r6, #1]
    34dc:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    34de:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    34e2:	2f00      	cmp	r7, #0
    34e4:	d041      	beq.n	356a <nrfx_gpiote_output_configure+0x106>
    34e6:	f896 c002 	ldrb.w	ip, [r6, #2]
    34ea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    34ee:	ea43 030c 	orr.w	r3, r3, ip
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    34f2:	2e00      	cmp	r6, #0
    34f4:	d03c      	beq.n	3570 <nrfx_gpiote_output_configure+0x10c>
    34f6:	7836      	ldrb	r6, [r6, #0]
    34f8:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    34fa:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    34fc:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    34fe:	3280      	adds	r2, #128	; 0x80
    3500:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3504:	4a35      	ldr	r2, [pc, #212]	; (35dc <nrfx_gpiote_output_configure+0x178>)
    3506:	f104 0108 	add.w	r1, r4, #8
    350a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    350e:	f043 0303 	orr.w	r3, r3, #3
    3512:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    3516:	2d00      	cmp	r5, #0
    3518:	d059      	beq.n	35ce <nrfx_gpiote_output_configure+0x16a>
        if (pin_is_input(pin))
    351a:	4620      	mov	r0, r4
    351c:	f002 fced 	bl	5efa <pin_is_input>
    3520:	2800      	cmp	r0, #0
    3522:	d156      	bne.n	35d2 <nrfx_gpiote_output_configure+0x16e>
        uint32_t ch = p_task_config->task_ch;
    3524:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    3526:	4a2e      	ldr	r2, [pc, #184]	; (35e0 <nrfx_gpiote_output_configure+0x17c>)
    3528:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    352c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    p_reg->CONFIG[idx] = 0;
    3530:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3534:	4929      	ldr	r1, [pc, #164]	; (35dc <nrfx_gpiote_output_configure+0x178>)
    3536:	f104 0008 	add.w	r0, r4, #8
    353a:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    353e:	f022 0220 	bic.w	r2, r2, #32
    3542:	04d2      	lsls	r2, r2, #19
    3544:	0cd2      	lsrs	r2, r2, #19
    3546:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    354a:	786a      	ldrb	r2, [r5, #1]
    354c:	b992      	cbnz	r2, 3574 <nrfx_gpiote_output_configure+0x110>
    return NRFX_SUCCESS;
    354e:	4825      	ldr	r0, [pc, #148]	; (35e4 <nrfx_gpiote_output_configure+0x180>)
}
    3550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    3552:	4925      	ldr	r1, [pc, #148]	; (35e8 <nrfx_gpiote_output_configure+0x184>)
    3554:	e7a6      	b.n	34a4 <nrfx_gpiote_output_configure+0x40>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3556:	2300      	movs	r3, #0
    3558:	e7ac      	b.n	34b4 <nrfx_gpiote_output_configure+0x50>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    355a:	f04f 0e00 	mov.w	lr, #0
    355e:	e7af      	b.n	34c0 <nrfx_gpiote_output_configure+0x5c>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    3560:	f04f 0e00 	mov.w	lr, #0
    3564:	e7b2      	b.n	34cc <nrfx_gpiote_output_configure+0x68>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3566:	2300      	movs	r3, #0
    3568:	e7b9      	b.n	34de <nrfx_gpiote_output_configure+0x7a>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    356a:	f04f 0c00 	mov.w	ip, #0
    356e:	e7be      	b.n	34ee <nrfx_gpiote_output_configure+0x8a>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3570:	2600      	movs	r6, #0
    3572:	e7c2      	b.n	34fa <nrfx_gpiote_output_configure+0x96>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3574:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3576:	481a      	ldr	r0, [pc, #104]	; (35e0 <nrfx_gpiote_output_configure+0x17c>)
    3578:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    357c:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    3580:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    3584:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    3588:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    358c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    3590:	0221      	lsls	r1, r4, #8
    3592:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3596:	0412      	lsls	r2, r2, #16
    3598:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    359c:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    359e:	0539      	lsls	r1, r7, #20
    35a0:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    35a4:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    35a6:	4332      	orrs	r2, r6
    35a8:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    35ac:	035b      	lsls	r3, r3, #13
    35ae:	b29b      	uxth	r3, r3
    35b0:	4a0a      	ldr	r2, [pc, #40]	; (35dc <nrfx_gpiote_output_configure+0x178>)
    35b2:	3408      	adds	r4, #8
    35b4:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    35b8:	430b      	orrs	r3, r1
    35ba:	f043 0320 	orr.w	r3, r3, #32
    35be:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    35c2:	4808      	ldr	r0, [pc, #32]	; (35e4 <nrfx_gpiote_output_configure+0x180>)
    35c4:	e7c4      	b.n	3550 <nrfx_gpiote_output_configure+0xec>
    35c6:	4809      	ldr	r0, [pc, #36]	; (35ec <nrfx_gpiote_output_configure+0x188>)
    35c8:	e7c2      	b.n	3550 <nrfx_gpiote_output_configure+0xec>
    35ca:	4808      	ldr	r0, [pc, #32]	; (35ec <nrfx_gpiote_output_configure+0x188>)
    35cc:	e7c0      	b.n	3550 <nrfx_gpiote_output_configure+0xec>
    35ce:	4805      	ldr	r0, [pc, #20]	; (35e4 <nrfx_gpiote_output_configure+0x180>)
    35d0:	e7be      	b.n	3550 <nrfx_gpiote_output_configure+0xec>
            return NRFX_ERROR_INVALID_PARAM;
    35d2:	4806      	ldr	r0, [pc, #24]	; (35ec <nrfx_gpiote_output_configure+0x188>)
    35d4:	e7bc      	b.n	3550 <nrfx_gpiote_output_configure+0xec>
    35d6:	bf00      	nop
    35d8:	50842500 	.word	0x50842500
    35dc:	20000050 	.word	0x20000050
    35e0:	5000d000 	.word	0x5000d000
    35e4:	0bad0000 	.word	0x0bad0000
    35e8:	50842800 	.word	0x50842800
    35ec:	0bad0004 	.word	0x0bad0004

000035f0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    35f0:	4b01      	ldr	r3, [pc, #4]	; (35f8 <nrfx_gpiote_global_callback_set+0x8>)
    35f2:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    35f4:	60d9      	str	r1, [r3, #12]
}
    35f6:	4770      	bx	lr
    35f8:	20000050 	.word	0x20000050

000035fc <nrfx_gpiote_channel_get>:
{
    35fc:	b538      	push	{r3, r4, r5, lr}
    35fe:	4604      	mov	r4, r0
    3600:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    3602:	f7ff fc69 	bl	2ed8 <pin_in_use_by_te>
    3606:	b140      	cbz	r0, 361a <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3608:	f104 0008 	add.w	r0, r4, #8
    360c:	4b04      	ldr	r3, [pc, #16]	; (3620 <nrfx_gpiote_channel_get+0x24>)
    360e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    3612:	0b5b      	lsrs	r3, r3, #13
    3614:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    3616:	4803      	ldr	r0, [pc, #12]	; (3624 <nrfx_gpiote_channel_get+0x28>)
}
    3618:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    361a:	4803      	ldr	r0, [pc, #12]	; (3628 <nrfx_gpiote_channel_get+0x2c>)
    361c:	e7fc      	b.n	3618 <nrfx_gpiote_channel_get+0x1c>
    361e:	bf00      	nop
    3620:	20000050 	.word	0x20000050
    3624:	0bad0000 	.word	0x0bad0000
    3628:	0bad0004 	.word	0x0bad0004

0000362c <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    362c:	4b10      	ldr	r3, [pc, #64]	; (3670 <nrfx_gpiote_init+0x44>)
    362e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3632:	b10b      	cbz	r3, 3638 <nrfx_gpiote_init+0xc>
        return err_code;
    3634:	480f      	ldr	r0, [pc, #60]	; (3674 <nrfx_gpiote_init+0x48>)
}
    3636:	4770      	bx	lr
{
    3638:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    363a:	4c0d      	ldr	r4, [pc, #52]	; (3670 <nrfx_gpiote_init+0x44>)
    363c:	2260      	movs	r2, #96	; 0x60
    363e:	2100      	movs	r1, #0
    3640:	f104 0010 	add.w	r0, r4, #16
    3644:	f001 fee3 	bl	540e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3648:	200d      	movs	r0, #13
    364a:	f7fd ff19 	bl	1480 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    364e:	4b0a      	ldr	r3, [pc, #40]	; (3678 <nrfx_gpiote_init+0x4c>)
    3650:	2200      	movs	r2, #0
    3652:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3656:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    365a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    365e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3662:	2301      	movs	r3, #1
    3664:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3668:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    366a:	4804      	ldr	r0, [pc, #16]	; (367c <nrfx_gpiote_init+0x50>)
}
    366c:	bd10      	pop	{r4, pc}
    366e:	bf00      	nop
    3670:	20000050 	.word	0x20000050
    3674:	0bad0005 	.word	0x0bad0005
    3678:	5000d000 	.word	0x5000d000
    367c:	0bad0000 	.word	0x0bad0000

00003680 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3680:	4b03      	ldr	r3, [pc, #12]	; (3690 <nrfx_gpiote_is_init+0x10>)
    3682:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3686:	3800      	subs	r0, #0
    3688:	bf18      	it	ne
    368a:	2001      	movne	r0, #1
    368c:	4770      	bx	lr
    368e:	bf00      	nop
    3690:	20000050 	.word	0x20000050

00003694 <nrfx_gpiote_channel_free>:
{
    3694:	b508      	push	{r3, lr}
    3696:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3698:	4801      	ldr	r0, [pc, #4]	; (36a0 <nrfx_gpiote_channel_free+0xc>)
    369a:	f7ff fae3 	bl	2c64 <nrfx_flag32_free>
}
    369e:	bd08      	pop	{r3, pc}
    36a0:	200000c0 	.word	0x200000c0

000036a4 <nrfx_gpiote_channel_alloc>:
{
    36a4:	b508      	push	{r3, lr}
    36a6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    36a8:	4801      	ldr	r0, [pc, #4]	; (36b0 <nrfx_gpiote_channel_alloc+0xc>)
    36aa:	f7ff fab7 	bl	2c1c <nrfx_flag32_alloc>
}
    36ae:	bd08      	pop	{r3, pc}
    36b0:	200000c0 	.word	0x200000c0

000036b4 <nrfx_gpiote_trigger_enable>:
{
    36b4:	b538      	push	{r3, r4, r5, lr}
    36b6:	4604      	mov	r4, r0
    36b8:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    36ba:	f7ff fc0d 	bl	2ed8 <pin_in_use_by_te>
    36be:	b308      	cbz	r0, 3704 <nrfx_gpiote_trigger_enable+0x50>
    36c0:	4620      	mov	r0, r4
    36c2:	f002 fc1a 	bl	5efa <pin_is_input>
    36c6:	b1e8      	cbz	r0, 3704 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    36c8:	4620      	mov	r0, r4
    36ca:	f7ff fc25 	bl	2f18 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    36ce:	0083      	lsls	r3, r0, #2
    36d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    36d4:	b29b      	uxth	r3, r3
    36d6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    36da:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    36de:	2200      	movs	r2, #0
    36e0:	601a      	str	r2, [r3, #0]
    36e2:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    36e4:	4a20      	ldr	r2, [pc, #128]	; (3768 <nrfx_gpiote_trigger_enable+0xb4>)
    36e6:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    36ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    36ee:	f043 0301 	orr.w	r3, r3, #1
    36f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    36f6:	b37d      	cbz	r5, 3758 <nrfx_gpiote_trigger_enable+0xa4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    36f8:	2301      	movs	r3, #1
    36fa:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    36fe:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    3702:	e029      	b.n	3758 <nrfx_gpiote_trigger_enable+0xa4>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3704:	f104 0308 	add.w	r3, r4, #8
    3708:	4a18      	ldr	r2, [pc, #96]	; (376c <nrfx_gpiote_trigger_enable+0xb8>)
    370a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    370e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3712:	2b04      	cmp	r3, #4
    3714:	d010      	beq.n	3738 <nrfx_gpiote_trigger_enable+0x84>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3716:	2b05      	cmp	r3, #5
    3718:	d01f      	beq.n	375a <nrfx_gpiote_trigger_enable+0xa6>
    *p_pin = pin_number & 0x1F;
    371a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    371e:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3720:	2b01      	cmp	r3, #1
    3722:	d007      	beq.n	3734 <nrfx_gpiote_trigger_enable+0x80>
        case 0: return NRF_P0;
    3724:	4b12      	ldr	r3, [pc, #72]	; (3770 <nrfx_gpiote_trigger_enable+0xbc>)
    return p_reg->IN;
    3726:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3728:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    372a:	f013 0f01 	tst.w	r3, #1
    372e:	d016      	beq.n	375e <nrfx_gpiote_trigger_enable+0xaa>
    3730:	2003      	movs	r0, #3
    3732:	e002      	b.n	373a <nrfx_gpiote_trigger_enable+0x86>
        case 1: return NRF_P1;
    3734:	4b0f      	ldr	r3, [pc, #60]	; (3774 <nrfx_gpiote_trigger_enable+0xc0>)
    3736:	e7f6      	b.n	3726 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3738:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    373a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    373e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3740:	2c01      	cmp	r4, #1
    3742:	d00e      	beq.n	3762 <nrfx_gpiote_trigger_enable+0xae>
        case 0: return NRF_P0;
    3744:	490a      	ldr	r1, [pc, #40]	; (3770 <nrfx_gpiote_trigger_enable+0xbc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3746:	3280      	adds	r2, #128	; 0x80
    3748:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    374c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3750:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    3754:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3758:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    375a:	2002      	movs	r0, #2
    375c:	e7ed      	b.n	373a <nrfx_gpiote_trigger_enable+0x86>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    375e:	2002      	movs	r0, #2
    3760:	e7eb      	b.n	373a <nrfx_gpiote_trigger_enable+0x86>
        case 1: return NRF_P1;
    3762:	4904      	ldr	r1, [pc, #16]	; (3774 <nrfx_gpiote_trigger_enable+0xc0>)
    3764:	e7ef      	b.n	3746 <nrfx_gpiote_trigger_enable+0x92>
    3766:	bf00      	nop
    3768:	5000d000 	.word	0x5000d000
    376c:	20000050 	.word	0x20000050
    3770:	50842500 	.word	0x50842500
    3774:	50842800 	.word	0x50842800

00003778 <nrfx_gpiote_trigger_disable>:
{
    3778:	b510      	push	{r4, lr}
    377a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    377c:	f7ff fbac 	bl	2ed8 <pin_in_use_by_te>
    3780:	b1a0      	cbz	r0, 37ac <nrfx_gpiote_trigger_disable+0x34>
    3782:	4620      	mov	r0, r4
    3784:	f002 fbb9 	bl	5efa <pin_is_input>
    3788:	b180      	cbz	r0, 37ac <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    378a:	4620      	mov	r0, r4
    378c:	f7ff fbc4 	bl	2f18 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3790:	2201      	movs	r2, #1
    3792:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    3794:	4b0d      	ldr	r3, [pc, #52]	; (37cc <nrfx_gpiote_trigger_disable+0x54>)
    3796:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    379a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    379e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    37a2:	f022 0203 	bic.w	r2, r2, #3
    37a6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    37aa:	e00c      	b.n	37c6 <nrfx_gpiote_trigger_disable+0x4e>
    *p_pin = pin_number & 0x1F;
    37ac:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    37b0:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    37b2:	2c01      	cmp	r4, #1
    37b4:	d008      	beq.n	37c8 <nrfx_gpiote_trigger_disable+0x50>
        case 0: return NRF_P0;
    37b6:	4906      	ldr	r1, [pc, #24]	; (37d0 <nrfx_gpiote_trigger_disable+0x58>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    37b8:	3380      	adds	r3, #128	; 0x80
    37ba:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    37be:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    37c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    37c6:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    37c8:	4902      	ldr	r1, [pc, #8]	; (37d4 <nrfx_gpiote_trigger_disable+0x5c>)
    37ca:	e7f5      	b.n	37b8 <nrfx_gpiote_trigger_disable+0x40>
    37cc:	5000d000 	.word	0x5000d000
    37d0:	50842500 	.word	0x50842500
    37d4:	50842800 	.word	0x50842800

000037d8 <nrfx_gpiote_pin_uninit>:
{
    37d8:	b510      	push	{r4, lr}
    37da:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    37dc:	f7ff fb72 	bl	2ec4 <pin_in_use>
    37e0:	b908      	cbnz	r0, 37e6 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    37e2:	480d      	ldr	r0, [pc, #52]	; (3818 <nrfx_gpiote_pin_uninit+0x40>)
}
    37e4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    37e6:	4620      	mov	r0, r4
    37e8:	f7ff ffc6 	bl	3778 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    37ec:	4620      	mov	r0, r4
    37ee:	f7ff fc13 	bl	3018 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    37f2:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    37f6:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    37f8:	2c01      	cmp	r4, #1
    37fa:	d00b      	beq.n	3814 <nrfx_gpiote_pin_uninit+0x3c>
        case 0: return NRF_P0;
    37fc:	4907      	ldr	r1, [pc, #28]	; (381c <nrfx_gpiote_pin_uninit+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    37fe:	3280      	adds	r2, #128	; 0x80
    3800:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    3804:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3808:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    380c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    return NRFX_SUCCESS;
    3810:	4803      	ldr	r0, [pc, #12]	; (3820 <nrfx_gpiote_pin_uninit+0x48>)
}
    3812:	e7e7      	b.n	37e4 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    3814:	4903      	ldr	r1, [pc, #12]	; (3824 <nrfx_gpiote_pin_uninit+0x4c>)
    3816:	e7f2      	b.n	37fe <nrfx_gpiote_pin_uninit+0x26>
    3818:	0bad0004 	.word	0x0bad0004
    381c:	50842500 	.word	0x50842500
    3820:	0bad0000 	.word	0x0bad0000
    3824:	50842800 	.word	0x50842800

00003828 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    3828:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    382a:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    382c:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3830:	2100      	movs	r1, #0
    uint32_t status = 0;
    3832:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3834:	e003      	b.n	383e <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    3836:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    3838:	3304      	adds	r3, #4
    383a:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    383c:	3101      	adds	r1, #1
    383e:	2907      	cmp	r1, #7
    3840:	d814      	bhi.n	386c <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3842:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    3846:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    384a:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    384c:	2a00      	cmp	r2, #0
    384e:	d0f2      	beq.n	3836 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    3850:	4a0c      	ldr	r2, [pc, #48]	; (3884 <nrfx_gpiote_irq_handler+0x5c>)
    3852:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3856:	4210      	tst	r0, r2
    3858:	d0ed      	beq.n	3836 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    385a:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    385e:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3862:	2500      	movs	r5, #0
    3864:	6015      	str	r5, [r2, #0]
    3866:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    3868:	4304      	orrs	r4, r0
    386a:	e7e4      	b.n	3836 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    386c:	4b05      	ldr	r3, [pc, #20]	; (3884 <nrfx_gpiote_irq_handler+0x5c>)
    386e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3872:	b91b      	cbnz	r3, 387c <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    3874:	4620      	mov	r0, r4
    3876:	f7ff fc23 	bl	30c0 <gpiote_evt_handle>
}
    387a:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    387c:	f7ff fcd0 	bl	3220 <port_event_handle>
    3880:	e7f8      	b.n	3874 <nrfx_gpiote_irq_handler+0x4c>
    3882:	bf00      	nop
    3884:	5000d000 	.word	0x5000d000

00003888 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    3888:	4b03      	ldr	r3, [pc, #12]	; (3898 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    388a:	e000      	b.n	388e <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    388c:	3318      	adds	r3, #24
	while (dev < __device_end) {
    388e:	4a03      	ldr	r2, [pc, #12]	; (389c <z_device_state_init+0x14>)
    3890:	4293      	cmp	r3, r2
    3892:	d3fb      	bcc.n	388c <z_device_state_init+0x4>
	}
}
    3894:	4770      	bx	lr
    3896:	bf00      	nop
    3898:	000063fc 	.word	0x000063fc
    389c:	0000645c 	.word	0x0000645c

000038a0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    38a0:	b570      	push	{r4, r5, r6, lr}
    38a2:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    38a4:	4b11      	ldr	r3, [pc, #68]	; (38ec <z_sys_init_run_level+0x4c>)
    38a6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    38aa:	e009      	b.n	38c0 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    38ac:	4240      	negs	r0, r0
    38ae:	e017      	b.n	38e0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    38b0:	68eb      	ldr	r3, [r5, #12]
    38b2:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    38b4:	68ea      	ldr	r2, [r5, #12]
    38b6:	7853      	ldrb	r3, [r2, #1]
    38b8:	f043 0301 	orr.w	r3, r3, #1
    38bc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    38be:	3408      	adds	r4, #8
    38c0:	1c73      	adds	r3, r6, #1
    38c2:	4a0a      	ldr	r2, [pc, #40]	; (38ec <z_sys_init_run_level+0x4c>)
    38c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    38c8:	42a3      	cmp	r3, r4
    38ca:	d90d      	bls.n	38e8 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    38cc:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    38ce:	6823      	ldr	r3, [r4, #0]
    38d0:	4628      	mov	r0, r5
    38d2:	4798      	blx	r3
		if (dev != NULL) {
    38d4:	2d00      	cmp	r5, #0
    38d6:	d0f2      	beq.n	38be <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    38d8:	2800      	cmp	r0, #0
    38da:	d0eb      	beq.n	38b4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    38dc:	2800      	cmp	r0, #0
    38de:	dbe5      	blt.n	38ac <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    38e0:	28ff      	cmp	r0, #255	; 0xff
    38e2:	dde5      	ble.n	38b0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    38e4:	20ff      	movs	r0, #255	; 0xff
    38e6:	e7e3      	b.n	38b0 <z_sys_init_run_level+0x10>
		}
	}
}
    38e8:	bd70      	pop	{r4, r5, r6, pc}
    38ea:	bf00      	nop
    38ec:	00006918 	.word	0x00006918

000038f0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    38f0:	b510      	push	{r4, lr}
    38f2:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    38f4:	4c11      	ldr	r4, [pc, #68]	; (393c <init_idle_thread+0x4c>)
    38f6:	23b0      	movs	r3, #176	; 0xb0
    38f8:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    38fc:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3900:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3904:	4b0e      	ldr	r3, [pc, #56]	; (3940 <init_idle_thread+0x50>)
    3906:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
    390a:	4b0e      	ldr	r3, [pc, #56]	; (3944 <init_idle_thread+0x54>)
    390c:	9305      	str	r3, [sp, #20]
    390e:	2301      	movs	r3, #1
    3910:	9304      	str	r3, [sp, #16]
    3912:	230f      	movs	r3, #15
    3914:	9303      	str	r3, [sp, #12]
    3916:	2300      	movs	r3, #0
    3918:	9302      	str	r3, [sp, #8]
    391a:	9301      	str	r3, [sp, #4]
    391c:	9000      	str	r0, [sp, #0]
    391e:	4b0a      	ldr	r3, [pc, #40]	; (3948 <init_idle_thread+0x58>)
    3920:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3924:	4909      	ldr	r1, [pc, #36]	; (394c <init_idle_thread+0x5c>)
    3926:	eb01 118c 	add.w	r1, r1, ip, lsl #6
    392a:	4620      	mov	r0, r4
    392c:	f000 f948 	bl	3bc0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3930:	7b63      	ldrb	r3, [r4, #13]
    3932:	f023 0304 	bic.w	r3, r3, #4
    3936:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3938:	b006      	add	sp, #24
    393a:	bd10      	pop	{r4, pc}
    393c:	200001b8 	.word	0x200001b8
    3940:	2000095c 	.word	0x2000095c
    3944:	00006930 	.word	0x00006930
    3948:	00003d1d 	.word	0x00003d1d
    394c:	20000f78 	.word	0x20000f78

00003950 <bg_thread_main>:
{
    3950:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3952:	4b0a      	ldr	r3, [pc, #40]	; (397c <bg_thread_main+0x2c>)
    3954:	2201      	movs	r2, #1
    3956:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3958:	2002      	movs	r0, #2
    395a:	f7ff ffa1 	bl	38a0 <z_sys_init_run_level>
	boot_banner();
    395e:	f001 f897 	bl	4a90 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3962:	2003      	movs	r0, #3
    3964:	f7ff ff9c 	bl	38a0 <z_sys_init_run_level>
	z_init_static_threads();
    3968:	f000 f98e 	bl	3c88 <z_init_static_threads>
	main();
    396c:	f7fc fd5e 	bl	42c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3970:	4a03      	ldr	r2, [pc, #12]	; (3980 <bg_thread_main+0x30>)
    3972:	7b13      	ldrb	r3, [r2, #12]
    3974:	f023 0301 	bic.w	r3, r3, #1
    3978:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    397a:	bd08      	pop	{r3, pc}
    397c:	20000b73 	.word	0x20000b73
    3980:	20000268 	.word	0x20000268

00003984 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    3984:	b508      	push	{r3, lr}
    3986:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3988:	4a01      	ldr	r2, [pc, #4]	; (3990 <switch_to_main_thread+0xc>)
    398a:	4802      	ldr	r0, [pc, #8]	; (3994 <switch_to_main_thread+0x10>)
    398c:	f7fd fe46 	bl	161c <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3990:	00003951 	.word	0x00003951
    3994:	20000268 	.word	0x20000268

00003998 <z_bss_zero>:
{
    3998:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    399a:	4803      	ldr	r0, [pc, #12]	; (39a8 <z_bss_zero+0x10>)
    399c:	4a03      	ldr	r2, [pc, #12]	; (39ac <z_bss_zero+0x14>)
    399e:	1a12      	subs	r2, r2, r0
    39a0:	2100      	movs	r1, #0
    39a2:	f002 fadf 	bl	5f64 <z_early_memset>
}
    39a6:	bd08      	pop	{r3, pc}
    39a8:	20000198 	.word	0x20000198
    39ac:	20000b74 	.word	0x20000b74

000039b0 <z_init_cpu>:
{
    39b0:	b510      	push	{r4, lr}
    39b2:	4604      	mov	r4, r0
	init_idle_thread(id);
    39b4:	f7ff ff9c 	bl	38f0 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    39b8:	490a      	ldr	r1, [pc, #40]	; (39e4 <z_init_cpu+0x34>)
    39ba:	23b0      	movs	r3, #176	; 0xb0
    39bc:	fb03 1104 	mla	r1, r3, r4, r1
    39c0:	4a09      	ldr	r2, [pc, #36]	; (39e8 <z_init_cpu+0x38>)
    39c2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    39c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    39ca:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    39cc:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    39ce:	4b07      	ldr	r3, [pc, #28]	; (39ec <z_init_cpu+0x3c>)
    39d0:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    39d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
    39d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    39dc:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    39e0:	6063      	str	r3, [r4, #4]
}
    39e2:	bd10      	pop	{r4, pc}
    39e4:	200001b8 	.word	0x200001b8
    39e8:	2000095c 	.word	0x2000095c
    39ec:	200010b8 	.word	0x200010b8

000039f0 <prepare_multithreading>:
{
    39f0:	b570      	push	{r4, r5, r6, lr}
    39f2:	b086      	sub	sp, #24
	z_sched_init();
    39f4:	f000 fdd6 	bl	45a4 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    39f8:	4d10      	ldr	r5, [pc, #64]	; (3a3c <prepare_multithreading+0x4c>)
    39fa:	4b11      	ldr	r3, [pc, #68]	; (3a40 <prepare_multithreading+0x50>)
    39fc:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    39fe:	4b11      	ldr	r3, [pc, #68]	; (3a44 <prepare_multithreading+0x54>)
    3a00:	9305      	str	r3, [sp, #20]
    3a02:	2301      	movs	r3, #1
    3a04:	9304      	str	r3, [sp, #16]
    3a06:	2400      	movs	r4, #0
    3a08:	9403      	str	r4, [sp, #12]
    3a0a:	9402      	str	r4, [sp, #8]
    3a0c:	9401      	str	r4, [sp, #4]
    3a0e:	9400      	str	r4, [sp, #0]
    3a10:	4b0d      	ldr	r3, [pc, #52]	; (3a48 <prepare_multithreading+0x58>)
    3a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3a16:	490d      	ldr	r1, [pc, #52]	; (3a4c <prepare_multithreading+0x5c>)
    3a18:	4628      	mov	r0, r5
    3a1a:	f000 f8d1 	bl	3bc0 <z_setup_new_thread>
    3a1e:	4606      	mov	r6, r0
    3a20:	7b6b      	ldrb	r3, [r5, #13]
    3a22:	f023 0304 	bic.w	r3, r3, #4
    3a26:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    3a28:	4628      	mov	r0, r5
    3a2a:	f002 fb6a 	bl	6102 <z_ready_thread>
	z_init_cpu(0);
    3a2e:	4620      	mov	r0, r4
    3a30:	f7ff ffbe 	bl	39b0 <z_init_cpu>
}
    3a34:	4630      	mov	r0, r6
    3a36:	b006      	add	sp, #24
    3a38:	bd70      	pop	{r4, r5, r6, pc}
    3a3a:	bf00      	nop
    3a3c:	20000268 	.word	0x20000268
    3a40:	2000095c 	.word	0x2000095c
    3a44:	00006938 	.word	0x00006938
    3a48:	00003951 	.word	0x00003951
    3a4c:	20000b78 	.word	0x20000b78

00003a50 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3a50:	b500      	push	{lr}
    3a52:	b0ad      	sub	sp, #180	; 0xb4
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3a54:	4b1d      	ldr	r3, [pc, #116]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
	uint32_t msp =
    3a56:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3a5a:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3a5e:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a62:	4c1b      	ldr	r4, [pc, #108]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
    3a64:	23e0      	movs	r3, #224	; 0xe0
    3a66:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3a6a:	2500      	movs	r5, #0
    3a6c:	77e5      	strb	r5, [r4, #31]
    3a6e:	7625      	strb	r5, [r4, #24]
    3a70:	7665      	strb	r5, [r4, #25]
    3a72:	76a5      	strb	r5, [r4, #26]
    3a74:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3a7a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3a7e:	6263      	str	r3, [r4, #36]	; 0x24
    3a80:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3a84:	f7fd ff10 	bl	18a8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3a88:	f7fd fcdc 	bl	1444 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3a8c:	f04f 33ff 	mov.w	r3, #4294967295
    3a90:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3a92:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3a94:	f7fe f95c 	bl	1d50 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3a98:	f7fd ffd4 	bl	1a44 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    3a9c:	2401      	movs	r4, #1
    3a9e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3aa2:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3aa6:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    3aa8:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    3aaa:	9529      	str	r5, [sp, #164]	; 0xa4
#endif

	_current_cpu->current = dummy_thread;
    3aac:	4b09      	ldr	r3, [pc, #36]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3aae:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3ab2:	f7ff fee9 	bl	3888 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3ab6:	4628      	mov	r0, r5
    3ab8:	f7ff fef2 	bl	38a0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3abc:	4620      	mov	r0, r4
    3abe:	f7ff feef 	bl	38a0 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3ac2:	f7ff ff95 	bl	39f0 <prepare_multithreading>
    3ac6:	f7ff ff5d 	bl	3984 <switch_to_main_thread>
    3aca:	bf00      	nop
    3acc:	200010b8 	.word	0x200010b8
    3ad0:	e000ed00 	.word	0xe000ed00
    3ad4:	2000095c 	.word	0x2000095c

00003ad8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    3ad8:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3ada:	4c06      	ldr	r4, [pc, #24]	; (3af4 <init_mem_slab_module+0x1c>)
	int rc = 0;
    3adc:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3ade:	e000      	b.n	3ae2 <init_mem_slab_module+0xa>
    3ae0:	341c      	adds	r4, #28
    3ae2:	4b05      	ldr	r3, [pc, #20]	; (3af8 <init_mem_slab_module+0x20>)
    3ae4:	429c      	cmp	r4, r3
    3ae6:	d204      	bcs.n	3af2 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    3ae8:	4620      	mov	r0, r4
    3aea:	f002 fa43 	bl	5f74 <create_free_list>
		if (rc < 0) {
    3aee:	2800      	cmp	r0, #0
    3af0:	daf6      	bge.n	3ae0 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    3af2:	bd10      	pop	{r4, pc}
    3af4:	20000144 	.word	0x20000144
    3af8:	20000144 	.word	0x20000144

00003afc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3afc:	b530      	push	{r4, r5, lr}
    3afe:	b083      	sub	sp, #12
    3b00:	460d      	mov	r5, r1
	__asm__ volatile(
    3b02:	f04f 0420 	mov.w	r4, #32
    3b06:	f3ef 8111 	mrs	r1, BASEPRI
    3b0a:	f384 8812 	msr	BASEPRI_MAX, r4
    3b0e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3b12:	6944      	ldr	r4, [r0, #20]
    3b14:	b16c      	cbz	r4, 3b32 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    3b16:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    3b18:	6943      	ldr	r3, [r0, #20]
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3b1e:	6983      	ldr	r3, [r0, #24]
    3b20:	3301      	adds	r3, #1
    3b22:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3b24:	2000      	movs	r0, #0
	__asm__ volatile(
    3b26:	f381 8811 	msr	BASEPRI, r1
    3b2a:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    3b2e:	b003      	add	sp, #12
    3b30:	bd30      	pop	{r4, r5, pc}
    3b32:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3b36:	ea53 0402 	orrs.w	r4, r3, r2
    3b3a:	d104      	bne.n	3b46 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    3b3c:	2300      	movs	r3, #0
    3b3e:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    3b40:	f06f 000b 	mvn.w	r0, #11
    3b44:	e7ef      	b.n	3b26 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3b46:	9200      	str	r2, [sp, #0]
    3b48:	9301      	str	r3, [sp, #4]
    3b4a:	4602      	mov	r2, r0
    3b4c:	4660      	mov	r0, ip
    3b4e:	f000 fbfd 	bl	434c <z_pend_curr>
		if (result == 0) {
    3b52:	2800      	cmp	r0, #0
    3b54:	d1eb      	bne.n	3b2e <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    3b56:	4b02      	ldr	r3, [pc, #8]	; (3b60 <k_mem_slab_alloc+0x64>)
    3b58:	689b      	ldr	r3, [r3, #8]
    3b5a:	695b      	ldr	r3, [r3, #20]
    3b5c:	602b      	str	r3, [r5, #0]
		return result;
    3b5e:	e7e6      	b.n	3b2e <k_mem_slab_alloc+0x32>
    3b60:	2000095c 	.word	0x2000095c

00003b64 <z_thread_monitor_exit>:
	__asm__ volatile(
    3b64:	f04f 0320 	mov.w	r3, #32
    3b68:	f3ef 8111 	mrs	r1, BASEPRI
    3b6c:	f383 8812 	msr	BASEPRI_MAX, r3
    3b70:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    3b74:	4b0a      	ldr	r3, [pc, #40]	; (3ba0 <z_thread_monitor_exit+0x3c>)
    3b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b78:	4283      	cmp	r3, r0
    3b7a:	d104      	bne.n	3b86 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    3b7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3b7e:	4b08      	ldr	r3, [pc, #32]	; (3ba0 <z_thread_monitor_exit+0x3c>)
    3b80:	629a      	str	r2, [r3, #40]	; 0x28
    3b82:	e007      	b.n	3b94 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    3b84:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    3b86:	b113      	cbz	r3, 3b8e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    3b88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    3b8a:	4282      	cmp	r2, r0
    3b8c:	d1fa      	bne.n	3b84 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    3b8e:	b10b      	cbz	r3, 3b94 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3b90:	6f02      	ldr	r2, [r0, #112]	; 0x70
    3b92:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    3b94:	f381 8811 	msr	BASEPRI, r1
    3b98:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    3b9c:	4770      	bx	lr
    3b9e:	bf00      	nop
    3ba0:	2000095c 	.word	0x2000095c

00003ba4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    3ba4:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3ba6:	ea53 0102 	orrs.w	r1, r3, r2
    3baa:	d102      	bne.n	3bb2 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    3bac:	f002 fa45 	bl	603a <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    3bb0:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3bb2:	4902      	ldr	r1, [pc, #8]	; (3bbc <schedule_new_thread+0x18>)
    3bb4:	3018      	adds	r0, #24
    3bb6:	f000 fe5d 	bl	4874 <z_add_timeout>
    3bba:	e7f9      	b.n	3bb0 <schedule_new_thread+0xc>
    3bbc:	0000613b 	.word	0x0000613b

00003bc0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bc4:	b085      	sub	sp, #20
    3bc6:	4604      	mov	r4, r0
    3bc8:	460f      	mov	r7, r1
    3bca:	4615      	mov	r5, r2
    3bcc:	461e      	mov	r6, r3
    3bce:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    3bd2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3bd6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    3bda:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3bde:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3be2:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    3be4:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    3be6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3be8:	2204      	movs	r2, #4
    3bea:	9911      	ldr	r1, [sp, #68]	; 0x44
    3bec:	f002 fa29 	bl	6042 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    3bf0:	462a      	mov	r2, r5
    3bf2:	4639      	mov	r1, r7
    3bf4:	4620      	mov	r0, r4
    3bf6:	f002 fa0e 	bl	6016 <setup_thread_stack>
    3bfa:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3bfc:	f8cd 8008 	str.w	r8, [sp, #8]
    3c00:	f8cd 9004 	str.w	r9, [sp, #4]
    3c04:	f8cd a000 	str.w	sl, [sp]
    3c08:	4633      	mov	r3, r6
    3c0a:	4602      	mov	r2, r0
    3c0c:	4639      	mov	r1, r7
    3c0e:	4620      	mov	r0, r4
    3c10:	f7fd fce2 	bl	15d8 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    3c14:	2300      	movs	r3, #0
    3c16:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    3c18:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    3c1a:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    3c1e:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    3c22:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    3c26:	f04f 0320 	mov.w	r3, #32
    3c2a:	f3ef 8211 	mrs	r2, BASEPRI
    3c2e:	f383 8812 	msr	BASEPRI_MAX, r3
    3c32:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    3c36:	4b13      	ldr	r3, [pc, #76]	; (3c84 <z_setup_new_thread+0xc4>)
    3c38:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3c3a:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    3c3c:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    3c3e:	f382 8811 	msr	BASEPRI, r2
    3c42:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    3c46:	f1bb 0f00 	cmp.w	fp, #0
    3c4a:	d013      	beq.n	3c74 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    3c4c:	221f      	movs	r2, #31
    3c4e:	4659      	mov	r1, fp
    3c50:	f104 0074 	add.w	r0, r4, #116	; 0x74
    3c54:	f001 fb7f 	bl	5356 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    3c58:	2300      	movs	r3, #0
    3c5a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    3c5e:	4b09      	ldr	r3, [pc, #36]	; (3c84 <z_setup_new_thread+0xc4>)
    3c60:	689b      	ldr	r3, [r3, #8]
    3c62:	b15b      	cbz	r3, 3c7c <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    3c64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3c68:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    3c6c:	4628      	mov	r0, r5
    3c6e:	b005      	add	sp, #20
    3c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    3c74:	2300      	movs	r3, #0
    3c76:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    3c7a:	e7f0      	b.n	3c5e <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    3c7c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    3c80:	e7f4      	b.n	3c6c <z_setup_new_thread+0xac>
    3c82:	bf00      	nop
    3c84:	2000095c 	.word	0x2000095c

00003c88 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3c88:	b530      	push	{r4, r5, lr}
    3c8a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    3c8c:	4c21      	ldr	r4, [pc, #132]	; (3d14 <z_init_static_threads+0x8c>)
    3c8e:	e014      	b.n	3cba <z_init_static_threads+0x32>
		z_setup_new_thread(
    3c90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3c92:	9305      	str	r3, [sp, #20]
    3c94:	6a23      	ldr	r3, [r4, #32]
    3c96:	9304      	str	r3, [sp, #16]
    3c98:	69e3      	ldr	r3, [r4, #28]
    3c9a:	9303      	str	r3, [sp, #12]
    3c9c:	69a3      	ldr	r3, [r4, #24]
    3c9e:	9302      	str	r3, [sp, #8]
    3ca0:	6963      	ldr	r3, [r4, #20]
    3ca2:	9301      	str	r3, [sp, #4]
    3ca4:	6923      	ldr	r3, [r4, #16]
    3ca6:	9300      	str	r3, [sp, #0]
    3ca8:	68e3      	ldr	r3, [r4, #12]
    3caa:	68a2      	ldr	r2, [r4, #8]
    3cac:	6861      	ldr	r1, [r4, #4]
    3cae:	6820      	ldr	r0, [r4, #0]
    3cb0:	f7ff ff86 	bl	3bc0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    3cb4:	6823      	ldr	r3, [r4, #0]
    3cb6:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3cb8:	3430      	adds	r4, #48	; 0x30
    3cba:	4b17      	ldr	r3, [pc, #92]	; (3d18 <z_init_static_threads+0x90>)
    3cbc:	429c      	cmp	r4, r3
    3cbe:	d3e7      	bcc.n	3c90 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3cc0:	f000 f9d8 	bl	4074 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3cc4:	4c13      	ldr	r4, [pc, #76]	; (3d14 <z_init_static_threads+0x8c>)
    3cc6:	e000      	b.n	3cca <z_init_static_threads+0x42>
    3cc8:	3430      	adds	r4, #48	; 0x30
    3cca:	4b13      	ldr	r3, [pc, #76]	; (3d18 <z_init_static_threads+0x90>)
    3ccc:	429c      	cmp	r4, r3
    3cce:	d21c      	bcs.n	3d0a <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3cd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3cd2:	f1b0 3fff 	cmp.w	r0, #4294967295
    3cd6:	d0f7      	beq.n	3cc8 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    3cd8:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    3cda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    3cde:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3ce0:	03c9      	lsls	r1, r1, #15
    3ce2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    3ce6:	03c0      	lsls	r0, r0, #15
    3ce8:	f240 33e7 	movw	r3, #999	; 0x3e7
    3cec:	18c0      	adds	r0, r0, r3
    3cee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3cf2:	f04f 0300 	mov.w	r3, #0
    3cf6:	f141 0100 	adc.w	r1, r1, #0
    3cfa:	f7fc fa2b 	bl	154 <__aeabi_uldivmod>
    3cfe:	4602      	mov	r2, r0
    3d00:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    3d02:	4628      	mov	r0, r5
    3d04:	f7ff ff4e 	bl	3ba4 <schedule_new_thread>
    3d08:	e7de      	b.n	3cc8 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    3d0a:	f000 fbd5 	bl	44b8 <k_sched_unlock>
}
    3d0e:	b007      	add	sp, #28
    3d10:	bd30      	pop	{r4, r5, pc}
    3d12:	bf00      	nop
    3d14:	20000144 	.word	0x20000144
    3d18:	20000144 	.word	0x20000144

00003d1c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3d1c:	b508      	push	{r3, lr}
    3d1e:	e001      	b.n	3d24 <idle+0x8>
	arch_cpu_idle();
    3d20:	f7fd fb96 	bl	1450 <arch_cpu_idle>
	__asm__ volatile(
    3d24:	f04f 0220 	mov.w	r2, #32
    3d28:	f3ef 8311 	mrs	r3, BASEPRI
    3d2c:	f382 8812 	msr	BASEPRI_MAX, r2
    3d30:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3d34:	f002 fae9 	bl	630a <z_get_next_timeout_expiry>
    3d38:	4b05      	ldr	r3, [pc, #20]	; (3d50 <idle+0x34>)
    3d3a:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    3d3c:	4b05      	ldr	r3, [pc, #20]	; (3d54 <idle+0x38>)
    3d3e:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3d40:	2b00      	cmp	r3, #0
    3d42:	d0ed      	beq.n	3d20 <idle+0x4>
    3d44:	f7fd f99a 	bl	107c <pm_system_suspend>
    3d48:	2800      	cmp	r0, #0
    3d4a:	d1eb      	bne.n	3d24 <idle+0x8>
    3d4c:	e7e8      	b.n	3d20 <idle+0x4>
    3d4e:	bf00      	nop
    3d50:	2000095c 	.word	0x2000095c
    3d54:	20000b73 	.word	0x20000b73

00003d58 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3d58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d5c:	b083      	sub	sp, #12
    3d5e:	4604      	mov	r4, r0
    3d60:	461d      	mov	r5, r3
    3d62:	f04f 0320 	mov.w	r3, #32
    3d66:	f3ef 8711 	mrs	r7, BASEPRI
    3d6a:	f383 8812 	msr	BASEPRI_MAX, r3
    3d6e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3d72:	68c1      	ldr	r1, [r0, #12]
    3d74:	b999      	cbnz	r1, 3d9e <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    3d76:	2900      	cmp	r1, #0
    3d78:	d14f      	bne.n	3e1a <z_impl_k_mutex_lock+0xc2>
    3d7a:	4b3a      	ldr	r3, [pc, #232]	; (3e64 <z_impl_k_mutex_lock+0x10c>)
    3d7c:	689b      	ldr	r3, [r3, #8]
    3d7e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3d82:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    3d84:	3101      	adds	r1, #1
    3d86:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    3d88:	4b36      	ldr	r3, [pc, #216]	; (3e64 <z_impl_k_mutex_lock+0x10c>)
    3d8a:	689b      	ldr	r3, [r3, #8]
    3d8c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    3d8e:	f387 8811 	msr	BASEPRI, r7
    3d92:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    3d96:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3d98:	b003      	add	sp, #12
    3d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3d9e:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3da0:	6882      	ldr	r2, [r0, #8]
    3da2:	4b30      	ldr	r3, [pc, #192]	; (3e64 <z_impl_k_mutex_lock+0x10c>)
    3da4:	689b      	ldr	r3, [r3, #8]
    3da6:	429a      	cmp	r2, r3
    3da8:	d0e5      	beq.n	3d76 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3daa:	ea55 0106 	orrs.w	r1, r5, r6
    3dae:	bf0c      	ite	eq
    3db0:	f04f 0801 	moveq.w	r8, #1
    3db4:	f04f 0800 	movne.w	r8, #0
    3db8:	d031      	beq.n	3e1e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    3dba:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3dbe:	4649      	mov	r1, r9
    3dc0:	f993 000e 	ldrsb.w	r0, [r3, #14]
    3dc4:	f002 f94e 	bl	6064 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3dc8:	4581      	cmp	r9, r0
    3dca:	dc2f      	bgt.n	3e2c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    3dcc:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3dd0:	9600      	str	r6, [sp, #0]
    3dd2:	9501      	str	r5, [sp, #4]
    3dd4:	4622      	mov	r2, r4
    3dd6:	4639      	mov	r1, r7
    3dd8:	4823      	ldr	r0, [pc, #140]	; (3e68 <z_impl_k_mutex_lock+0x110>)
    3dda:	f000 fab7 	bl	434c <z_pend_curr>
	if (got_mutex == 0) {
    3dde:	2800      	cmp	r0, #0
    3de0:	d0da      	beq.n	3d98 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    3de2:	f04f 0320 	mov.w	r3, #32
    3de6:	f3ef 8511 	mrs	r5, BASEPRI
    3dea:	f383 8812 	msr	BASEPRI_MAX, r3
    3dee:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3df2:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3df4:	429c      	cmp	r4, r3
    3df6:	d01f      	beq.n	3e38 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3df8:	b1f3      	cbz	r3, 3e38 <z_impl_k_mutex_lock+0xe0>
    3dfa:	6921      	ldr	r1, [r4, #16]
    3dfc:	f993 000e 	ldrsb.w	r0, [r3, #14]
    3e00:	f002 f930 	bl	6064 <new_prio_for_inheritance>
    3e04:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3e06:	4620      	mov	r0, r4
    3e08:	f002 f937 	bl	607a <adjust_owner_prio>
    3e0c:	b9b0      	cbnz	r0, 3e3c <z_impl_k_mutex_lock+0xe4>
    3e0e:	f1b9 0f00 	cmp.w	r9, #0
    3e12:	d015      	beq.n	3e40 <z_impl_k_mutex_lock+0xe8>
    3e14:	f04f 0801 	mov.w	r8, #1
    3e18:	e012      	b.n	3e40 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    3e1a:	6923      	ldr	r3, [r4, #16]
    3e1c:	e7b1      	b.n	3d82 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    3e1e:	f387 8811 	msr	BASEPRI, r7
    3e22:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    3e26:	f06f 000f 	mvn.w	r0, #15
    3e2a:	e7b5      	b.n	3d98 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    3e2c:	4601      	mov	r1, r0
    3e2e:	4620      	mov	r0, r4
    3e30:	f002 f923 	bl	607a <adjust_owner_prio>
    3e34:	4681      	mov	r9, r0
    3e36:	e7cb      	b.n	3dd0 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3e38:	6921      	ldr	r1, [r4, #16]
    3e3a:	e7e4      	b.n	3e06 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3e3c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    3e40:	f1b8 0f00 	cmp.w	r8, #0
    3e44:	d106      	bne.n	3e54 <z_impl_k_mutex_lock+0xfc>
    3e46:	f385 8811 	msr	BASEPRI, r5
    3e4a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    3e4e:	f06f 000a 	mvn.w	r0, #10
    3e52:	e7a1      	b.n	3d98 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    3e54:	4629      	mov	r1, r5
    3e56:	4804      	ldr	r0, [pc, #16]	; (3e68 <z_impl_k_mutex_lock+0x110>)
    3e58:	f000 f8f0 	bl	403c <z_reschedule>
	return -EAGAIN;
    3e5c:	f06f 000a 	mvn.w	r0, #10
    3e60:	e79a      	b.n	3d98 <z_impl_k_mutex_lock+0x40>
    3e62:	bf00      	nop
    3e64:	2000095c 	.word	0x2000095c
    3e68:	20000988 	.word	0x20000988

00003e6c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3e6c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3e6e:	6883      	ldr	r3, [r0, #8]
    3e70:	b383      	cbz	r3, 3ed4 <z_impl_k_mutex_unlock+0x68>
    3e72:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3e74:	4a1a      	ldr	r2, [pc, #104]	; (3ee0 <z_impl_k_mutex_unlock+0x74>)
    3e76:	6892      	ldr	r2, [r2, #8]
    3e78:	4293      	cmp	r3, r2
    3e7a:	d12e      	bne.n	3eda <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3e7c:	68c3      	ldr	r3, [r0, #12]
    3e7e:	2b01      	cmp	r3, #1
    3e80:	d903      	bls.n	3e8a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    3e82:	3b01      	subs	r3, #1
    3e84:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    3e86:	2000      	movs	r0, #0
}
    3e88:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    3e8a:	f04f 0320 	mov.w	r3, #32
    3e8e:	f3ef 8511 	mrs	r5, BASEPRI
    3e92:	f383 8812 	msr	BASEPRI_MAX, r3
    3e96:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3e9a:	6901      	ldr	r1, [r0, #16]
    3e9c:	f002 f8ed 	bl	607a <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3ea0:	4620      	mov	r0, r4
    3ea2:	f002 f9ce 	bl	6242 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3ea6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3ea8:	b168      	cbz	r0, 3ec6 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    3eaa:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3eae:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3eb0:	2400      	movs	r4, #0
    3eb2:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    3eb6:	f002 f924 	bl	6102 <z_ready_thread>
		z_reschedule(&lock, key);
    3eba:	4629      	mov	r1, r5
    3ebc:	4809      	ldr	r0, [pc, #36]	; (3ee4 <z_impl_k_mutex_unlock+0x78>)
    3ebe:	f000 f8bd 	bl	403c <z_reschedule>
	return 0;
    3ec2:	4620      	mov	r0, r4
    3ec4:	e7e0      	b.n	3e88 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    3ec6:	2000      	movs	r0, #0
    3ec8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3eca:	f385 8811 	msr	BASEPRI, r5
    3ece:	f3bf 8f6f 	isb	sy
    3ed2:	e7d9      	b.n	3e88 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    3ed4:	f06f 0015 	mvn.w	r0, #21
    3ed8:	e7d6      	b.n	3e88 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    3eda:	f04f 30ff 	mov.w	r0, #4294967295
    3ede:	e7d3      	b.n	3e88 <z_impl_k_mutex_unlock+0x1c>
    3ee0:	2000095c 	.word	0x2000095c
    3ee4:	20000988 	.word	0x20000988

00003ee8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3ee8:	b538      	push	{r3, r4, r5, lr}
    3eea:	4604      	mov	r4, r0
	__asm__ volatile(
    3eec:	f04f 0320 	mov.w	r3, #32
    3ef0:	f3ef 8511 	mrs	r5, BASEPRI
    3ef4:	f383 8812 	msr	BASEPRI_MAX, r3
    3ef8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3efc:	f002 f9a1 	bl	6242 <z_unpend_first_thread>

	if (thread != NULL) {
    3f00:	b148      	cbz	r0, 3f16 <z_impl_k_sem_give+0x2e>
    3f02:	2200      	movs	r2, #0
    3f04:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3f08:	f002 f8fb 	bl	6102 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3f0c:	4629      	mov	r1, r5
    3f0e:	4807      	ldr	r0, [pc, #28]	; (3f2c <z_impl_k_sem_give+0x44>)
    3f10:	f000 f894 	bl	403c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3f14:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3f16:	68a3      	ldr	r3, [r4, #8]
    3f18:	68e2      	ldr	r2, [r4, #12]
    3f1a:	4293      	cmp	r3, r2
    3f1c:	d003      	beq.n	3f26 <z_impl_k_sem_give+0x3e>
    3f1e:	2201      	movs	r2, #1
    3f20:	4413      	add	r3, r2
    3f22:	60a3      	str	r3, [r4, #8]
}
    3f24:	e7f2      	b.n	3f0c <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3f26:	2200      	movs	r2, #0
    3f28:	e7fa      	b.n	3f20 <z_impl_k_sem_give+0x38>
    3f2a:	bf00      	nop
    3f2c:	20000988 	.word	0x20000988

00003f30 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3f30:	b510      	push	{r4, lr}
    3f32:	b082      	sub	sp, #8
    3f34:	f04f 0420 	mov.w	r4, #32
    3f38:	f3ef 8111 	mrs	r1, BASEPRI
    3f3c:	f384 8812 	msr	BASEPRI_MAX, r4
    3f40:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3f44:	6884      	ldr	r4, [r0, #8]
    3f46:	b144      	cbz	r4, 3f5a <z_impl_k_sem_take+0x2a>
		sem->count--;
    3f48:	3c01      	subs	r4, #1
    3f4a:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    3f4c:	f381 8811 	msr	BASEPRI, r1
    3f50:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3f54:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3f56:	b002      	add	sp, #8
    3f58:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3f5a:	ea53 0402 	orrs.w	r4, r3, r2
    3f5e:	d006      	beq.n	3f6e <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3f60:	9200      	str	r2, [sp, #0]
    3f62:	9301      	str	r3, [sp, #4]
    3f64:	4602      	mov	r2, r0
    3f66:	4805      	ldr	r0, [pc, #20]	; (3f7c <z_impl_k_sem_take+0x4c>)
    3f68:	f000 f9f0 	bl	434c <z_pend_curr>
	return ret;
    3f6c:	e7f3      	b.n	3f56 <z_impl_k_sem_take+0x26>
    3f6e:	f381 8811 	msr	BASEPRI, r1
    3f72:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3f76:	f06f 000f 	mvn.w	r0, #15
    3f7a:	e7ec      	b.n	3f56 <z_impl_k_sem_take+0x26>
    3f7c:	20000988 	.word	0x20000988

00003f80 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3f80:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f84:	bf08      	it	eq
    3f86:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    3f8a:	d100      	bne.n	3f8e <add_thread_timeout+0xe>
    3f8c:	4770      	bx	lr
{
    3f8e:	b508      	push	{r3, lr}
    3f90:	4902      	ldr	r1, [pc, #8]	; (3f9c <add_thread_timeout+0x1c>)
    3f92:	3018      	adds	r0, #24
    3f94:	f000 fc6e 	bl	4874 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    3f98:	bd08      	pop	{r3, pc}
    3f9a:	bf00      	nop
    3f9c:	0000613b 	.word	0x0000613b

00003fa0 <z_reset_time_slice>:
{
    3fa0:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    3fa2:	4b07      	ldr	r3, [pc, #28]	; (3fc0 <z_reset_time_slice+0x20>)
    3fa4:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    3fa6:	b904      	cbnz	r4, 3faa <z_reset_time_slice+0xa>
}
    3fa8:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    3faa:	f7fe fcdd 	bl	2968 <sys_clock_elapsed>
    3fae:	4404      	add	r4, r0
    3fb0:	4b04      	ldr	r3, [pc, #16]	; (3fc4 <z_reset_time_slice+0x24>)
    3fb2:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    3fb4:	2100      	movs	r1, #0
    3fb6:	4b02      	ldr	r3, [pc, #8]	; (3fc0 <z_reset_time_slice+0x20>)
    3fb8:	6818      	ldr	r0, [r3, #0]
    3fba:	f002 f9bd 	bl	6338 <z_set_timeout_expiry>
}
    3fbe:	e7f3      	b.n	3fa8 <z_reset_time_slice+0x8>
    3fc0:	20000990 	.word	0x20000990
    3fc4:	2000095c 	.word	0x2000095c

00003fc8 <k_sched_time_slice_set>:
{
    3fc8:	b570      	push	{r4, r5, r6, lr}
    3fca:	4604      	mov	r4, r0
    3fcc:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    3fce:	2300      	movs	r3, #0
	__asm__ volatile(
    3fd0:	f04f 0220 	mov.w	r2, #32
    3fd4:	f3ef 8611 	mrs	r6, BASEPRI
    3fd8:	f382 8812 	msr	BASEPRI_MAX, r2
    3fdc:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    3fe0:	e00e      	b.n	4000 <CONFIG_FPROTECT_BLOCK_SIZE>
			slice_ticks = MAX(2, slice_ticks);
    3fe2:	2802      	cmp	r0, #2
    3fe4:	bfb8      	it	lt
    3fe6:	2002      	movlt	r0, #2
    3fe8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    3fea:	4b11      	ldr	r3, [pc, #68]	; (4030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
    3fec:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    3fee:	4b11      	ldr	r3, [pc, #68]	; (4034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
    3ff0:	6898      	ldr	r0, [r3, #8]
    3ff2:	f7ff ffd5 	bl	3fa0 <z_reset_time_slice>
	__asm__ volatile(
    3ff6:	f386 8811 	msr	BASEPRI, r6
    3ffa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    3ffe:	2301      	movs	r3, #1
    4000:	b9a3      	cbnz	r3, 402c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
		_current_cpu->slice_ticks = 0;
    4002:	4b0c      	ldr	r3, [pc, #48]	; (4034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
    4004:	2200      	movs	r2, #0
    4006:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    4008:	0c61      	lsrs	r1, r4, #17
    400a:	03e3      	lsls	r3, r4, #15
    400c:	f240 30e7 	movw	r0, #999	; 0x3e7
    4010:	1818      	adds	r0, r3, r0
    4012:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4016:	f04f 0300 	mov.w	r3, #0
    401a:	f141 0100 	adc.w	r1, r1, #0
    401e:	f7fc f899 	bl	154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    4022:	4b05      	ldr	r3, [pc, #20]	; (4038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>)
    4024:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4026:	2c00      	cmp	r4, #0
    4028:	dcdb      	bgt.n	3fe2 <k_sched_time_slice_set+0x1a>
    402a:	e7de      	b.n	3fea <k_sched_time_slice_set+0x22>
}
    402c:	bd70      	pop	{r4, r5, r6, pc}
    402e:	bf00      	nop
    4030:	2000098c 	.word	0x2000098c
    4034:	2000095c 	.word	0x2000095c
    4038:	20000990 	.word	0x20000990

0000403c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    403c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    403e:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4040:	b921      	cbnz	r1, 404c <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4042:	f3ef 8305 	mrs	r3, IPSR
    4046:	b913      	cbnz	r3, 404e <z_reschedule+0x12>
    4048:	2101      	movs	r1, #1
    404a:	e000      	b.n	404e <z_reschedule+0x12>
    404c:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    404e:	f011 0f01 	tst.w	r1, #1
    4052:	d007      	beq.n	4064 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    4054:	4b06      	ldr	r3, [pc, #24]	; (4070 <z_reschedule+0x34>)
    4056:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    4058:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    405a:	429a      	cmp	r2, r3
    405c:	d002      	beq.n	4064 <z_reschedule+0x28>
	ret = arch_swap(key);
    405e:	f7fd fa61 	bl	1524 <arch_swap>
		z_swap(lock, key);
    4062:	e003      	b.n	406c <z_reschedule+0x30>
    4064:	f380 8811 	msr	BASEPRI, r0
    4068:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    406c:	bd08      	pop	{r3, pc}
    406e:	bf00      	nop
    4070:	2000095c 	.word	0x2000095c

00004074 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    4074:	2300      	movs	r3, #0
	__asm__ volatile(
    4076:	f04f 0220 	mov.w	r2, #32
    407a:	f3ef 8111 	mrs	r1, BASEPRI
    407e:	f382 8812 	msr	BASEPRI_MAX, r2
    4082:	f3bf 8f6f 	isb	sy
    4086:	e009      	b.n	409c <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    4088:	4b06      	ldr	r3, [pc, #24]	; (40a4 <k_sched_lock+0x30>)
    408a:	689a      	ldr	r2, [r3, #8]
    408c:	7bd3      	ldrb	r3, [r2, #15]
    408e:	3b01      	subs	r3, #1
    4090:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4092:	f381 8811 	msr	BASEPRI, r1
    4096:	f3bf 8f6f 	isb	sy
    409a:	2301      	movs	r3, #1
    409c:	2b00      	cmp	r3, #0
    409e:	d0f3      	beq.n	4088 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    40a0:	4770      	bx	lr
    40a2:	bf00      	nop
    40a4:	2000095c 	.word	0x2000095c

000040a8 <update_cache>:
{
    40a8:	b538      	push	{r3, r4, r5, lr}
    40aa:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    40ac:	4810      	ldr	r0, [pc, #64]	; (40f0 <update_cache+0x48>)
    40ae:	f002 f821 	bl	60f4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    40b2:	4605      	mov	r5, r0
    40b4:	b170      	cbz	r0, 40d4 <update_cache+0x2c>
	if (preempt_ok != 0) {
    40b6:	b984      	cbnz	r4, 40da <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    40b8:	4b0e      	ldr	r3, [pc, #56]	; (40f4 <update_cache+0x4c>)
    40ba:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    40bc:	7b5a      	ldrb	r2, [r3, #13]
    40be:	f012 0f1f 	tst.w	r2, #31
    40c2:	d10a      	bne.n	40da <update_cache+0x32>
	return node->next != NULL;
    40c4:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    40c6:	b942      	cbnz	r2, 40da <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    40c8:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    40ca:	2a7f      	cmp	r2, #127	; 0x7f
    40cc:	d905      	bls.n	40da <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    40ce:	4a09      	ldr	r2, [pc, #36]	; (40f4 <update_cache+0x4c>)
    40d0:	61d3      	str	r3, [r2, #28]
    40d2:	e00b      	b.n	40ec <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    40d4:	4b07      	ldr	r3, [pc, #28]	; (40f4 <update_cache+0x4c>)
    40d6:	68dd      	ldr	r5, [r3, #12]
    40d8:	e7ed      	b.n	40b6 <update_cache+0xe>
		if (thread != _current) {
    40da:	4b06      	ldr	r3, [pc, #24]	; (40f4 <update_cache+0x4c>)
    40dc:	689b      	ldr	r3, [r3, #8]
    40de:	42ab      	cmp	r3, r5
    40e0:	d002      	beq.n	40e8 <update_cache+0x40>
			z_reset_time_slice(thread);
    40e2:	4628      	mov	r0, r5
    40e4:	f7ff ff5c 	bl	3fa0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    40e8:	4b02      	ldr	r3, [pc, #8]	; (40f4 <update_cache+0x4c>)
    40ea:	61dd      	str	r5, [r3, #28]
}
    40ec:	bd38      	pop	{r3, r4, r5, pc}
    40ee:	bf00      	nop
    40f0:	2000097c 	.word	0x2000097c
    40f4:	2000095c 	.word	0x2000095c

000040f8 <move_thread_to_end_of_prio_q>:
{
    40f8:	b538      	push	{r3, r4, r5, lr}
    40fa:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    40fc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    40fe:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4102:	2b00      	cmp	r3, #0
    4104:	db28      	blt.n	4158 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    4106:	7b6b      	ldrb	r3, [r5, #13]
    4108:	f063 037f 	orn	r3, r3, #127	; 0x7f
    410c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    410e:	4b1a      	ldr	r3, [pc, #104]	; (4178 <move_thread_to_end_of_prio_q+0x80>)
    4110:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4114:	429c      	cmp	r4, r3
    4116:	d02d      	beq.n	4174 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4118:	b16c      	cbz	r4, 4136 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    411a:	4621      	mov	r1, r4
    411c:	4628      	mov	r0, r5
    411e:	f001 ffc2 	bl	60a6 <z_sched_prio_cmp>
    4122:	2800      	cmp	r0, #0
    4124:	dc20      	bgt.n	4168 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4126:	b134      	cbz	r4, 4136 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    4128:	4b13      	ldr	r3, [pc, #76]	; (4178 <move_thread_to_end_of_prio_q+0x80>)
    412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    412c:	429c      	cmp	r4, r3
    412e:	d002      	beq.n	4136 <move_thread_to_end_of_prio_q+0x3e>
    4130:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4132:	2c00      	cmp	r4, #0
    4134:	d1f0      	bne.n	4118 <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    4136:	4b10      	ldr	r3, [pc, #64]	; (4178 <move_thread_to_end_of_prio_q+0x80>)
    4138:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    413a:	f103 0120 	add.w	r1, r3, #32
    413e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4140:	606a      	str	r2, [r5, #4]

	tail->next = node;
    4142:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4144:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    4146:	4b0c      	ldr	r3, [pc, #48]	; (4178 <move_thread_to_end_of_prio_q+0x80>)
    4148:	6898      	ldr	r0, [r3, #8]
    414a:	42a8      	cmp	r0, r5
    414c:	bf14      	ite	ne
    414e:	2000      	movne	r0, #0
    4150:	2001      	moveq	r0, #1
    4152:	f7ff ffa9 	bl	40a8 <update_cache>
}
    4156:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4158:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    415c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    415e:	4601      	mov	r1, r0
    4160:	4806      	ldr	r0, [pc, #24]	; (417c <move_thread_to_end_of_prio_q+0x84>)
    4162:	f001 ffbf 	bl	60e4 <z_priq_dumb_remove>
}
    4166:	e7ce      	b.n	4106 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4168:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    416a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    416c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    416e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4170:	6065      	str	r5, [r4, #4]
}
    4172:	e7e8      	b.n	4146 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4174:	2400      	movs	r4, #0
    4176:	e7cf      	b.n	4118 <move_thread_to_end_of_prio_q+0x20>
    4178:	2000095c 	.word	0x2000095c
    417c:	2000097c 	.word	0x2000097c

00004180 <slice_expired_locked>:
{
    4180:	b538      	push	{r3, r4, r5, lr}
    4182:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    4184:	4b07      	ldr	r3, [pc, #28]	; (41a4 <slice_expired_locked+0x24>)
    4186:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4188:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    418a:	f013 0f1f 	tst.w	r3, #31
    418e:	d004      	beq.n	419a <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    4190:	4628      	mov	r0, r5
    4192:	f7ff ff05 	bl	3fa0 <z_reset_time_slice>
}
    4196:	4620      	mov	r0, r4
    4198:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    419a:	4628      	mov	r0, r5
    419c:	f7ff ffac 	bl	40f8 <move_thread_to_end_of_prio_q>
    41a0:	e7f6      	b.n	4190 <slice_expired_locked+0x10>
    41a2:	bf00      	nop
    41a4:	2000095c 	.word	0x2000095c

000041a8 <z_time_slice>:
{
    41a8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    41aa:	f04f 0320 	mov.w	r3, #32
    41ae:	f3ef 8411 	mrs	r4, BASEPRI
    41b2:	f383 8812 	msr	BASEPRI_MAX, r3
    41b6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    41ba:	4b22      	ldr	r3, [pc, #136]	; (4244 <z_time_slice+0x9c>)
    41bc:	689b      	ldr	r3, [r3, #8]
    41be:	4a22      	ldr	r2, [pc, #136]	; (4248 <z_time_slice+0xa0>)
    41c0:	6812      	ldr	r2, [r2, #0]
    41c2:	4293      	cmp	r3, r2
    41c4:	d018      	beq.n	41f8 <z_time_slice+0x50>
    41c6:	4621      	mov	r1, r4
	pending_current = NULL;
    41c8:	4a1f      	ldr	r2, [pc, #124]	; (4248 <z_time_slice+0xa0>)
    41ca:	2500      	movs	r5, #0
    41cc:	6015      	str	r5, [r2, #0]
	int ret = slice_ticks;
    41ce:	4a1f      	ldr	r2, [pc, #124]	; (424c <z_time_slice+0xa4>)
    41d0:	6812      	ldr	r2, [r2, #0]
	if (slice_time(_current) && sliceable(_current)) {
    41d2:	b372      	cbz	r2, 4232 <z_time_slice+0x8a>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    41d4:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    41d6:	2a7f      	cmp	r2, #127	; 0x7f
    41d8:	d816      	bhi.n	4208 <z_time_slice+0x60>
    41da:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    41dc:	f012 0f1f 	tst.w	r2, #31
    41e0:	d11c      	bne.n	421c <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    41e2:	f993 500e 	ldrsb.w	r5, [r3, #14]
    41e6:	4a1a      	ldr	r2, [pc, #104]	; (4250 <z_time_slice+0xa8>)
    41e8:	6812      	ldr	r2, [r2, #0]
    41ea:	4295      	cmp	r5, r2
    41ec:	db18      	blt.n	4220 <z_time_slice+0x78>
		&& !z_is_idle_thread_object(thread);
    41ee:	4a19      	ldr	r2, [pc, #100]	; (4254 <z_time_slice+0xac>)
    41f0:	4293      	cmp	r3, r2
    41f2:	d017      	beq.n	4224 <z_time_slice+0x7c>
    41f4:	2301      	movs	r3, #1
    41f6:	e008      	b.n	420a <z_time_slice+0x62>
		z_reset_time_slice(_current);
    41f8:	4618      	mov	r0, r3
    41fa:	f7ff fed1 	bl	3fa0 <z_reset_time_slice>
	__asm__ volatile(
    41fe:	f384 8811 	msr	BASEPRI, r4
    4202:	f3bf 8f6f 	isb	sy
		return;
    4206:	e01b      	b.n	4240 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
    4208:	2300      	movs	r3, #0
	if (slice_time(_current) && sliceable(_current)) {
    420a:	b193      	cbz	r3, 4232 <z_time_slice+0x8a>
		if (ticks >= _current_cpu->slice_ticks) {
    420c:	4b0d      	ldr	r3, [pc, #52]	; (4244 <z_time_slice+0x9c>)
    420e:	691b      	ldr	r3, [r3, #16]
    4210:	4283      	cmp	r3, r0
    4212:	dd09      	ble.n	4228 <z_time_slice+0x80>
			_current_cpu->slice_ticks -= ticks;
    4214:	1a18      	subs	r0, r3, r0
    4216:	4b0b      	ldr	r3, [pc, #44]	; (4244 <z_time_slice+0x9c>)
    4218:	6118      	str	r0, [r3, #16]
    421a:	e00d      	b.n	4238 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    421c:	2300      	movs	r3, #0
    421e:	e7f4      	b.n	420a <z_time_slice+0x62>
    4220:	2300      	movs	r3, #0
    4222:	e7f2      	b.n	420a <z_time_slice+0x62>
    4224:	2300      	movs	r3, #0
    4226:	e7f0      	b.n	420a <z_time_slice+0x62>
			key = slice_expired_locked(key);
    4228:	4620      	mov	r0, r4
    422a:	f7ff ffa9 	bl	4180 <slice_expired_locked>
    422e:	4601      	mov	r1, r0
    4230:	e002      	b.n	4238 <z_time_slice+0x90>
		_current_cpu->slice_ticks = 0;
    4232:	4b04      	ldr	r3, [pc, #16]	; (4244 <z_time_slice+0x9c>)
    4234:	2200      	movs	r2, #0
    4236:	611a      	str	r2, [r3, #16]
    4238:	f381 8811 	msr	BASEPRI, r1
    423c:	f3bf 8f6f 	isb	sy
}
    4240:	bd38      	pop	{r3, r4, r5, pc}
    4242:	bf00      	nop
    4244:	2000095c 	.word	0x2000095c
    4248:	20000988 	.word	0x20000988
    424c:	20000990 	.word	0x20000990
    4250:	2000098c 	.word	0x2000098c
    4254:	200001b8 	.word	0x200001b8

00004258 <ready_thread>:
{
    4258:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    425a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    425c:	f990 200d 	ldrsb.w	r2, [r0, #13]
    4260:	2a00      	cmp	r2, #0
    4262:	db2d      	blt.n	42c0 <ready_thread+0x68>
    4264:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4266:	f013 0f1f 	tst.w	r3, #31
    426a:	d105      	bne.n	4278 <ready_thread+0x20>
	return node->next != NULL;
    426c:	6982      	ldr	r2, [r0, #24]
    426e:	b10a      	cbz	r2, 4274 <ready_thread+0x1c>
    4270:	2200      	movs	r2, #0
    4272:	e002      	b.n	427a <ready_thread+0x22>
    4274:	2201      	movs	r2, #1
    4276:	e000      	b.n	427a <ready_thread+0x22>
    4278:	2200      	movs	r2, #0
    427a:	b30a      	cbz	r2, 42c0 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    427c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4280:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    4282:	4b14      	ldr	r3, [pc, #80]	; (42d4 <ready_thread+0x7c>)
    4284:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4288:	429d      	cmp	r5, r3
    428a:	d020      	beq.n	42ce <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    428c:	b16d      	cbz	r5, 42aa <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    428e:	4629      	mov	r1, r5
    4290:	4620      	mov	r0, r4
    4292:	f001 ff08 	bl	60a6 <z_sched_prio_cmp>
    4296:	2800      	cmp	r0, #0
    4298:	dc13      	bgt.n	42c2 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    429a:	b135      	cbz	r5, 42aa <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    429c:	4b0d      	ldr	r3, [pc, #52]	; (42d4 <ready_thread+0x7c>)
    429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42a0:	429d      	cmp	r5, r3
    42a2:	d002      	beq.n	42aa <ready_thread+0x52>
    42a4:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    42a6:	2d00      	cmp	r5, #0
    42a8:	d1f0      	bne.n	428c <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    42aa:	4b0a      	ldr	r3, [pc, #40]	; (42d4 <ready_thread+0x7c>)
    42ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    42ae:	f103 0120 	add.w	r1, r3, #32
    42b2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    42b4:	6062      	str	r2, [r4, #4]
	tail->next = node;
    42b6:	6014      	str	r4, [r2, #0]
	list->tail = node;
    42b8:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    42ba:	2000      	movs	r0, #0
    42bc:	f7ff fef4 	bl	40a8 <update_cache>
}
    42c0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    42c2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    42c4:	6063      	str	r3, [r4, #4]
	node->next = successor;
    42c6:	6025      	str	r5, [r4, #0]
	prev->next = node;
    42c8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    42ca:	606c      	str	r4, [r5, #4]
}
    42cc:	e7f5      	b.n	42ba <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    42ce:	2500      	movs	r5, #0
    42d0:	e7dc      	b.n	428c <ready_thread+0x34>
    42d2:	bf00      	nop
    42d4:	2000095c 	.word	0x2000095c

000042d8 <z_sched_start>:
{
    42d8:	b510      	push	{r4, lr}
	__asm__ volatile(
    42da:	f04f 0320 	mov.w	r3, #32
    42de:	f3ef 8411 	mrs	r4, BASEPRI
    42e2:	f383 8812 	msr	BASEPRI_MAX, r3
    42e6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    42ea:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    42ec:	f013 0f04 	tst.w	r3, #4
    42f0:	d104      	bne.n	42fc <z_sched_start+0x24>
	__asm__ volatile(
    42f2:	f384 8811 	msr	BASEPRI, r4
    42f6:	f3bf 8f6f 	isb	sy
}
    42fa:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    42fc:	f023 0304 	bic.w	r3, r3, #4
    4300:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    4302:	f7ff ffa9 	bl	4258 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4306:	4621      	mov	r1, r4
    4308:	4801      	ldr	r0, [pc, #4]	; (4310 <z_sched_start+0x38>)
    430a:	f7ff fe97 	bl	403c <z_reschedule>
    430e:	e7f4      	b.n	42fa <z_sched_start+0x22>
    4310:	2000098c 	.word	0x2000098c

00004314 <unready_thread>:
{
    4314:	b510      	push	{r4, lr}
    4316:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    4318:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    431a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    431e:	2b00      	cmp	r3, #0
    4320:	db08      	blt.n	4334 <unready_thread+0x20>
	update_cache(thread == _current);
    4322:	4b08      	ldr	r3, [pc, #32]	; (4344 <unready_thread+0x30>)
    4324:	6898      	ldr	r0, [r3, #8]
    4326:	42a0      	cmp	r0, r4
    4328:	bf14      	ite	ne
    432a:	2000      	movne	r0, #0
    432c:	2001      	moveq	r0, #1
    432e:	f7ff febb 	bl	40a8 <update_cache>
}
    4332:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4334:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4338:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    433a:	4601      	mov	r1, r0
    433c:	4802      	ldr	r0, [pc, #8]	; (4348 <unready_thread+0x34>)
    433e:	f001 fed1 	bl	60e4 <z_priq_dumb_remove>
}
    4342:	e7ee      	b.n	4322 <unready_thread+0xe>
    4344:	2000095c 	.word	0x2000095c
    4348:	2000097c 	.word	0x2000097c

0000434c <z_pend_curr>:
{
    434c:	b510      	push	{r4, lr}
    434e:	460c      	mov	r4, r1
    4350:	4611      	mov	r1, r2
	pending_current = _current;
    4352:	4b06      	ldr	r3, [pc, #24]	; (436c <z_pend_curr+0x20>)
    4354:	6898      	ldr	r0, [r3, #8]
    4356:	4b06      	ldr	r3, [pc, #24]	; (4370 <z_pend_curr+0x24>)
    4358:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    435a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    435e:	f001 ff4e 	bl	61fe <pend>
    4362:	4620      	mov	r0, r4
    4364:	f7fd f8de 	bl	1524 <arch_swap>
}
    4368:	bd10      	pop	{r4, pc}
    436a:	bf00      	nop
    436c:	2000095c 	.word	0x2000095c
    4370:	20000988 	.word	0x20000988

00004374 <z_set_prio>:
{
    4374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4378:	4604      	mov	r4, r0
    437a:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    437c:	2300      	movs	r3, #0
	__asm__ volatile(
    437e:	f04f 0220 	mov.w	r2, #32
    4382:	f3ef 8811 	mrs	r8, BASEPRI
    4386:	f382 8812 	msr	BASEPRI_MAX, r2
    438a:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    438e:	461f      	mov	r7, r3
    4390:	e008      	b.n	43a4 <z_set_prio+0x30>
		if (need_sched) {
    4392:	f012 0701 	ands.w	r7, r2, #1
    4396:	d111      	bne.n	43bc <z_set_prio+0x48>
			thread->base.prio = prio;
    4398:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
    439a:	f388 8811 	msr	BASEPRI, r8
    439e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    43a2:	2301      	movs	r3, #1
    43a4:	461a      	mov	r2, r3
    43a6:	2b00      	cmp	r3, #0
    43a8:	d13d      	bne.n	4426 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    43aa:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    43ac:	f013 0f1f 	tst.w	r3, #31
    43b0:	d1ef      	bne.n	4392 <z_set_prio+0x1e>
	return node->next != NULL;
    43b2:	69a1      	ldr	r1, [r4, #24]
    43b4:	2900      	cmp	r1, #0
    43b6:	d1ec      	bne.n	4392 <z_set_prio+0x1e>
    43b8:	2201      	movs	r2, #1
    43ba:	e7ea      	b.n	4392 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    43bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    43c0:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    43c2:	f8df 9068 	ldr.w	r9, [pc, #104]	; 442c <z_set_prio+0xb8>
    43c6:	4621      	mov	r1, r4
    43c8:	4648      	mov	r0, r9
    43ca:	f001 fe8b 	bl	60e4 <z_priq_dumb_remove>
				thread->base.prio = prio;
    43ce:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    43d0:	7b63      	ldrb	r3, [r4, #13]
    43d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    43d6:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    43d8:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43dc:	454d      	cmp	r5, r9
    43de:	d020      	beq.n	4422 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    43e0:	b16d      	cbz	r5, 43fe <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    43e2:	4629      	mov	r1, r5
    43e4:	4620      	mov	r0, r4
    43e6:	f001 fe5e 	bl	60a6 <z_sched_prio_cmp>
    43ea:	2800      	cmp	r0, #0
    43ec:	dc13      	bgt.n	4416 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    43ee:	b135      	cbz	r5, 43fe <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    43f0:	4b0f      	ldr	r3, [pc, #60]	; (4430 <z_set_prio+0xbc>)
    43f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43f4:	429d      	cmp	r5, r3
    43f6:	d002      	beq.n	43fe <z_set_prio+0x8a>
    43f8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    43fa:	2d00      	cmp	r5, #0
    43fc:	d1f0      	bne.n	43e0 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    43fe:	4b0c      	ldr	r3, [pc, #48]	; (4430 <z_set_prio+0xbc>)
    4400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4402:	f103 0120 	add.w	r1, r3, #32
    4406:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    4408:	6062      	str	r2, [r4, #4]
	tail->next = node;
    440a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    440c:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    440e:	2001      	movs	r0, #1
    4410:	f7ff fe4a 	bl	40a8 <update_cache>
    4414:	e7c1      	b.n	439a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    4416:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    4418:	6063      	str	r3, [r4, #4]
	node->next = successor;
    441a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    441c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    441e:	606c      	str	r4, [r5, #4]
}
    4420:	e7f5      	b.n	440e <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4422:	2500      	movs	r5, #0
    4424:	e7dc      	b.n	43e0 <z_set_prio+0x6c>
}
    4426:	4638      	mov	r0, r7
    4428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    442c:	2000097c 	.word	0x2000097c
    4430:	2000095c 	.word	0x2000095c

00004434 <z_impl_k_thread_suspend>:
{
    4434:	b538      	push	{r3, r4, r5, lr}
    4436:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4438:	3018      	adds	r0, #24
    443a:	f001 ff48 	bl	62ce <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    443e:	2300      	movs	r3, #0
	__asm__ volatile(
    4440:	f04f 0220 	mov.w	r2, #32
    4444:	f3ef 8511 	mrs	r5, BASEPRI
    4448:	f382 8812 	msr	BASEPRI_MAX, r2
    444c:	f3bf 8f6f 	isb	sy
    4450:	e010      	b.n	4474 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4452:	7b63      	ldrb	r3, [r4, #13]
    4454:	f043 0310 	orr.w	r3, r3, #16
    4458:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    445a:	4b15      	ldr	r3, [pc, #84]	; (44b0 <z_impl_k_thread_suspend+0x7c>)
    445c:	6898      	ldr	r0, [r3, #8]
    445e:	42a0      	cmp	r0, r4
    4460:	bf14      	ite	ne
    4462:	2000      	movne	r0, #0
    4464:	2001      	moveq	r0, #1
    4466:	f7ff fe1f 	bl	40a8 <update_cache>
	__asm__ volatile(
    446a:	f385 8811 	msr	BASEPRI, r5
    446e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4472:	2301      	movs	r3, #1
    4474:	b963      	cbnz	r3, 4490 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    4476:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    4478:	f994 300d 	ldrsb.w	r3, [r4, #13]
    447c:	2b00      	cmp	r3, #0
    447e:	dae8      	bge.n	4452 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4480:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4484:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4486:	4621      	mov	r1, r4
    4488:	480a      	ldr	r0, [pc, #40]	; (44b4 <z_impl_k_thread_suspend+0x80>)
    448a:	f001 fe2b 	bl	60e4 <z_priq_dumb_remove>
}
    448e:	e7e0      	b.n	4452 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    4490:	4b07      	ldr	r3, [pc, #28]	; (44b0 <z_impl_k_thread_suspend+0x7c>)
    4492:	689b      	ldr	r3, [r3, #8]
    4494:	42a3      	cmp	r3, r4
    4496:	d000      	beq.n	449a <z_impl_k_thread_suspend+0x66>
}
    4498:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    449a:	f04f 0320 	mov.w	r3, #32
    449e:	f3ef 8011 	mrs	r0, BASEPRI
    44a2:	f383 8812 	msr	BASEPRI_MAX, r3
    44a6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    44aa:	f001 fe06 	bl	60ba <z_reschedule_irqlock>
    44ae:	e7f3      	b.n	4498 <z_impl_k_thread_suspend+0x64>
    44b0:	2000095c 	.word	0x2000095c
    44b4:	2000097c 	.word	0x2000097c

000044b8 <k_sched_unlock>:

void k_sched_unlock(void)
{
    44b8:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    44ba:	2300      	movs	r3, #0
    44bc:	f04f 0220 	mov.w	r2, #32
    44c0:	f3ef 8411 	mrs	r4, BASEPRI
    44c4:	f382 8812 	msr	BASEPRI_MAX, r2
    44c8:	f3bf 8f6f 	isb	sy
    44cc:	e00c      	b.n	44e8 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    44ce:	4b0d      	ldr	r3, [pc, #52]	; (4504 <k_sched_unlock+0x4c>)
    44d0:	689a      	ldr	r2, [r3, #8]
    44d2:	7bd3      	ldrb	r3, [r2, #15]
    44d4:	3301      	adds	r3, #1
    44d6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    44d8:	2000      	movs	r0, #0
    44da:	f7ff fde5 	bl	40a8 <update_cache>
	__asm__ volatile(
    44de:	f384 8811 	msr	BASEPRI, r4
    44e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    44e6:	2301      	movs	r3, #1
    44e8:	2b00      	cmp	r3, #0
    44ea:	d0f0      	beq.n	44ce <k_sched_unlock+0x16>
	__asm__ volatile(
    44ec:	f04f 0320 	mov.w	r3, #32
    44f0:	f3ef 8011 	mrs	r0, BASEPRI
    44f4:	f383 8812 	msr	BASEPRI_MAX, r3
    44f8:	f3bf 8f6f 	isb	sy
    44fc:	f001 fddd 	bl	60ba <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    4500:	bd10      	pop	{r4, pc}
    4502:	bf00      	nop
    4504:	2000095c 	.word	0x2000095c

00004508 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    4508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    450a:	7b43      	ldrb	r3, [r0, #13]
    450c:	f013 0f08 	tst.w	r3, #8
    4510:	d145      	bne.n	459e <end_thread+0x96>
    4512:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    4514:	f043 0308 	orr.w	r3, r3, #8
    4518:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    451a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    451e:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    4520:	f013 0f80 	tst.w	r3, #128	; 0x80
    4524:	d12d      	bne.n	4582 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    4526:	68ab      	ldr	r3, [r5, #8]
    4528:	b15b      	cbz	r3, 4542 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    452a:	4628      	mov	r0, r5
    452c:	f001 fdb9 	bl	60a2 <pended_on_thread>
    4530:	4629      	mov	r1, r5
    4532:	f001 fdd7 	bl	60e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4536:	7b6b      	ldrb	r3, [r5, #13]
    4538:	f023 0302 	bic.w	r3, r3, #2
    453c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    453e:	2300      	movs	r3, #0
    4540:	60ab      	str	r3, [r5, #8]
    4542:	f105 0018 	add.w	r0, r5, #24
    4546:	f001 fec2 	bl	62ce <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    454a:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    454e:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4550:	42bc      	cmp	r4, r7
    4552:	d01e      	beq.n	4592 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4554:	b1ec      	cbz	r4, 4592 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    4556:	4620      	mov	r0, r4
    4558:	f001 fda3 	bl	60a2 <pended_on_thread>
    455c:	4621      	mov	r1, r4
    455e:	f001 fdc1 	bl	60e4 <z_priq_dumb_remove>
    4562:	7b63      	ldrb	r3, [r4, #13]
    4564:	f023 0302 	bic.w	r3, r3, #2
    4568:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    456a:	2600      	movs	r6, #0
    456c:	60a6      	str	r6, [r4, #8]
    456e:	f104 0018 	add.w	r0, r4, #24
    4572:	f001 feac 	bl	62ce <z_abort_timeout>
    4576:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    457a:	4620      	mov	r0, r4
    457c:	f7ff fe6c 	bl	4258 <ready_thread>
    4580:	e7e5      	b.n	454e <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4586:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4588:	4601      	mov	r1, r0
    458a:	4805      	ldr	r0, [pc, #20]	; (45a0 <end_thread+0x98>)
    458c:	f001 fdaa 	bl	60e4 <z_priq_dumb_remove>
}
    4590:	e7c9      	b.n	4526 <end_thread+0x1e>
		update_cache(1);
    4592:	2001      	movs	r0, #1
    4594:	f7ff fd88 	bl	40a8 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    4598:	4628      	mov	r0, r5
    459a:	f7ff fae3 	bl	3b64 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    459e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45a0:	2000097c 	.word	0x2000097c

000045a4 <z_sched_init>:
{
    45a4:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    45a6:	4804      	ldr	r0, [pc, #16]	; (45b8 <z_sched_init+0x14>)
    45a8:	f001 fe76 	bl	6298 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    45ac:	2100      	movs	r1, #0
    45ae:	4608      	mov	r0, r1
    45b0:	f7ff fd0a 	bl	3fc8 <k_sched_time_slice_set>
}
    45b4:	bd08      	pop	{r3, pc}
    45b6:	bf00      	nop
    45b8:	20000978 	.word	0x20000978

000045bc <z_impl_k_yield>:
{
    45bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45be:	f04f 0320 	mov.w	r3, #32
    45c2:	f3ef 8611 	mrs	r6, BASEPRI
    45c6:	f383 8812 	msr	BASEPRI_MAX, r3
    45ca:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    45ce:	4c1c      	ldr	r4, [pc, #112]	; (4640 <z_impl_k_yield+0x84>)
    45d0:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    45d2:	7b4b      	ldrb	r3, [r1, #13]
    45d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    45d8:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    45da:	f104 0720 	add.w	r7, r4, #32
    45de:	4638      	mov	r0, r7
    45e0:	f001 fd80 	bl	60e4 <z_priq_dumb_remove>
	queue_thread(_current);
    45e4:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    45e6:	7b6b      	ldrb	r3, [r5, #13]
    45e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    45ec:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    45ee:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    45f0:	42bc      	cmp	r4, r7
    45f2:	d023      	beq.n	463c <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    45f4:	b16c      	cbz	r4, 4612 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    45f6:	4621      	mov	r1, r4
    45f8:	4628      	mov	r0, r5
    45fa:	f001 fd54 	bl	60a6 <z_sched_prio_cmp>
    45fe:	2800      	cmp	r0, #0
    4600:	dc16      	bgt.n	4630 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4602:	b134      	cbz	r4, 4612 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    4604:	4b0e      	ldr	r3, [pc, #56]	; (4640 <z_impl_k_yield+0x84>)
    4606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4608:	429c      	cmp	r4, r3
    460a:	d002      	beq.n	4612 <z_impl_k_yield+0x56>
    460c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    460e:	2c00      	cmp	r4, #0
    4610:	d1f0      	bne.n	45f4 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    4612:	4b0b      	ldr	r3, [pc, #44]	; (4640 <z_impl_k_yield+0x84>)
    4614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4616:	f103 0120 	add.w	r1, r3, #32
    461a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    461c:	606a      	str	r2, [r5, #4]
	tail->next = node;
    461e:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4620:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    4622:	2001      	movs	r0, #1
    4624:	f7ff fd40 	bl	40a8 <update_cache>
    4628:	4630      	mov	r0, r6
    462a:	f7fc ff7b 	bl	1524 <arch_swap>
}
    462e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    4630:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    4632:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4634:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4636:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4638:	6065      	str	r5, [r4, #4]
}
    463a:	e7f2      	b.n	4622 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    463c:	2400      	movs	r4, #0
    463e:	e7d9      	b.n	45f4 <z_impl_k_yield+0x38>
    4640:	2000095c 	.word	0x2000095c

00004644 <z_tick_sleep>:
{
    4644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    4648:	ea50 0301 	orrs.w	r3, r0, r1
    464c:	d038      	beq.n	46c0 <z_tick_sleep+0x7c>
    464e:	4604      	mov	r4, r0
    4650:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    4652:	f06f 0301 	mvn.w	r3, #1
    4656:	1a1b      	subs	r3, r3, r0
    4658:	f04f 32ff 	mov.w	r2, #4294967295
    465c:	eb62 0201 	sbc.w	r2, r2, r1
    4660:	2b01      	cmp	r3, #1
    4662:	f172 0300 	sbcs.w	r3, r2, #0
    4666:	db2f      	blt.n	46c8 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4668:	f06f 0501 	mvn.w	r5, #1
    466c:	1a2d      	subs	r5, r5, r0
    466e:	f04f 0320 	mov.w	r3, #32
    4672:	f3ef 8811 	mrs	r8, BASEPRI
    4676:	f383 8812 	msr	BASEPRI_MAX, r3
    467a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    467e:	4f14      	ldr	r7, [pc, #80]	; (46d0 <z_tick_sleep+0x8c>)
    4680:	68b8      	ldr	r0, [r7, #8]
    4682:	4b14      	ldr	r3, [pc, #80]	; (46d4 <z_tick_sleep+0x90>)
    4684:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4686:	f7ff fe45 	bl	4314 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    468a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    468c:	4622      	mov	r2, r4
    468e:	4633      	mov	r3, r6
    4690:	4911      	ldr	r1, [pc, #68]	; (46d8 <z_tick_sleep+0x94>)
    4692:	3018      	adds	r0, #24
    4694:	f000 f8ee 	bl	4874 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4698:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    469a:	7b53      	ldrb	r3, [r2, #13]
    469c:	f043 0310 	orr.w	r3, r3, #16
    46a0:	7353      	strb	r3, [r2, #13]
    46a2:	4640      	mov	r0, r8
    46a4:	f7fc ff3e 	bl	1524 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    46a8:	f001 fe71 	bl	638e <sys_clock_tick_get_32>
    46ac:	1a28      	subs	r0, r5, r0
    46ae:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    46b2:	2801      	cmp	r0, #1
    46b4:	f173 0300 	sbcs.w	r3, r3, #0
    46b8:	da00      	bge.n	46bc <z_tick_sleep+0x78>
	return 0;
    46ba:	2000      	movs	r0, #0
}
    46bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    46c0:	f7ff ff7c 	bl	45bc <z_impl_k_yield>
		return 0;
    46c4:	2000      	movs	r0, #0
    46c6:	e7f9      	b.n	46bc <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    46c8:	f001 fe61 	bl	638e <sys_clock_tick_get_32>
    46cc:	1905      	adds	r5, r0, r4
    46ce:	e7ce      	b.n	466e <z_tick_sleep+0x2a>
    46d0:	2000095c 	.word	0x2000095c
    46d4:	20000988 	.word	0x20000988
    46d8:	0000613b 	.word	0x0000613b

000046dc <z_impl_k_sleep>:
{
    46dc:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    46de:	f1b1 3fff 	cmp.w	r1, #4294967295
    46e2:	bf08      	it	eq
    46e4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    46e8:	d01a      	beq.n	4720 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    46ea:	f7ff ffab 	bl	4644 <z_tick_sleep>
    46ee:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    46f0:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    46f2:	0151      	lsls	r1, r2, #5
    46f4:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    46f8:	0143      	lsls	r3, r0, #5
    46fa:	1a1b      	subs	r3, r3, r0
    46fc:	eb61 0102 	sbc.w	r1, r1, r2
    4700:	0088      	lsls	r0, r1, #2
    4702:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    4706:	009b      	lsls	r3, r3, #2
    4708:	eb13 030c 	adds.w	r3, r3, ip
    470c:	eb42 0000 	adc.w	r0, r2, r0
    4710:	00c0      	lsls	r0, r0, #3
    4712:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    4716:	f3c3 3310 	ubfx	r3, r3, #12, #17
    471a:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    471e:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    4720:	4b03      	ldr	r3, [pc, #12]	; (4730 <z_impl_k_sleep+0x54>)
    4722:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4724:	f7ff fe86 	bl	4434 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4728:	f04f 30ff 	mov.w	r0, #4294967295
    472c:	e7f7      	b.n	471e <z_impl_k_sleep+0x42>
    472e:	bf00      	nop
    4730:	2000095c 	.word	0x2000095c

00004734 <z_impl_z_current_get>:
}
    4734:	4b01      	ldr	r3, [pc, #4]	; (473c <z_impl_z_current_get+0x8>)
    4736:	6898      	ldr	r0, [r3, #8]
    4738:	4770      	bx	lr
    473a:	bf00      	nop
    473c:	2000095c 	.word	0x2000095c

00004740 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    4740:	b538      	push	{r3, r4, r5, lr}
    4742:	f04f 0320 	mov.w	r3, #32
    4746:	f3ef 8511 	mrs	r5, BASEPRI
    474a:	f383 8812 	msr	BASEPRI_MAX, r3
    474e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    4752:	7b03      	ldrb	r3, [r0, #12]
    4754:	f013 0f01 	tst.w	r3, #1
    4758:	d109      	bne.n	476e <z_thread_abort+0x2e>
    475a:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    475c:	7b43      	ldrb	r3, [r0, #13]
    475e:	f013 0f08 	tst.w	r3, #8
    4762:	d00f      	beq.n	4784 <z_thread_abort+0x44>
	__asm__ volatile(
    4764:	f385 8811 	msr	BASEPRI, r5
    4768:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    476c:	e009      	b.n	4782 <z_thread_abort+0x42>
    476e:	f385 8811 	msr	BASEPRI, r5
    4772:	f3bf 8f6f 	isb	sy
		k_panic();
    4776:	4040      	eors	r0, r0
    4778:	f380 8811 	msr	BASEPRI, r0
    477c:	f04f 0004 	mov.w	r0, #4
    4780:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4782:	bd38      	pop	{r3, r4, r5, pc}
	end_thread(thread);
    4784:	f7ff fec0 	bl	4508 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    4788:	4b08      	ldr	r3, [pc, #32]	; (47ac <z_thread_abort+0x6c>)
    478a:	689b      	ldr	r3, [r3, #8]
    478c:	42a3      	cmp	r3, r4
    478e:	d004      	beq.n	479a <z_thread_abort+0x5a>
    4790:	f385 8811 	msr	BASEPRI, r5
    4794:	f3bf 8f6f 	isb	sy
    4798:	e7f3      	b.n	4782 <z_thread_abort+0x42>
    479a:	f3ef 8305 	mrs	r3, IPSR
    479e:	2b00      	cmp	r3, #0
    47a0:	d1f6      	bne.n	4790 <z_thread_abort+0x50>
    47a2:	4628      	mov	r0, r5
    47a4:	f7fc febe 	bl	1524 <arch_swap>
	return ret;
    47a8:	e7f2      	b.n	4790 <z_thread_abort+0x50>
    47aa:	bf00      	nop
    47ac:	2000095c 	.word	0x2000095c

000047b0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    47b0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    47b2:	4806      	ldr	r0, [pc, #24]	; (47cc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    47b4:	4a06      	ldr	r2, [pc, #24]	; (47d0 <z_data_copy+0x20>)
    47b6:	1a12      	subs	r2, r2, r0
    47b8:	4906      	ldr	r1, [pc, #24]	; (47d4 <z_data_copy+0x24>)
    47ba:	f001 fbd7 	bl	5f6c <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    47be:	4a06      	ldr	r2, [pc, #24]	; (47d8 <z_data_copy+0x28>)
    47c0:	4906      	ldr	r1, [pc, #24]	; (47dc <z_data_copy+0x2c>)
    47c2:	4807      	ldr	r0, [pc, #28]	; (47e0 <z_data_copy+0x30>)
    47c4:	f001 fbd2 	bl	5f6c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    47c8:	bd08      	pop	{r3, pc}
    47ca:	bf00      	nop
    47cc:	20000000 	.word	0x20000000
    47d0:	20000194 	.word	0x20000194
    47d4:	00006a04 	.word	0x00006a04
    47d8:	00000000 	.word	0x00000000
    47dc:	00006a04 	.word	0x00006a04
    47e0:	20000000 	.word	0x20000000

000047e4 <first>:
	return list->head == list;
    47e4:	4b03      	ldr	r3, [pc, #12]	; (47f4 <first+0x10>)
    47e6:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    47e8:	4298      	cmp	r0, r3
    47ea:	d000      	beq.n	47ee <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    47ec:	4770      	bx	lr
    47ee:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    47f0:	e7fc      	b.n	47ec <first+0x8>
    47f2:	bf00      	nop
    47f4:	200000cc 	.word	0x200000cc

000047f8 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    47f8:	b130      	cbz	r0, 4808 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    47fa:	4a04      	ldr	r2, [pc, #16]	; (480c <next+0x14>)
    47fc:	6852      	ldr	r2, [r2, #4]
    47fe:	4290      	cmp	r0, r2
    4800:	d001      	beq.n	4806 <next+0xe>
    4802:	6800      	ldr	r0, [r0, #0]
    4804:	4770      	bx	lr
    4806:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    4808:	4770      	bx	lr
    480a:	bf00      	nop
    480c:	200000cc 	.word	0x200000cc

00004810 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    4810:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4812:	4b04      	ldr	r3, [pc, #16]	; (4824 <elapsed+0x14>)
    4814:	681b      	ldr	r3, [r3, #0]
    4816:	b10b      	cbz	r3, 481c <elapsed+0xc>
    4818:	2000      	movs	r0, #0
}
    481a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    481c:	f7fe f8a4 	bl	2968 <sys_clock_elapsed>
    4820:	e7fb      	b.n	481a <elapsed+0xa>
    4822:	bf00      	nop
    4824:	20000994 	.word	0x20000994

00004828 <next_timeout>:

static int32_t next_timeout(void)
{
    4828:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    482a:	f7ff ffdb 	bl	47e4 <first>
    482e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    4830:	f7ff ffee 	bl	4810 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4834:	b17c      	cbz	r4, 4856 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4836:	6923      	ldr	r3, [r4, #16]
    4838:	6962      	ldr	r2, [r4, #20]
    483a:	1a1b      	subs	r3, r3, r0
    483c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    4840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4844:	f170 0200 	sbcs.w	r2, r0, #0
    4848:	da08      	bge.n	485c <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    484a:	2800      	cmp	r0, #0
    484c:	db01      	blt.n	4852 <next_timeout+0x2a>
    484e:	4618      	mov	r0, r3
    4850:	e006      	b.n	4860 <next_timeout+0x38>
    4852:	2300      	movs	r3, #0
    4854:	e7fb      	b.n	484e <next_timeout+0x26>
		ret = MAX_WAIT;
    4856:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    485a:	e001      	b.n	4860 <next_timeout+0x38>
    485c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4860:	4b03      	ldr	r3, [pc, #12]	; (4870 <next_timeout+0x48>)
    4862:	691b      	ldr	r3, [r3, #16]
    4864:	b113      	cbz	r3, 486c <next_timeout+0x44>
    4866:	4283      	cmp	r3, r0
    4868:	da00      	bge.n	486c <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    486a:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    486c:	bd10      	pop	{r4, pc}
    486e:	bf00      	nop
    4870:	2000095c 	.word	0x2000095c

00004874 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4874:	f1b3 3fff 	cmp.w	r3, #4294967295
    4878:	bf08      	it	eq
    487a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    487e:	d07d      	beq.n	497c <z_add_timeout+0x108>
{
    4880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4884:	4604      	mov	r4, r0
    4886:	4692      	mov	sl, r2
    4888:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    488a:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    488c:	2300      	movs	r3, #0
	__asm__ volatile(
    488e:	f04f 0220 	mov.w	r2, #32
    4892:	f3ef 8711 	mrs	r7, BASEPRI
    4896:	f382 8812 	msr	BASEPRI_MAX, r2
    489a:	f3bf 8f6f 	isb	sy
    489e:	e021      	b.n	48e4 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    48a0:	f11a 0801 	adds.w	r8, sl, #1
    48a4:	f145 0900 	adc.w	r9, r5, #0
    48a8:	f7ff ffb2 	bl	4810 <elapsed>
    48ac:	eb18 0300 	adds.w	r3, r8, r0
    48b0:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    48b4:	6123      	str	r3, [r4, #16]
    48b6:	6160      	str	r0, [r4, #20]
    48b8:	e036      	b.n	4928 <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    48ba:	1a51      	subs	r1, r2, r1
    48bc:	eb66 0303 	sbc.w	r3, r6, r3
    48c0:	6101      	str	r1, [r0, #16]
    48c2:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    48c4:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    48c6:	6063      	str	r3, [r4, #4]
	node->next = successor;
    48c8:	6020      	str	r0, [r4, #0]
	prev->next = node;
    48ca:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    48cc:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    48ce:	2800      	cmp	r0, #0
    48d0:	d03e      	beq.n	4950 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    48d2:	f7ff ff87 	bl	47e4 <first>
    48d6:	4284      	cmp	r4, r0
    48d8:	d041      	beq.n	495e <z_add_timeout+0xea>
	__asm__ volatile(
    48da:	f387 8811 	msr	BASEPRI, r7
    48de:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    48e2:	2301      	movs	r3, #1
    48e4:	2b00      	cmp	r3, #0
    48e6:	d147      	bne.n	4978 <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    48e8:	4653      	mov	r3, sl
    48ea:	f06f 0101 	mvn.w	r1, #1
    48ee:	ebb1 010a 	subs.w	r1, r1, sl
    48f2:	f04f 30ff 	mov.w	r0, #4294967295
    48f6:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    48fa:	2a00      	cmp	r2, #0
    48fc:	dbd0      	blt.n	48a0 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    48fe:	4a20      	ldr	r2, [pc, #128]	; (4980 <z_add_timeout+0x10c>)
    4900:	6811      	ldr	r1, [r2, #0]
    4902:	6852      	ldr	r2, [r2, #4]
    4904:	185b      	adds	r3, r3, r1
    4906:	eb42 0205 	adc.w	r2, r2, r5
    490a:	f06f 0101 	mvn.w	r1, #1
    490e:	1acb      	subs	r3, r1, r3
    4910:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    4914:	4618      	mov	r0, r3
    4916:	4611      	mov	r1, r2
    4918:	2b01      	cmp	r3, #1
    491a:	f172 0300 	sbcs.w	r3, r2, #0
    491e:	da01      	bge.n	4924 <z_add_timeout+0xb0>
    4920:	2001      	movs	r0, #1
    4922:	2100      	movs	r1, #0
    4924:	6120      	str	r0, [r4, #16]
    4926:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4928:	f7ff ff5c 	bl	47e4 <first>
    492c:	2800      	cmp	r0, #0
    492e:	d0ce      	beq.n	48ce <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
    4930:	6902      	ldr	r2, [r0, #16]
    4932:	6946      	ldr	r6, [r0, #20]
    4934:	6921      	ldr	r1, [r4, #16]
    4936:	6963      	ldr	r3, [r4, #20]
    4938:	4291      	cmp	r1, r2
    493a:	eb73 0c06 	sbcs.w	ip, r3, r6
    493e:	dbbc      	blt.n	48ba <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    4940:	1a89      	subs	r1, r1, r2
    4942:	eb63 0306 	sbc.w	r3, r3, r6
    4946:	6121      	str	r1, [r4, #16]
    4948:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    494a:	f7ff ff55 	bl	47f8 <next>
    494e:	e7ed      	b.n	492c <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
    4950:	4b0c      	ldr	r3, [pc, #48]	; (4984 <z_add_timeout+0x110>)
    4952:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4954:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    4956:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4958:	6014      	str	r4, [r2, #0]
	list->tail = node;
    495a:	605c      	str	r4, [r3, #4]
}
    495c:	e7b9      	b.n	48d2 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    495e:	f7ff ff63 	bl	4828 <next_timeout>

			if (next_time == 0 ||
    4962:	4603      	mov	r3, r0
    4964:	b118      	cbz	r0, 496e <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
    4966:	4a08      	ldr	r2, [pc, #32]	; (4988 <z_add_timeout+0x114>)
    4968:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    496a:	4282      	cmp	r2, r0
    496c:	d0b5      	beq.n	48da <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
    496e:	2100      	movs	r1, #0
    4970:	4618      	mov	r0, r3
    4972:	f7fd ffc7 	bl	2904 <sys_clock_set_timeout>
    4976:	e7b0      	b.n	48da <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    497c:	4770      	bx	lr
    497e:	bf00      	nop
    4980:	20000318 	.word	0x20000318
    4984:	200000cc 	.word	0x200000cc
    4988:	2000095c 	.word	0x2000095c

0000498c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    498c:	b570      	push	{r4, r5, r6, lr}
    498e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4990:	f7ff fc0a 	bl	41a8 <z_time_slice>
	__asm__ volatile(
    4994:	f04f 0320 	mov.w	r3, #32
    4998:	f3ef 8611 	mrs	r6, BASEPRI
    499c:	f383 8812 	msr	BASEPRI_MAX, r3
    49a0:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    49a4:	4b28      	ldr	r3, [pc, #160]	; (4a48 <sys_clock_announce+0xbc>)
    49a6:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    49a8:	e021      	b.n	49ee <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    49aa:	4a28      	ldr	r2, [pc, #160]	; (4a4c <sys_clock_announce+0xc0>)
    49ac:	6813      	ldr	r3, [r2, #0]
    49ae:	6851      	ldr	r1, [r2, #4]
    49b0:	195b      	adds	r3, r3, r5
    49b2:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    49b6:	6013      	str	r3, [r2, #0]
    49b8:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    49ba:	2200      	movs	r2, #0
    49bc:	2300      	movs	r3, #0
    49be:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    49c2:	4620      	mov	r0, r4
    49c4:	f001 fc6c 	bl	62a0 <remove_timeout>
	__asm__ volatile(
    49c8:	f386 8811 	msr	BASEPRI, r6
    49cc:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    49d0:	68a3      	ldr	r3, [r4, #8]
    49d2:	4620      	mov	r0, r4
    49d4:	4798      	blx	r3
	__asm__ volatile(
    49d6:	f04f 0320 	mov.w	r3, #32
    49da:	f3ef 8611 	mrs	r6, BASEPRI
    49de:	f383 8812 	msr	BASEPRI_MAX, r3
    49e2:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    49e6:	4a18      	ldr	r2, [pc, #96]	; (4a48 <sys_clock_announce+0xbc>)
    49e8:	6813      	ldr	r3, [r2, #0]
    49ea:	1b5b      	subs	r3, r3, r5
    49ec:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    49ee:	f7ff fef9 	bl	47e4 <first>
    49f2:	4604      	mov	r4, r0
    49f4:	b140      	cbz	r0, 4a08 <sys_clock_announce+0x7c>
    49f6:	6905      	ldr	r5, [r0, #16]
    49f8:	6942      	ldr	r2, [r0, #20]
    49fa:	4b13      	ldr	r3, [pc, #76]	; (4a48 <sys_clock_announce+0xbc>)
    49fc:	681b      	ldr	r3, [r3, #0]
    49fe:	17d9      	asrs	r1, r3, #31
    4a00:	42ab      	cmp	r3, r5
    4a02:	eb71 0302 	sbcs.w	r3, r1, r2
    4a06:	dad0      	bge.n	49aa <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
    4a08:	b144      	cbz	r4, 4a1c <sys_clock_announce+0x90>
		first()->dticks -= announce_remaining;
    4a0a:	4b0f      	ldr	r3, [pc, #60]	; (4a48 <sys_clock_announce+0xbc>)
    4a0c:	6819      	ldr	r1, [r3, #0]
    4a0e:	6923      	ldr	r3, [r4, #16]
    4a10:	6962      	ldr	r2, [r4, #20]
    4a12:	1a5b      	subs	r3, r3, r1
    4a14:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    4a18:	6123      	str	r3, [r4, #16]
    4a1a:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    4a1c:	4a0b      	ldr	r2, [pc, #44]	; (4a4c <sys_clock_announce+0xc0>)
    4a1e:	4d0a      	ldr	r5, [pc, #40]	; (4a48 <sys_clock_announce+0xbc>)
    4a20:	6828      	ldr	r0, [r5, #0]
    4a22:	6813      	ldr	r3, [r2, #0]
    4a24:	6851      	ldr	r1, [r2, #4]
    4a26:	181b      	adds	r3, r3, r0
    4a28:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    4a2c:	6013      	str	r3, [r2, #0]
    4a2e:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    4a30:	2400      	movs	r4, #0
    4a32:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4a34:	f7ff fef8 	bl	4828 <next_timeout>
    4a38:	4621      	mov	r1, r4
    4a3a:	f7fd ff63 	bl	2904 <sys_clock_set_timeout>
	__asm__ volatile(
    4a3e:	f386 8811 	msr	BASEPRI, r6
    4a42:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4a46:	bd70      	pop	{r4, r5, r6, pc}
    4a48:	20000994 	.word	0x20000994
    4a4c:	20000318 	.word	0x20000318

00004a50 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4a50:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    4a52:	2200      	movs	r2, #0
	__asm__ volatile(
    4a54:	f04f 0320 	mov.w	r3, #32
    4a58:	f3ef 8411 	mrs	r4, BASEPRI
    4a5c:	f383 8812 	msr	BASEPRI_MAX, r3
    4a60:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    4a64:	4613      	mov	r3, r2
    4a66:	4611      	mov	r1, r2
    4a68:	e00c      	b.n	4a84 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    4a6a:	f7ff fed1 	bl	4810 <elapsed>
    4a6e:	4a07      	ldr	r2, [pc, #28]	; (4a8c <sys_clock_tick_get+0x3c>)
    4a70:	6813      	ldr	r3, [r2, #0]
    4a72:	6851      	ldr	r1, [r2, #4]
    4a74:	18c3      	adds	r3, r0, r3
    4a76:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    4a7a:	f384 8811 	msr	BASEPRI, r4
    4a7e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4a82:	2201      	movs	r2, #1
    4a84:	2a00      	cmp	r2, #0
    4a86:	d0f0      	beq.n	4a6a <sys_clock_tick_get+0x1a>
	}
	return t;
}
    4a88:	4618      	mov	r0, r3
    4a8a:	bd10      	pop	{r4, pc}
    4a8c:	20000318 	.word	0x20000318

00004a90 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    4a90:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4a92:	4a03      	ldr	r2, [pc, #12]	; (4aa0 <boot_banner+0x10>)
    4a94:	4903      	ldr	r1, [pc, #12]	; (4aa4 <boot_banner+0x14>)
    4a96:	4804      	ldr	r0, [pc, #16]	; (4aa8 <boot_banner+0x18>)
    4a98:	f000 f9a8 	bl	4dec <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    4a9c:	bd08      	pop	{r3, pc}
    4a9e:	bf00      	nop
    4aa0:	00006748 	.word	0x00006748
    4aa4:	00006940 	.word	0x00006940
    4aa8:	00006950 	.word	0x00006950

00004aac <nrf_cc3xx_platform_init_no_rng>:
    4aac:	b510      	push	{r4, lr}
    4aae:	4c0a      	ldr	r4, [pc, #40]	; (4ad8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4ab0:	6823      	ldr	r3, [r4, #0]
    4ab2:	b11b      	cbz	r3, 4abc <nrf_cc3xx_platform_init_no_rng+0x10>
    4ab4:	2301      	movs	r3, #1
    4ab6:	2000      	movs	r0, #0
    4ab8:	6023      	str	r3, [r4, #0]
    4aba:	bd10      	pop	{r4, pc}
    4abc:	f000 f8dc 	bl	4c78 <CC_LibInitNoRng>
    4ac0:	2800      	cmp	r0, #0
    4ac2:	d0f7      	beq.n	4ab4 <nrf_cc3xx_platform_init_no_rng+0x8>
    4ac4:	3801      	subs	r0, #1
    4ac6:	2807      	cmp	r0, #7
    4ac8:	d803      	bhi.n	4ad2 <nrf_cc3xx_platform_init_no_rng+0x26>
    4aca:	4b04      	ldr	r3, [pc, #16]	; (4adc <nrf_cc3xx_platform_init_no_rng+0x30>)
    4acc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4ad0:	bd10      	pop	{r4, pc}
    4ad2:	4803      	ldr	r0, [pc, #12]	; (4ae0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    4ad4:	bd10      	pop	{r4, pc}
    4ad6:	bf00      	nop
    4ad8:	20000998 	.word	0x20000998
    4adc:	00006978 	.word	0x00006978
    4ae0:	ffff8ffe 	.word	0xffff8ffe

00004ae4 <nrf_cc3xx_platform_abort>:
    4ae4:	f3bf 8f4f 	dsb	sy
    4ae8:	4905      	ldr	r1, [pc, #20]	; (4b00 <nrf_cc3xx_platform_abort+0x1c>)
    4aea:	4b06      	ldr	r3, [pc, #24]	; (4b04 <nrf_cc3xx_platform_abort+0x20>)
    4aec:	68ca      	ldr	r2, [r1, #12]
    4aee:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4af2:	4313      	orrs	r3, r2
    4af4:	60cb      	str	r3, [r1, #12]
    4af6:	f3bf 8f4f 	dsb	sy
    4afa:	bf00      	nop
    4afc:	e7fd      	b.n	4afa <nrf_cc3xx_platform_abort+0x16>
    4afe:	bf00      	nop
    4b00:	e000ed00 	.word	0xe000ed00
    4b04:	05fa0004 	.word	0x05fa0004

00004b08 <CC_PalAbort>:
    4b08:	b430      	push	{r4, r5}
    4b0a:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    4b0e:	2500      	movs	r5, #0
    4b10:	4b0b      	ldr	r3, [pc, #44]	; (4b40 <CC_PalAbort+0x38>)
    4b12:	4c0c      	ldr	r4, [pc, #48]	; (4b44 <CC_PalAbort+0x3c>)
    4b14:	490c      	ldr	r1, [pc, #48]	; (4b48 <CC_PalAbort+0x40>)
    4b16:	6849      	ldr	r1, [r1, #4]
    4b18:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4b1c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    4b20:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    4b24:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    4b28:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    4b2c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    4b30:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    4b34:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    4b38:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    4b3c:	bc30      	pop	{r4, r5}
    4b3e:	4708      	bx	r1
    4b40:	50845000 	.word	0x50845000
    4b44:	50844000 	.word	0x50844000
    4b48:	200000d4 	.word	0x200000d4

00004b4c <nrf_cc3xx_platform_set_abort>:
    4b4c:	4b02      	ldr	r3, [pc, #8]	; (4b58 <nrf_cc3xx_platform_set_abort+0xc>)
    4b4e:	e9d0 1200 	ldrd	r1, r2, [r0]
    4b52:	e9c3 1200 	strd	r1, r2, [r3]
    4b56:	4770      	bx	lr
    4b58:	200000d4 	.word	0x200000d4

00004b5c <mutex_free>:
    4b5c:	b510      	push	{r4, lr}
    4b5e:	4604      	mov	r4, r0
    4b60:	b130      	cbz	r0, 4b70 <mutex_free+0x14>
    4b62:	6863      	ldr	r3, [r4, #4]
    4b64:	06db      	lsls	r3, r3, #27
    4b66:	d502      	bpl.n	4b6e <mutex_free+0x12>
    4b68:	2300      	movs	r3, #0
    4b6a:	6023      	str	r3, [r4, #0]
    4b6c:	6063      	str	r3, [r4, #4]
    4b6e:	bd10      	pop	{r4, pc}
    4b70:	4b02      	ldr	r3, [pc, #8]	; (4b7c <mutex_free+0x20>)
    4b72:	4803      	ldr	r0, [pc, #12]	; (4b80 <mutex_free+0x24>)
    4b74:	685b      	ldr	r3, [r3, #4]
    4b76:	4798      	blx	r3
    4b78:	e7f3      	b.n	4b62 <mutex_free+0x6>
    4b7a:	bf00      	nop
    4b7c:	200000d4 	.word	0x200000d4
    4b80:	00006998 	.word	0x00006998

00004b84 <mutex_lock>:
    4b84:	b1b0      	cbz	r0, 4bb4 <mutex_lock+0x30>
    4b86:	6843      	ldr	r3, [r0, #4]
    4b88:	b193      	cbz	r3, 4bb0 <mutex_lock+0x2c>
    4b8a:	06db      	lsls	r3, r3, #27
    4b8c:	d50e      	bpl.n	4bac <mutex_lock+0x28>
    4b8e:	2301      	movs	r3, #1
    4b90:	e850 2f00 	ldrex	r2, [r0]
    4b94:	4619      	mov	r1, r3
    4b96:	e840 1c00 	strex	ip, r1, [r0]
    4b9a:	f09c 0f00 	teq	ip, #0
    4b9e:	d1f7      	bne.n	4b90 <mutex_lock+0xc>
    4ba0:	2a01      	cmp	r2, #1
    4ba2:	d0f5      	beq.n	4b90 <mutex_lock+0xc>
    4ba4:	f3bf 8f5f 	dmb	sy
    4ba8:	2000      	movs	r0, #0
    4baa:	4770      	bx	lr
    4bac:	4803      	ldr	r0, [pc, #12]	; (4bbc <mutex_lock+0x38>)
    4bae:	4770      	bx	lr
    4bb0:	4803      	ldr	r0, [pc, #12]	; (4bc0 <mutex_lock+0x3c>)
    4bb2:	4770      	bx	lr
    4bb4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4bb8:	4770      	bx	lr
    4bba:	bf00      	nop
    4bbc:	ffff8fe9 	.word	0xffff8fe9
    4bc0:	ffff8fea 	.word	0xffff8fea

00004bc4 <mutex_unlock>:
    4bc4:	4603      	mov	r3, r0
    4bc6:	b168      	cbz	r0, 4be4 <mutex_unlock+0x20>
    4bc8:	6842      	ldr	r2, [r0, #4]
    4bca:	b13a      	cbz	r2, 4bdc <mutex_unlock+0x18>
    4bcc:	06d2      	lsls	r2, r2, #27
    4bce:	d507      	bpl.n	4be0 <mutex_unlock+0x1c>
    4bd0:	f3bf 8f5f 	dmb	sy
    4bd4:	2200      	movs	r2, #0
    4bd6:	4610      	mov	r0, r2
    4bd8:	601a      	str	r2, [r3, #0]
    4bda:	4770      	bx	lr
    4bdc:	4803      	ldr	r0, [pc, #12]	; (4bec <mutex_unlock+0x28>)
    4bde:	4770      	bx	lr
    4be0:	4803      	ldr	r0, [pc, #12]	; (4bf0 <mutex_unlock+0x2c>)
    4be2:	4770      	bx	lr
    4be4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4be8:	4770      	bx	lr
    4bea:	bf00      	nop
    4bec:	ffff8fea 	.word	0xffff8fea
    4bf0:	ffff8fe9 	.word	0xffff8fe9

00004bf4 <mutex_init>:
    4bf4:	b510      	push	{r4, lr}
    4bf6:	4604      	mov	r4, r0
    4bf8:	b120      	cbz	r0, 4c04 <mutex_init+0x10>
    4bfa:	2200      	movs	r2, #0
    4bfc:	2311      	movs	r3, #17
    4bfe:	6022      	str	r2, [r4, #0]
    4c00:	6063      	str	r3, [r4, #4]
    4c02:	bd10      	pop	{r4, pc}
    4c04:	4801      	ldr	r0, [pc, #4]	; (4c0c <mutex_init+0x18>)
    4c06:	f7ff ff7f 	bl	4b08 <CC_PalAbort>
    4c0a:	e7f6      	b.n	4bfa <mutex_init+0x6>
    4c0c:	000069c0 	.word	0x000069c0

00004c10 <nrf_cc3xx_platform_set_mutexes>:
    4c10:	b570      	push	{r4, r5, r6, lr}
    4c12:	4c16      	ldr	r4, [pc, #88]	; (4c6c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    4c14:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4c18:	6806      	ldr	r6, [r0, #0]
    4c1a:	f8c4 c004 	str.w	ip, [r4, #4]
    4c1e:	f8d0 c008 	ldr.w	ip, [r0, #8]
    4c22:	68c0      	ldr	r0, [r0, #12]
    4c24:	f8c4 c008 	str.w	ip, [r4, #8]
    4c28:	60e0      	str	r0, [r4, #12]
    4c2a:	6026      	str	r6, [r4, #0]
    4c2c:	6808      	ldr	r0, [r1, #0]
    4c2e:	4b10      	ldr	r3, [pc, #64]	; (4c70 <nrf_cc3xx_platform_set_mutexes+0x60>)
    4c30:	4d10      	ldr	r5, [pc, #64]	; (4c74 <nrf_cc3xx_platform_set_mutexes+0x64>)
    4c32:	6018      	str	r0, [r3, #0]
    4c34:	6848      	ldr	r0, [r1, #4]
    4c36:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    4c3a:	6058      	str	r0, [r3, #4]
    4c3c:	6888      	ldr	r0, [r1, #8]
    4c3e:	6098      	str	r0, [r3, #8]
    4c40:	68c8      	ldr	r0, [r1, #12]
    4c42:	6909      	ldr	r1, [r1, #16]
    4c44:	60d8      	str	r0, [r3, #12]
    4c46:	6119      	str	r1, [r3, #16]
    4c48:	06d3      	lsls	r3, r2, #27
    4c4a:	d50d      	bpl.n	4c68 <nrf_cc3xx_platform_set_mutexes+0x58>
    4c4c:	2300      	movs	r3, #0
    4c4e:	f505 708a 	add.w	r0, r5, #276	; 0x114
    4c52:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    4c56:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    4c5a:	47b0      	blx	r6
    4c5c:	6823      	ldr	r3, [r4, #0]
    4c5e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    4c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4c66:	4718      	bx	r3
    4c68:	bd70      	pop	{r4, r5, r6, pc}
    4c6a:	bf00      	nop
    4c6c:	200000e4 	.word	0x200000e4
    4c70:	200000f4 	.word	0x200000f4
    4c74:	200009b0 	.word	0x200009b0

00004c78 <CC_LibInitNoRng>:
    4c78:	b508      	push	{r3, lr}
    4c7a:	f000 f811 	bl	4ca0 <CC_HalInit>
    4c7e:	b930      	cbnz	r0, 4c8e <CC_LibInitNoRng+0x16>
    4c80:	f000 f810 	bl	4ca4 <CC_PalInit>
    4c84:	b938      	cbnz	r0, 4c96 <CC_LibInitNoRng+0x1e>
    4c86:	4a05      	ldr	r2, [pc, #20]	; (4c9c <CC_LibInitNoRng+0x24>)
    4c88:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    4c8c:	bd08      	pop	{r3, pc}
    4c8e:	f000 f837 	bl	4d00 <CC_PalTerminate>
    4c92:	2003      	movs	r0, #3
    4c94:	bd08      	pop	{r3, pc}
    4c96:	2004      	movs	r0, #4
    4c98:	bd08      	pop	{r3, pc}
    4c9a:	bf00      	nop
    4c9c:	50845000 	.word	0x50845000

00004ca0 <CC_HalInit>:
    4ca0:	2000      	movs	r0, #0
    4ca2:	4770      	bx	lr

00004ca4 <CC_PalInit>:
    4ca4:	b510      	push	{r4, lr}
    4ca6:	4811      	ldr	r0, [pc, #68]	; (4cec <CC_PalInit+0x48>)
    4ca8:	f000 f848 	bl	4d3c <CC_PalMutexCreate>
    4cac:	b100      	cbz	r0, 4cb0 <CC_PalInit+0xc>
    4cae:	bd10      	pop	{r4, pc}
    4cb0:	480f      	ldr	r0, [pc, #60]	; (4cf0 <CC_PalInit+0x4c>)
    4cb2:	f000 f843 	bl	4d3c <CC_PalMutexCreate>
    4cb6:	2800      	cmp	r0, #0
    4cb8:	d1f9      	bne.n	4cae <CC_PalInit+0xa>
    4cba:	4c0e      	ldr	r4, [pc, #56]	; (4cf4 <CC_PalInit+0x50>)
    4cbc:	4620      	mov	r0, r4
    4cbe:	f000 f83d 	bl	4d3c <CC_PalMutexCreate>
    4cc2:	2800      	cmp	r0, #0
    4cc4:	d1f3      	bne.n	4cae <CC_PalInit+0xa>
    4cc6:	4b0c      	ldr	r3, [pc, #48]	; (4cf8 <CC_PalInit+0x54>)
    4cc8:	480c      	ldr	r0, [pc, #48]	; (4cfc <CC_PalInit+0x58>)
    4cca:	601c      	str	r4, [r3, #0]
    4ccc:	f000 f836 	bl	4d3c <CC_PalMutexCreate>
    4cd0:	4601      	mov	r1, r0
    4cd2:	2800      	cmp	r0, #0
    4cd4:	d1eb      	bne.n	4cae <CC_PalInit+0xa>
    4cd6:	f000 f82d 	bl	4d34 <CC_PalDmaInit>
    4cda:	4604      	mov	r4, r0
    4cdc:	b108      	cbz	r0, 4ce2 <CC_PalInit+0x3e>
    4cde:	4620      	mov	r0, r4
    4ce0:	bd10      	pop	{r4, pc}
    4ce2:	f000 f83f 	bl	4d64 <CC_PalPowerSaveModeInit>
    4ce6:	4620      	mov	r0, r4
    4ce8:	e7fa      	b.n	4ce0 <CC_PalInit+0x3c>
    4cea:	bf00      	nop
    4cec:	2000012c 	.word	0x2000012c
    4cf0:	20000120 	.word	0x20000120
    4cf4:	20000128 	.word	0x20000128
    4cf8:	20000130 	.word	0x20000130
    4cfc:	20000124 	.word	0x20000124

00004d00 <CC_PalTerminate>:
    4d00:	b508      	push	{r3, lr}
    4d02:	4808      	ldr	r0, [pc, #32]	; (4d24 <CC_PalTerminate+0x24>)
    4d04:	f000 f824 	bl	4d50 <CC_PalMutexDestroy>
    4d08:	4807      	ldr	r0, [pc, #28]	; (4d28 <CC_PalTerminate+0x28>)
    4d0a:	f000 f821 	bl	4d50 <CC_PalMutexDestroy>
    4d0e:	4807      	ldr	r0, [pc, #28]	; (4d2c <CC_PalTerminate+0x2c>)
    4d10:	f000 f81e 	bl	4d50 <CC_PalMutexDestroy>
    4d14:	4806      	ldr	r0, [pc, #24]	; (4d30 <CC_PalTerminate+0x30>)
    4d16:	f000 f81b 	bl	4d50 <CC_PalMutexDestroy>
    4d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4d1e:	f000 b80b 	b.w	4d38 <CC_PalDmaTerminate>
    4d22:	bf00      	nop
    4d24:	2000012c 	.word	0x2000012c
    4d28:	20000120 	.word	0x20000120
    4d2c:	20000128 	.word	0x20000128
    4d30:	20000124 	.word	0x20000124

00004d34 <CC_PalDmaInit>:
    4d34:	2000      	movs	r0, #0
    4d36:	4770      	bx	lr

00004d38 <CC_PalDmaTerminate>:
    4d38:	4770      	bx	lr
    4d3a:	bf00      	nop

00004d3c <CC_PalMutexCreate>:
    4d3c:	b508      	push	{r3, lr}
    4d3e:	4b03      	ldr	r3, [pc, #12]	; (4d4c <CC_PalMutexCreate+0x10>)
    4d40:	6802      	ldr	r2, [r0, #0]
    4d42:	681b      	ldr	r3, [r3, #0]
    4d44:	6810      	ldr	r0, [r2, #0]
    4d46:	4798      	blx	r3
    4d48:	2000      	movs	r0, #0
    4d4a:	bd08      	pop	{r3, pc}
    4d4c:	200000e4 	.word	0x200000e4

00004d50 <CC_PalMutexDestroy>:
    4d50:	b508      	push	{r3, lr}
    4d52:	4b03      	ldr	r3, [pc, #12]	; (4d60 <CC_PalMutexDestroy+0x10>)
    4d54:	6802      	ldr	r2, [r0, #0]
    4d56:	685b      	ldr	r3, [r3, #4]
    4d58:	6810      	ldr	r0, [r2, #0]
    4d5a:	4798      	blx	r3
    4d5c:	2000      	movs	r0, #0
    4d5e:	bd08      	pop	{r3, pc}
    4d60:	200000e4 	.word	0x200000e4

00004d64 <CC_PalPowerSaveModeInit>:
    4d64:	b570      	push	{r4, r5, r6, lr}
    4d66:	4c09      	ldr	r4, [pc, #36]	; (4d8c <CC_PalPowerSaveModeInit+0x28>)
    4d68:	4d09      	ldr	r5, [pc, #36]	; (4d90 <CC_PalPowerSaveModeInit+0x2c>)
    4d6a:	6920      	ldr	r0, [r4, #16]
    4d6c:	68ab      	ldr	r3, [r5, #8]
    4d6e:	4798      	blx	r3
    4d70:	b118      	cbz	r0, 4d7a <CC_PalPowerSaveModeInit+0x16>
    4d72:	4b08      	ldr	r3, [pc, #32]	; (4d94 <CC_PalPowerSaveModeInit+0x30>)
    4d74:	4808      	ldr	r0, [pc, #32]	; (4d98 <CC_PalPowerSaveModeInit+0x34>)
    4d76:	685b      	ldr	r3, [r3, #4]
    4d78:	4798      	blx	r3
    4d7a:	2100      	movs	r1, #0
    4d7c:	4a07      	ldr	r2, [pc, #28]	; (4d9c <CC_PalPowerSaveModeInit+0x38>)
    4d7e:	68eb      	ldr	r3, [r5, #12]
    4d80:	6011      	str	r1, [r2, #0]
    4d82:	6920      	ldr	r0, [r4, #16]
    4d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4d88:	4718      	bx	r3
    4d8a:	bf00      	nop
    4d8c:	200000f4 	.word	0x200000f4
    4d90:	200000e4 	.word	0x200000e4
    4d94:	200000d4 	.word	0x200000d4
    4d98:	000069e4 	.word	0x000069e4
    4d9c:	200009ac 	.word	0x200009ac

00004da0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4da0:	4602      	mov	r2, r0
    4da2:	b158      	cbz	r0, 4dbc <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4da4:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4da6:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4daa:	2b01      	cmp	r3, #1
    4dac:	d003      	beq.n	4db6 <sys_notify_validate+0x16>
    4dae:	2b03      	cmp	r3, #3
    4db0:	d107      	bne.n	4dc2 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4db2:	6803      	ldr	r3, [r0, #0]
    4db4:	b143      	cbz	r3, 4dc8 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4db6:	2000      	movs	r0, #0
    4db8:	6090      	str	r0, [r2, #8]
    4dba:	4770      	bx	lr
		return -EINVAL;
    4dbc:	f06f 0015 	mvn.w	r0, #21
    4dc0:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    4dc2:	f06f 0015 	mvn.w	r0, #21
    4dc6:	4770      	bx	lr
			rv = -EINVAL;
    4dc8:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4dcc:	4770      	bx	lr

00004dce <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    4dce:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4dd0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4dd2:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4dd6:	6081      	str	r1, [r0, #8]
	switch (method) {
    4dd8:	2a03      	cmp	r2, #3
    4dda:	d103      	bne.n	4de4 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4ddc:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4dde:	2200      	movs	r2, #0
    4de0:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4de2:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    4de4:	2000      	movs	r0, #0
    4de6:	e7fa      	b.n	4dde <sys_notify_finalize+0x10>

00004de8 <arch_printk_char_out>:
}
    4de8:	2000      	movs	r0, #0
    4dea:	4770      	bx	lr

00004dec <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    4dec:	b40f      	push	{r0, r1, r2, r3}
    4dee:	b500      	push	{lr}
    4df0:	b083      	sub	sp, #12
    4df2:	a904      	add	r1, sp, #16
    4df4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    4df8:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    4dfa:	f7fb fb4b 	bl	494 <vprintk>

	va_end(ap);
}
    4dfe:	b003      	add	sp, #12
    4e00:	f85d eb04 	ldr.w	lr, [sp], #4
    4e04:	b004      	add	sp, #16
    4e06:	4770      	bx	lr

00004e08 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    4e08:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4e0c:	8b01      	ldrh	r1, [r0, #24]
    4e0e:	f021 0107 	bic.w	r1, r1, #7
    4e12:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    4e14:	8301      	strh	r1, [r0, #24]
}
    4e16:	4770      	bx	lr

00004e18 <notify_monitors>:
{
    4e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e1c:	4606      	mov	r6, r0
    4e1e:	460f      	mov	r7, r1
    4e20:	4690      	mov	r8, r2
	return list->head;
    4e22:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4e24:	b119      	cbz	r1, 4e2e <notify_monitors+0x16>
    4e26:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    4e28:	b131      	cbz	r1, 4e38 <notify_monitors+0x20>
	return node->next;
    4e2a:	680c      	ldr	r4, [r1, #0]
    4e2c:	e004      	b.n	4e38 <notify_monitors+0x20>
    4e2e:	460c      	mov	r4, r1
    4e30:	e002      	b.n	4e38 <notify_monitors+0x20>
    4e32:	4623      	mov	r3, r4
    4e34:	4621      	mov	r1, r4
    4e36:	461c      	mov	r4, r3
    4e38:	b159      	cbz	r1, 4e52 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    4e3a:	684d      	ldr	r5, [r1, #4]
    4e3c:	4643      	mov	r3, r8
    4e3e:	463a      	mov	r2, r7
    4e40:	4630      	mov	r0, r6
    4e42:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4e44:	2c00      	cmp	r4, #0
    4e46:	d0f4      	beq.n	4e32 <notify_monitors+0x1a>
    4e48:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    4e4a:	2c00      	cmp	r4, #0
    4e4c:	d0f2      	beq.n	4e34 <notify_monitors+0x1c>
	return node->next;
    4e4e:	6823      	ldr	r3, [r4, #0]
    4e50:	e7f0      	b.n	4e34 <notify_monitors+0x1c>
}
    4e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004e56 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4e56:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4e58:	f013 0307 	ands.w	r3, r3, #7
    4e5c:	d103      	bne.n	4e66 <process_recheck+0x10>
	return list->head;
    4e5e:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    4e60:	b10a      	cbz	r2, 4e66 <process_recheck+0x10>
		evt = EVT_START;
    4e62:	2003      	movs	r0, #3
    4e64:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4e66:	2b02      	cmp	r3, #2
    4e68:	d003      	beq.n	4e72 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    4e6a:	2b01      	cmp	r3, #1
    4e6c:	d006      	beq.n	4e7c <process_recheck+0x26>
	int evt = EVT_NOP;
    4e6e:	2000      	movs	r0, #0
    4e70:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    4e72:	8b42      	ldrh	r2, [r0, #26]
    4e74:	2a00      	cmp	r2, #0
    4e76:	d1f8      	bne.n	4e6a <process_recheck+0x14>
		evt = EVT_STOP;
    4e78:	2004      	movs	r0, #4
    4e7a:	4770      	bx	lr
    4e7c:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    4e7e:	b10b      	cbz	r3, 4e84 <process_recheck+0x2e>
		evt = EVT_RESET;
    4e80:	2005      	movs	r0, #5
}
    4e82:	4770      	bx	lr
	int evt = EVT_NOP;
    4e84:	2000      	movs	r0, #0
    4e86:	4770      	bx	lr

00004e88 <process_complete>:
{
    4e88:	b510      	push	{r4, lr}
    4e8a:	4604      	mov	r4, r0
    4e8c:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4e8e:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    4e90:	2a00      	cmp	r2, #0
    4e92:	db07      	blt.n	4ea4 <process_complete+0x1c>
    4e94:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4e98:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4e9a:	2a01      	cmp	r2, #1
    4e9c:	d90e      	bls.n	4ebc <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4e9e:	2b04      	cmp	r3, #4
    4ea0:	d033      	beq.n	4f0a <process_complete+0x82>
}
    4ea2:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    4ea4:	e9d0 0100 	ldrd	r0, r1, [r0]
    4ea8:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    4eac:	2300      	movs	r3, #0
    4eae:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    4eb0:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    4eb2:	2101      	movs	r1, #1
    4eb4:	4620      	mov	r0, r4
    4eb6:	f7ff ffa7 	bl	4e08 <set_state>
    4eba:	e7f2      	b.n	4ea2 <process_complete+0x1a>
		*clients = mgr->clients;
    4ebc:	e9d0 0100 	ldrd	r0, r1, [r0]
    4ec0:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    4ec4:	2200      	movs	r2, #0
    4ec6:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    4ec8:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    4eca:	2b06      	cmp	r3, #6
    4ecc:	d118      	bne.n	4f00 <process_complete+0x78>
	return list->head;
    4ece:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4ed2:	b13b      	cbz	r3, 4ee4 <process_complete+0x5c>
				mgr->refs += 1U;
    4ed4:	8b62      	ldrh	r2, [r4, #26]
    4ed6:	3201      	adds	r2, #1
    4ed8:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    4eda:	2b00      	cmp	r3, #0
    4edc:	d0f9      	beq.n	4ed2 <process_complete+0x4a>
	return node->next;
    4ede:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4ee0:	2b00      	cmp	r3, #0
    4ee2:	d1f6      	bne.n	4ed2 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    4ee4:	2102      	movs	r1, #2
    4ee6:	4620      	mov	r0, r4
    4ee8:	f7ff ff8e 	bl	4e08 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    4eec:	4620      	mov	r0, r4
    4eee:	f7ff ffb2 	bl	4e56 <process_recheck>
    4ef2:	2800      	cmp	r0, #0
    4ef4:	d0d5      	beq.n	4ea2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4ef6:	8b23      	ldrh	r3, [r4, #24]
    4ef8:	f043 0320 	orr.w	r3, r3, #32
    4efc:	8323      	strh	r3, [r4, #24]
    4efe:	e7d0      	b.n	4ea2 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    4f00:	2100      	movs	r1, #0
    4f02:	4620      	mov	r0, r4
    4f04:	f7ff ff80 	bl	4e08 <set_state>
    4f08:	e7f0      	b.n	4eec <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    4f0a:	2100      	movs	r1, #0
    4f0c:	f7ff ff7c 	bl	4e08 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    4f10:	4620      	mov	r0, r4
    4f12:	f7ff ffa0 	bl	4e56 <process_recheck>
    4f16:	2800      	cmp	r0, #0
    4f18:	d0c3      	beq.n	4ea2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4f1a:	8b23      	ldrh	r3, [r4, #24]
    4f1c:	f043 0320 	orr.w	r3, r3, #32
    4f20:	8323      	strh	r3, [r4, #24]
}
    4f22:	e7be      	b.n	4ea2 <process_complete+0x1a>

00004f24 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    4f24:	b158      	cbz	r0, 4f3e <validate_args+0x1a>
{
    4f26:	b510      	push	{r4, lr}
    4f28:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4f2a:	b159      	cbz	r1, 4f44 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    4f2c:	1d08      	adds	r0, r1, #4
    4f2e:	f7ff ff37 	bl	4da0 <sys_notify_validate>
	if ((rv == 0)
    4f32:	b918      	cbnz	r0, 4f3c <validate_args+0x18>
	    && ((cli->notify.flags
    4f34:	68a3      	ldr	r3, [r4, #8]
    4f36:	f033 0303 	bics.w	r3, r3, #3
    4f3a:	d106      	bne.n	4f4a <validate_args+0x26>
}
    4f3c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    4f3e:	f06f 0015 	mvn.w	r0, #21
}
    4f42:	4770      	bx	lr
		return -EINVAL;
    4f44:	f06f 0015 	mvn.w	r0, #21
    4f48:	e7f8      	b.n	4f3c <validate_args+0x18>
		rv = -EINVAL;
    4f4a:	f06f 0015 	mvn.w	r0, #21
    4f4e:	e7f5      	b.n	4f3c <validate_args+0x18>

00004f50 <notify_one>:
{
    4f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f54:	4607      	mov	r7, r0
    4f56:	460c      	mov	r4, r1
    4f58:	4616      	mov	r6, r2
    4f5a:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4f5c:	4619      	mov	r1, r3
    4f5e:	1d20      	adds	r0, r4, #4
    4f60:	f7ff ff35 	bl	4dce <sys_notify_finalize>
	if (cb) {
    4f64:	b128      	cbz	r0, 4f72 <notify_one+0x22>
    4f66:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    4f68:	462b      	mov	r3, r5
    4f6a:	4632      	mov	r2, r6
    4f6c:	4621      	mov	r1, r4
    4f6e:	4638      	mov	r0, r7
    4f70:	47c0      	blx	r8
}
    4f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004f76 <notify_all>:
{
    4f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f7a:	4680      	mov	r8, r0
    4f7c:	460c      	mov	r4, r1
    4f7e:	4617      	mov	r7, r2
    4f80:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    4f82:	e004      	b.n	4f8e <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    4f84:	4633      	mov	r3, r6
    4f86:	463a      	mov	r2, r7
    4f88:	4640      	mov	r0, r8
    4f8a:	f7ff ffe1 	bl	4f50 <notify_one>
	return list->head;
    4f8e:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    4f90:	b131      	cbz	r1, 4fa0 <notify_all+0x2a>
	return node->next;
    4f92:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    4f94:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4f96:	6863      	ldr	r3, [r4, #4]
    4f98:	428b      	cmp	r3, r1
    4f9a:	d1f3      	bne.n	4f84 <notify_all+0xe>
	list->tail = node;
    4f9c:	6065      	str	r5, [r4, #4]
}
    4f9e:	e7f1      	b.n	4f84 <notify_all+0xe>
}
    4fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004fa4 <transition_complete>:
{
    4fa4:	b508      	push	{r3, lr}
	__asm__ volatile(
    4fa6:	f04f 0c20 	mov.w	ip, #32
    4faa:	f3ef 8211 	mrs	r2, BASEPRI
    4fae:	f38c 8812 	msr	BASEPRI_MAX, ip
    4fb2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4fb6:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    4fb8:	2101      	movs	r1, #1
    4fba:	f7fb fa79 	bl	4b0 <process_event>
}
    4fbe:	bd08      	pop	{r3, pc}

00004fc0 <onoff_manager_init>:
	if ((mgr == NULL)
    4fc0:	4603      	mov	r3, r0
    4fc2:	b170      	cbz	r0, 4fe2 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    4fc4:	b181      	cbz	r1, 4fe8 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    4fc6:	680a      	ldr	r2, [r1, #0]
    4fc8:	b18a      	cbz	r2, 4fee <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    4fca:	684a      	ldr	r2, [r1, #4]
    4fcc:	b192      	cbz	r2, 4ff4 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4fce:	2000      	movs	r0, #0
    4fd0:	6018      	str	r0, [r3, #0]
    4fd2:	6058      	str	r0, [r3, #4]
    4fd4:	6098      	str	r0, [r3, #8]
    4fd6:	60d8      	str	r0, [r3, #12]
    4fd8:	6118      	str	r0, [r3, #16]
    4fda:	6158      	str	r0, [r3, #20]
    4fdc:	6198      	str	r0, [r3, #24]
    4fde:	6119      	str	r1, [r3, #16]
	return 0;
    4fe0:	4770      	bx	lr
		return -EINVAL;
    4fe2:	f06f 0015 	mvn.w	r0, #21
    4fe6:	4770      	bx	lr
    4fe8:	f06f 0015 	mvn.w	r0, #21
    4fec:	4770      	bx	lr
    4fee:	f06f 0015 	mvn.w	r0, #21
    4ff2:	4770      	bx	lr
    4ff4:	f06f 0015 	mvn.w	r0, #21
}
    4ff8:	4770      	bx	lr

00004ffa <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ffc:	4604      	mov	r4, r0
    4ffe:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5000:	f7ff ff90 	bl	4f24 <validate_args>

	if (rv < 0) {
    5004:	1e06      	subs	r6, r0, #0
    5006:	db37      	blt.n	5078 <onoff_request+0x7e>
    5008:	f04f 0320 	mov.w	r3, #32
    500c:	f3ef 8211 	mrs	r2, BASEPRI
    5010:	f383 8812 	msr	BASEPRI_MAX, r3
    5014:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5018:	8b25      	ldrh	r5, [r4, #24]
    501a:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    501e:	8b63      	ldrh	r3, [r4, #26]
    5020:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5024:	428b      	cmp	r3, r1
    5026:	d02f      	beq.n	5088 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    5028:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    502a:	2d02      	cmp	r5, #2
    502c:	d00c      	beq.n	5048 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    502e:	b18d      	cbz	r5, 5054 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    5030:	2d04      	cmp	r5, #4
    5032:	d00f      	beq.n	5054 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    5034:	2d06      	cmp	r5, #6
    5036:	d00d      	beq.n	5054 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    5038:	2d05      	cmp	r5, #5
    503a:	d01f      	beq.n	507c <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    503c:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    5040:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    5042:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    5044:	4608      	mov	r0, r1
    5046:	e00a      	b.n	505e <onoff_request+0x64>
		mgr->refs += 1U;
    5048:	3301      	adds	r3, #1
    504a:	8363      	strh	r3, [r4, #26]
		notify = true;
    504c:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    504e:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    5050:	4618      	mov	r0, r3
    5052:	e004      	b.n	505e <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    5054:	fab5 f385 	clz	r3, r5
    5058:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    505a:	2100      	movs	r1, #0
		add_client = true;
    505c:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    505e:	b128      	cbz	r0, 506c <onoff_request+0x72>
	parent->next = child;
    5060:	2000      	movs	r0, #0
    5062:	6038      	str	r0, [r7, #0]
	return list->tail;
    5064:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    5066:	b1a8      	cbz	r0, 5094 <onoff_request+0x9a>
	parent->next = child;
    5068:	6007      	str	r7, [r0, #0]
	list->tail = node;
    506a:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    506c:	b9ab      	cbnz	r3, 509a <onoff_request+0xa0>
	__asm__ volatile(
    506e:	f382 8811 	msr	BASEPRI, r2
    5072:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5076:	b9a9      	cbnz	r1, 50a4 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    5078:	4630      	mov	r0, r6
    507a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    507c:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    5080:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    5082:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    5084:	4608      	mov	r0, r1
    5086:	e7ea      	b.n	505e <onoff_request+0x64>
		rv = -EAGAIN;
    5088:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    508c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    508e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    5090:	4608      	mov	r0, r1
    5092:	e7e4      	b.n	505e <onoff_request+0x64>
    5094:	6067      	str	r7, [r4, #4]
	list->head = node;
    5096:	6027      	str	r7, [r4, #0]
}
    5098:	e7e8      	b.n	506c <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    509a:	2102      	movs	r1, #2
    509c:	4620      	mov	r0, r4
    509e:	f7fb fa07 	bl	4b0 <process_event>
    50a2:	e7e9      	b.n	5078 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    50a4:	2300      	movs	r3, #0
    50a6:	462a      	mov	r2, r5
    50a8:	4639      	mov	r1, r7
    50aa:	4620      	mov	r0, r4
    50ac:	f7ff ff50 	bl	4f50 <notify_one>
    50b0:	e7e2      	b.n	5078 <onoff_request+0x7e>

000050b2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    50b2:	b508      	push	{r3, lr}
    50b4:	4604      	mov	r4, r0
    50b6:	4608      	mov	r0, r1
    50b8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    50ba:	461a      	mov	r2, r3
    50bc:	47a0      	blx	r4
	return z_impl_z_current_get();
    50be:	f7ff fb39 	bl	4734 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    50c2:	f7fc fca5 	bl	1a10 <z_impl_k_thread_abort>

000050c6 <extract_decimal>:
{
    50c6:	4684      	mov	ip, r0
	const char *sp = *str;
    50c8:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    50ca:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    50cc:	e005      	b.n	50da <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    50ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    50d2:	3201      	adds	r2, #1
    50d4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    50d8:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    50da:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    50dc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    50e0:	2909      	cmp	r1, #9
    50e2:	d9f4      	bls.n	50ce <extract_decimal+0x8>
	*str = sp;
    50e4:	f8cc 2000 	str.w	r2, [ip]
}
    50e8:	4770      	bx	lr

000050ea <encode_uint>:
{
    50ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50ee:	b083      	sub	sp, #12
    50f0:	4604      	mov	r4, r0
    50f2:	460d      	mov	r5, r1
    50f4:	9201      	str	r2, [sp, #4]
    50f6:	469a      	mov	sl, r3
    50f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    50fa:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    50fc:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    5100:	2b6f      	cmp	r3, #111	; 0x6f
    5102:	d00f      	beq.n	5124 <encode_uint+0x3a>
    5104:	d906      	bls.n	5114 <encode_uint+0x2a>
    5106:	2b70      	cmp	r3, #112	; 0x70
    5108:	d00f      	beq.n	512a <encode_uint+0x40>
    510a:	2b78      	cmp	r3, #120	; 0x78
    510c:	d110      	bne.n	5130 <encode_uint+0x46>
		return 16;
    510e:	f04f 0910 	mov.w	r9, #16
    5112:	e026      	b.n	5162 <encode_uint+0x78>
	switch (specifier) {
    5114:	2b58      	cmp	r3, #88	; 0x58
    5116:	d002      	beq.n	511e <encode_uint+0x34>
    5118:	f04f 090a 	mov.w	r9, #10
    511c:	e021      	b.n	5162 <encode_uint+0x78>
		return 16;
    511e:	f04f 0910 	mov.w	r9, #16
    5122:	e01e      	b.n	5162 <encode_uint+0x78>
		return 8;
    5124:	f04f 0908 	mov.w	r9, #8
    5128:	e01b      	b.n	5162 <encode_uint+0x78>
		return 16;
    512a:	f04f 0910 	mov.w	r9, #16
    512e:	e018      	b.n	5162 <encode_uint+0x78>
	switch (specifier) {
    5130:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    5134:	e015      	b.n	5162 <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5136:	f1bb 0f19 	cmp.w	fp, #25
    513a:	d821      	bhi.n	5180 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    513c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    513e:	3237      	adds	r2, #55	; 0x37
    5140:	b2d2      	uxtb	r2, r2
    5142:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    5146:	463a      	mov	r2, r7
    5148:	4643      	mov	r3, r8
    514a:	4620      	mov	r0, r4
    514c:	4629      	mov	r1, r5
    514e:	f7fb f801 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    5152:	42bc      	cmp	r4, r7
    5154:	f175 0300 	sbcs.w	r3, r5, #0
    5158:	d316      	bcc.n	5188 <encode_uint+0x9e>
    515a:	4556      	cmp	r6, sl
    515c:	d914      	bls.n	5188 <encode_uint+0x9e>
		value /= radix;
    515e:	4604      	mov	r4, r0
    5160:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    5162:	f04f 0800 	mov.w	r8, #0
    5166:	464f      	mov	r7, r9
    5168:	464a      	mov	r2, r9
    516a:	4643      	mov	r3, r8
    516c:	4620      	mov	r0, r4
    516e:	4629      	mov	r1, r5
    5170:	f7fa fff0 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5174:	2a09      	cmp	r2, #9
    5176:	d8de      	bhi.n	5136 <encode_uint+0x4c>
    5178:	b2d2      	uxtb	r2, r2
    517a:	3230      	adds	r2, #48	; 0x30
    517c:	b2d2      	uxtb	r2, r2
    517e:	e7e0      	b.n	5142 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5180:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5182:	3257      	adds	r2, #87	; 0x57
    5184:	b2d2      	uxtb	r2, r2
    5186:	e7dc      	b.n	5142 <encode_uint+0x58>
	if (conv->flag_hash) {
    5188:	9b01      	ldr	r3, [sp, #4]
    518a:	781b      	ldrb	r3, [r3, #0]
    518c:	f013 0f20 	tst.w	r3, #32
    5190:	d005      	beq.n	519e <encode_uint+0xb4>
		if (radix == 8) {
    5192:	f1b9 0f08 	cmp.w	r9, #8
    5196:	d006      	beq.n	51a6 <encode_uint+0xbc>
		} else if (radix == 16) {
    5198:	f1b9 0f10 	cmp.w	r9, #16
    519c:	d009      	beq.n	51b2 <encode_uint+0xc8>
}
    519e:	4630      	mov	r0, r6
    51a0:	b003      	add	sp, #12
    51a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    51a6:	9a01      	ldr	r2, [sp, #4]
    51a8:	7893      	ldrb	r3, [r2, #2]
    51aa:	f043 0308 	orr.w	r3, r3, #8
    51ae:	7093      	strb	r3, [r2, #2]
    51b0:	e7f5      	b.n	519e <encode_uint+0xb4>
			conv->altform_0c = true;
    51b2:	9a01      	ldr	r2, [sp, #4]
    51b4:	7893      	ldrb	r3, [r2, #2]
    51b6:	f043 0310 	orr.w	r3, r3, #16
    51ba:	7093      	strb	r3, [r2, #2]
    51bc:	e7ef      	b.n	519e <encode_uint+0xb4>

000051be <outs>:
{
    51be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51c2:	4607      	mov	r7, r0
    51c4:	460e      	mov	r6, r1
    51c6:	4614      	mov	r4, r2
    51c8:	4698      	mov	r8, r3
	size_t count = 0;
    51ca:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    51cc:	e006      	b.n	51dc <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    51ce:	4631      	mov	r1, r6
    51d0:	f814 0b01 	ldrb.w	r0, [r4], #1
    51d4:	47b8      	blx	r7
		if (rc < 0) {
    51d6:	2800      	cmp	r0, #0
    51d8:	db09      	blt.n	51ee <outs+0x30>
		++count;
    51da:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    51dc:	4544      	cmp	r4, r8
    51de:	d3f6      	bcc.n	51ce <outs+0x10>
    51e0:	f1b8 0f00 	cmp.w	r8, #0
    51e4:	d102      	bne.n	51ec <outs+0x2e>
    51e6:	7823      	ldrb	r3, [r4, #0]
    51e8:	2b00      	cmp	r3, #0
    51ea:	d1f0      	bne.n	51ce <outs+0x10>
	return (int)count;
    51ec:	4628      	mov	r0, r5
}
    51ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000051f2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    51f2:	4770      	bx	lr

000051f4 <pm_state_exit_post_ops>:
    51f4:	2300      	movs	r3, #0
    51f6:	f383 8811 	msr	BASEPRI, r3
    51fa:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    51fe:	4770      	bx	lr

00005200 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    5200:	2000      	movs	r0, #0
    5202:	4770      	bx	lr

00005204 <abort_function>:
{
    5204:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5206:	2000      	movs	r0, #0
    5208:	f7fb fe70 	bl	eec <sys_reboot>

0000520c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    520c:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    520e:	f000 fe8f 	bl	5f30 <z_fatal_error>
}
    5212:	bd08      	pop	{r3, pc}

00005214 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    5214:	b508      	push	{r3, lr}
    5216:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5218:	6800      	ldr	r0, [r0, #0]
    521a:	f7ff fff7 	bl	520c <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    521e:	bd08      	pop	{r3, pc}

00005220 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    5220:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5222:	2100      	movs	r1, #0
    5224:	2001      	movs	r0, #1
    5226:	f7ff fff1 	bl	520c <z_arm_fatal_error>
}
    522a:	bd08      	pop	{r3, pc}

0000522c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    522c:	b508      	push	{r3, lr}
	handler();
    522e:	f7fc f959 	bl	14e4 <z_SysNmiOnReset>
	z_arm_int_exit();
    5232:	f7fc fa29 	bl	1688 <z_arm_exc_exit>
}
    5236:	bd08      	pop	{r3, pc}

00005238 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    5238:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    523c:	f383 880b 	msr	PSPLIM, r3
}
    5240:	4770      	bx	lr

00005242 <memory_fault_recoverable>:
}
    5242:	2000      	movs	r0, #0
    5244:	4770      	bx	lr

00005246 <debug_monitor>:
	*recoverable = false;
    5246:	2300      	movs	r3, #0
    5248:	700b      	strb	r3, [r1, #0]
}
    524a:	4770      	bx	lr

0000524c <fault_handle>:
{
    524c:	b508      	push	{r3, lr}
	*recoverable = false;
    524e:	2300      	movs	r3, #0
    5250:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    5252:	1ecb      	subs	r3, r1, #3
    5254:	2b09      	cmp	r3, #9
    5256:	d81a      	bhi.n	528e <fault_handle+0x42>
    5258:	e8df f003 	tbb	[pc, r3]
    525c:	110d0905 	.word	0x110d0905
    5260:	19191919 	.word	0x19191919
    5264:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    5266:	4611      	mov	r1, r2
    5268:	f7fc fa94 	bl	1794 <hard_fault>
		break;
    526c:	e010      	b.n	5290 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    526e:	2100      	movs	r1, #0
    5270:	f7fc fa18 	bl	16a4 <mem_manage_fault>
		break;
    5274:	e00c      	b.n	5290 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    5276:	2100      	movs	r1, #0
    5278:	f7fc fa4a 	bl	1710 <bus_fault>
		break;
    527c:	e008      	b.n	5290 <fault_handle+0x44>
		reason = usage_fault(esf);
    527e:	f7fc fa71 	bl	1764 <usage_fault>
		break;
    5282:	e005      	b.n	5290 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    5284:	4611      	mov	r1, r2
    5286:	f7ff ffde 	bl	5246 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    528a:	2000      	movs	r0, #0
		break;
    528c:	e000      	b.n	5290 <fault_handle+0x44>
	switch (fault) {
    528e:	2000      	movs	r0, #0
}
    5290:	bd08      	pop	{r3, pc}

00005292 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    5292:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    5296:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    529a:	d001      	beq.n	52a0 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    529c:	b2c0      	uxtb	r0, r0
    529e:	4770      	bx	lr
	}

	return -EINVAL;
    52a0:	f06f 0015 	mvn.w	r0, #21
}
    52a4:	4770      	bx	lr

000052a6 <region_init>:
{
    52a6:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
    52a8:	680b      	ldr	r3, [r1, #0]
    52aa:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
    52ae:	7a0b      	ldrb	r3, [r1, #8]
    52b0:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    52b4:	68ca      	ldr	r2, [r1, #12]
    52b6:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    52ba:	095b      	lsrs	r3, r3, #5
    52bc:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
    52c0:	f042 0201 	orr.w	r2, r2, #1
    52c4:	ea4c 010e 	orr.w	r1, ip, lr
    52c8:	f7fc fbe6 	bl	1a98 <mpu_set_region>
}
    52cc:	bd08      	pop	{r3, pc}

000052ce <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    52ce:	6843      	ldr	r3, [r0, #4]
		&&
    52d0:	2b1f      	cmp	r3, #31
    52d2:	d90a      	bls.n	52ea <mpu_partition_is_valid+0x1c>
		&&
    52d4:	f013 0f1f 	tst.w	r3, #31
    52d8:	d001      	beq.n	52de <mpu_partition_is_valid+0x10>
		&&
    52da:	2000      	movs	r0, #0
    52dc:	4770      	bx	lr
		((part->start &
    52de:	6803      	ldr	r3, [r0, #0]
		&&
    52e0:	f013 0f1f 	tst.w	r3, #31
    52e4:	d003      	beq.n	52ee <mpu_partition_is_valid+0x20>
    52e6:	2000      	movs	r0, #0
    52e8:	4770      	bx	lr
    52ea:	2000      	movs	r0, #0
    52ec:	4770      	bx	lr
    52ee:	2001      	movs	r0, #1
}
    52f0:	4770      	bx	lr

000052f2 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    52f2:	2807      	cmp	r0, #7
    52f4:	d805      	bhi.n	5302 <region_allocate_and_init+0x10>
{
    52f6:	b510      	push	{r4, lr}
    52f8:	4604      	mov	r4, r0
	region_init(index, region_conf);
    52fa:	f7ff ffd4 	bl	52a6 <region_init>
	return index;
    52fe:	4620      	mov	r0, r4
}
    5300:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5302:	f06f 0015 	mvn.w	r0, #21
}
    5306:	4770      	bx	lr

00005308 <mpu_configure_region>:
{
    5308:	b510      	push	{r4, lr}
    530a:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
    530c:	680b      	ldr	r3, [r1, #0]
    530e:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    5310:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    5312:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    5316:	f89d 2008 	ldrb.w	r2, [sp, #8]
    531a:	f36c 0204 	bfi	r2, ip, #0, #5
    531e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
    5322:	8949      	ldrh	r1, [r1, #10]
    5324:	b2d2      	uxtb	r2, r2
    5326:	f361 1247 	bfi	r2, r1, #5, #3
    532a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    532e:	f023 031f 	bic.w	r3, r3, #31
    5332:	4423      	add	r3, r4
    5334:	3b01      	subs	r3, #1
    5336:	f023 031f 	bic.w	r3, r3, #31
    533a:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    533c:	4669      	mov	r1, sp
    533e:	f7ff ffd8 	bl	52f2 <region_allocate_and_init>
}
    5342:	b004      	add	sp, #16
    5344:	bd10      	pop	{r4, pc}

00005346 <arm_core_mpu_configure_static_mpu_regions>:
{
    5346:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    5348:	f7fc fc84 	bl	1c54 <mpu_configure_static_mpu_regions>
}
    534c:	bd08      	pop	{r3, pc}

0000534e <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    534e:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    5350:	f7fc fc8a 	bl	1c68 <mpu_mark_areas_for_dynamic_regions>
}
    5354:	bd08      	pop	{r3, pc}

00005356 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    5356:	4603      	mov	r3, r0
    5358:	b1a2      	cbz	r2, 5384 <strncpy+0x2e>
{
    535a:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    535c:	780c      	ldrb	r4, [r1, #0]
    535e:	b12c      	cbz	r4, 536c <strncpy+0x16>
		*d = *s;
    5360:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    5364:	3101      	adds	r1, #1
		d++;
		n--;
    5366:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    5368:	2a00      	cmp	r2, #0
    536a:	d1f7      	bne.n	535c <strncpy+0x6>
	}

	while (n > 0) {
    536c:	b122      	cbz	r2, 5378 <strncpy+0x22>
		*d = '\0';
    536e:	2100      	movs	r1, #0
    5370:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    5374:	3a01      	subs	r2, #1
    5376:	e7f9      	b.n	536c <strncpy+0x16>
	}

	return dest;
}
    5378:	bc10      	pop	{r4}
    537a:	4770      	bx	lr
		*d = '\0';
    537c:	2100      	movs	r1, #0
    537e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5382:	3a01      	subs	r2, #1
	while (n > 0) {
    5384:	2a00      	cmp	r2, #0
    5386:	d1f9      	bne.n	537c <strncpy+0x26>
    5388:	4770      	bx	lr

0000538a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    538a:	4603      	mov	r3, r0
	size_t n = 0;
    538c:	2000      	movs	r0, #0

	while (*s != '\0') {
    538e:	e001      	b.n	5394 <strlen+0xa>
		s++;
    5390:	3301      	adds	r3, #1
		n++;
    5392:	3001      	adds	r0, #1
	while (*s != '\0') {
    5394:	781a      	ldrb	r2, [r3, #0]
    5396:	2a00      	cmp	r2, #0
    5398:	d1fa      	bne.n	5390 <strlen+0x6>
	}

	return n;
}
    539a:	4770      	bx	lr

0000539c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    539c:	4603      	mov	r3, r0
	size_t n = 0;
    539e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    53a0:	e001      	b.n	53a6 <strnlen+0xa>
		s++;
    53a2:	3301      	adds	r3, #1
		n++;
    53a4:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    53a6:	781a      	ldrb	r2, [r3, #0]
    53a8:	b10a      	cbz	r2, 53ae <strnlen+0x12>
    53aa:	4288      	cmp	r0, r1
    53ac:	d3f9      	bcc.n	53a2 <strnlen+0x6>
	}

	return n;
}
    53ae:	4770      	bx	lr

000053b0 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    53b0:	ea80 0301 	eor.w	r3, r0, r1
    53b4:	f013 0f03 	tst.w	r3, #3
    53b8:	d001      	beq.n	53be <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    53ba:	4603      	mov	r3, r0
    53bc:	e023      	b.n	5406 <memcpy+0x56>
    53be:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    53c0:	f013 0f03 	tst.w	r3, #3
    53c4:	d00f      	beq.n	53e6 <memcpy+0x36>
			if (n == 0) {
    53c6:	b30a      	cbz	r2, 540c <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    53c8:	f811 cb01 	ldrb.w	ip, [r1], #1
    53cc:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    53d0:	3a01      	subs	r2, #1
    53d2:	e7f5      	b.n	53c0 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    53d4:	f811 cb01 	ldrb.w	ip, [r1], #1
    53d8:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    53dc:	3a01      	subs	r2, #1
	while (n > 0) {
    53de:	2a00      	cmp	r2, #0
    53e0:	d1f8      	bne.n	53d4 <memcpy+0x24>
	}

	return d;
}
    53e2:	bc10      	pop	{r4}
    53e4:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    53e6:	2a03      	cmp	r2, #3
    53e8:	d90d      	bls.n	5406 <memcpy+0x56>
{
    53ea:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    53ec:	f851 4b04 	ldr.w	r4, [r1], #4
    53f0:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    53f4:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    53f6:	2a03      	cmp	r2, #3
    53f8:	d8f8      	bhi.n	53ec <memcpy+0x3c>
    53fa:	e7f0      	b.n	53de <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    53fc:	f811 cb01 	ldrb.w	ip, [r1], #1
    5400:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5404:	3a01      	subs	r2, #1
	while (n > 0) {
    5406:	2a00      	cmp	r2, #0
    5408:	d1f8      	bne.n	53fc <memcpy+0x4c>
    540a:	4770      	bx	lr
}
    540c:	4770      	bx	lr

0000540e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    540e:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    5412:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5414:	e002      	b.n	541c <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    5416:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    541a:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    541c:	f013 0f03 	tst.w	r3, #3
    5420:	d002      	beq.n	5428 <memset+0x1a>
		if (n == 0) {
    5422:	2a00      	cmp	r2, #0
    5424:	d1f7      	bne.n	5416 <memset+0x8>
    5426:	e00f      	b.n	5448 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    5428:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    542a:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    542e:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    5432:	2a03      	cmp	r2, #3
    5434:	d906      	bls.n	5444 <memset+0x36>
		*(d_word++) = c_word;
    5436:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    543a:	3a04      	subs	r2, #4
    543c:	e7f9      	b.n	5432 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    543e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5442:	3a01      	subs	r2, #1
	while (n > 0) {
    5444:	2a00      	cmp	r2, #0
    5446:	d1fa      	bne.n	543e <memset+0x30>
	}

	return buf;
}
    5448:	4770      	bx	lr

0000544a <_stdout_hook_default>:
}
    544a:	f04f 30ff 	mov.w	r0, #4294967295
    544e:	4770      	bx	lr

00005450 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    5450:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    5452:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5456:	0089      	lsls	r1, r1, #2
    5458:	3170      	adds	r1, #112	; 0x70
}
    545a:	4408      	add	r0, r1
    545c:	4770      	bx	lr

0000545e <get_sub_config>:
	const struct nrf_clock_control_config *config =
    545e:	6840      	ldr	r0, [r0, #4]
}
    5460:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    5464:	4770      	bx	lr

00005466 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    5466:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    5468:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    546c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5470:	4770      	bx	lr

00005472 <get_status>:
{
    5472:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5474:	b2c9      	uxtb	r1, r1
    5476:	f7ff ffeb 	bl	5450 <get_sub_data>
    547a:	6880      	ldr	r0, [r0, #8]
}
    547c:	f000 0007 	and.w	r0, r0, #7
    5480:	bd08      	pop	{r3, pc}

00005482 <set_off_state>:
	__asm__ volatile(
    5482:	f04f 0320 	mov.w	r3, #32
    5486:	f3ef 8211 	mrs	r2, BASEPRI
    548a:	f383 8812 	msr	BASEPRI_MAX, r3
    548e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5492:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5494:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5498:	d001      	beq.n	549e <set_off_state+0x1c>
    549a:	428b      	cmp	r3, r1
    549c:	d107      	bne.n	54ae <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    549e:	2301      	movs	r3, #1
    54a0:	6003      	str	r3, [r0, #0]
	int err = 0;
    54a2:	2000      	movs	r0, #0
	__asm__ volatile(
    54a4:	f382 8811 	msr	BASEPRI, r2
    54a8:	f3bf 8f6f 	isb	sy
}
    54ac:	4770      	bx	lr
		err = -EPERM;
    54ae:	f04f 30ff 	mov.w	r0, #4294967295
    54b2:	e7f7      	b.n	54a4 <set_off_state+0x22>

000054b4 <set_starting_state>:
	__asm__ volatile(
    54b4:	f04f 0320 	mov.w	r3, #32
    54b8:	f3ef 8211 	mrs	r2, BASEPRI
    54bc:	f383 8812 	msr	BASEPRI_MAX, r3
    54c0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    54c4:	6803      	ldr	r3, [r0, #0]
    54c6:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    54ca:	f003 0307 	and.w	r3, r3, #7
    54ce:	2b01      	cmp	r3, #1
    54d0:	d008      	beq.n	54e4 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    54d2:	458c      	cmp	ip, r1
    54d4:	d009      	beq.n	54ea <set_starting_state+0x36>
		err = -EPERM;
    54d6:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    54da:	f382 8811 	msr	BASEPRI, r2
    54de:	f3bf 8f6f 	isb	sy
}
    54e2:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    54e4:	6001      	str	r1, [r0, #0]
	int err = 0;
    54e6:	2000      	movs	r0, #0
    54e8:	e7f7      	b.n	54da <set_starting_state+0x26>
		err = -EALREADY;
    54ea:	f06f 0077 	mvn.w	r0, #119	; 0x77
    54ee:	e7f4      	b.n	54da <set_starting_state+0x26>

000054f0 <set_on_state>:
	__asm__ volatile(
    54f0:	f04f 0320 	mov.w	r3, #32
    54f4:	f3ef 8211 	mrs	r2, BASEPRI
    54f8:	f383 8812 	msr	BASEPRI_MAX, r3
    54fc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5500:	6803      	ldr	r3, [r0, #0]
    5502:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5506:	f043 0302 	orr.w	r3, r3, #2
    550a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    550c:	f382 8811 	msr	BASEPRI, r2
    5510:	f3bf 8f6f 	isb	sy
}
    5514:	4770      	bx	lr

00005516 <clkstarted_handle>:
{
    5516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5518:	4606      	mov	r6, r0
    551a:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    551c:	f7ff ff98 	bl	5450 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    5520:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    5522:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    5524:	2300      	movs	r3, #0
    5526:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    552a:	f7ff ffe1 	bl	54f0 <set_on_state>
	if (callback) {
    552e:	b11d      	cbz	r5, 5538 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5530:	463a      	mov	r2, r7
    5532:	4621      	mov	r1, r4
    5534:	4630      	mov	r0, r6
    5536:	47a8      	blx	r5
}
    5538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000553a <stop>:
{
    553a:	b570      	push	{r4, r5, r6, lr}
    553c:	4606      	mov	r6, r0
    553e:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5540:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5542:	4621      	mov	r1, r4
    5544:	f7ff ff84 	bl	5450 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    5548:	4629      	mov	r1, r5
    554a:	3008      	adds	r0, #8
    554c:	f7ff ff99 	bl	5482 <set_off_state>
	if (err < 0) {
    5550:	2800      	cmp	r0, #0
    5552:	db06      	blt.n	5562 <stop+0x28>
	get_sub_config(dev, type)->stop();
    5554:	4621      	mov	r1, r4
    5556:	4630      	mov	r0, r6
    5558:	f7ff ff81 	bl	545e <get_sub_config>
    555c:	6843      	ldr	r3, [r0, #4]
    555e:	4798      	blx	r3
	return 0;
    5560:	2000      	movs	r0, #0
}
    5562:	bd70      	pop	{r4, r5, r6, pc}

00005564 <api_stop>:
{
    5564:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    5566:	2280      	movs	r2, #128	; 0x80
    5568:	f7ff ffe7 	bl	553a <stop>
}
    556c:	bd08      	pop	{r3, pc}

0000556e <async_start>:
{
    556e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5572:	4606      	mov	r6, r0
    5574:	4690      	mov	r8, r2
    5576:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5578:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    557a:	4629      	mov	r1, r5
    557c:	f7ff ff68 	bl	5450 <get_sub_data>
    5580:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    5582:	9906      	ldr	r1, [sp, #24]
    5584:	3008      	adds	r0, #8
    5586:	f7ff ff95 	bl	54b4 <set_starting_state>
	if (err < 0) {
    558a:	2800      	cmp	r0, #0
    558c:	db09      	blt.n	55a2 <async_start+0x34>
	subdata->cb = cb;
    558e:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    5592:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    5594:	4629      	mov	r1, r5
    5596:	4630      	mov	r0, r6
    5598:	f7ff ff61 	bl	545e <get_sub_config>
    559c:	6803      	ldr	r3, [r0, #0]
    559e:	4798      	blx	r3
	return 0;
    55a0:	2000      	movs	r0, #0
}
    55a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000055a6 <api_start>:
{
    55a6:	b510      	push	{r4, lr}
    55a8:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    55aa:	2480      	movs	r4, #128	; 0x80
    55ac:	9400      	str	r4, [sp, #0]
    55ae:	f7ff ffde 	bl	556e <async_start>
}
    55b2:	b002      	add	sp, #8
    55b4:	bd10      	pop	{r4, pc}

000055b6 <onoff_started_callback>:
{
    55b6:	b510      	push	{r4, lr}
    55b8:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    55ba:	b2c9      	uxtb	r1, r1
    55bc:	f7ff ff53 	bl	5466 <get_onoff_manager>
	notify(mgr, 0);
    55c0:	2100      	movs	r1, #0
    55c2:	47a0      	blx	r4
}
    55c4:	bd10      	pop	{r4, pc}

000055c6 <hfclk_start>:
{
    55c6:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    55c8:	2001      	movs	r0, #1
    55ca:	f000 fc0e 	bl	5dea <nrfx_clock_start>
}
    55ce:	bd08      	pop	{r3, pc}

000055d0 <hfclkaudio_start>:
{
    55d0:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    55d2:	2003      	movs	r0, #3
    55d4:	f000 fc09 	bl	5dea <nrfx_clock_start>
}
    55d8:	bd08      	pop	{r3, pc}

000055da <hfclk192m_start>:
{
    55da:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    55dc:	2002      	movs	r0, #2
    55de:	f000 fc04 	bl	5dea <nrfx_clock_start>
}
    55e2:	bd08      	pop	{r3, pc}

000055e4 <lfclk_start>:
{
    55e4:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    55e6:	2000      	movs	r0, #0
    55e8:	f000 fbff 	bl	5dea <nrfx_clock_start>
}
    55ec:	bd08      	pop	{r3, pc}

000055ee <hfclk_stop>:
{
    55ee:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    55f0:	2001      	movs	r0, #1
    55f2:	f000 fc6f 	bl	5ed4 <nrfx_clock_stop>
}
    55f6:	bd08      	pop	{r3, pc}

000055f8 <hfclkaudio_stop>:
{
    55f8:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    55fa:	2003      	movs	r0, #3
    55fc:	f000 fc6a 	bl	5ed4 <nrfx_clock_stop>
}
    5600:	bd08      	pop	{r3, pc}

00005602 <hfclk192m_stop>:
{
    5602:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    5604:	2002      	movs	r0, #2
    5606:	f000 fc65 	bl	5ed4 <nrfx_clock_stop>
}
    560a:	bd08      	pop	{r3, pc}

0000560c <lfclk_stop>:
{
    560c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    560e:	2000      	movs	r0, #0
    5610:	f000 fc60 	bl	5ed4 <nrfx_clock_stop>
}
    5614:	bd08      	pop	{r3, pc}

00005616 <blocking_start_callback>:
{
    5616:	b508      	push	{r3, lr}
    5618:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    561a:	f7fe fc65 	bl	3ee8 <z_impl_k_sem_give>
}
    561e:	bd08      	pop	{r3, pc}

00005620 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5620:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    5624:	0580      	lsls	r0, r0, #22
    5626:	0d80      	lsrs	r0, r0, #22
    5628:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    562c:	d033      	beq.n	5696 <get_drive+0x76>
    562e:	d816      	bhi.n	565e <get_drive+0x3e>
    5630:	2806      	cmp	r0, #6
    5632:	d02c      	beq.n	568e <get_drive+0x6e>
    5634:	d906      	bls.n	5644 <get_drive+0x24>
    5636:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    563a:	d10d      	bne.n	5658 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    563c:	2301      	movs	r3, #1
    563e:	700b      	strb	r3, [r1, #0]
	return 0;
    5640:	2000      	movs	r0, #0
		break;
    5642:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5644:	b300      	cbz	r0, 5688 <get_drive+0x68>
    5646:	2802      	cmp	r0, #2
    5648:	d103      	bne.n	5652 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    564a:	2304      	movs	r3, #4
    564c:	700b      	strb	r3, [r1, #0]
	return 0;
    564e:	2000      	movs	r0, #0
		break;
    5650:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5652:	f06f 0015 	mvn.w	r0, #21
    5656:	4770      	bx	lr
    5658:	f06f 0015 	mvn.w	r0, #21
    565c:	4770      	bx	lr
    565e:	f240 2302 	movw	r3, #514	; 0x202
    5662:	4298      	cmp	r0, r3
    5664:	d01b      	beq.n	569e <get_drive+0x7e>
    5666:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    566a:	d103      	bne.n	5674 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    566c:	2303      	movs	r3, #3
    566e:	700b      	strb	r3, [r1, #0]
	return 0;
    5670:	2000      	movs	r0, #0
		break;
    5672:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5674:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    5678:	d103      	bne.n	5682 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    567a:	2302      	movs	r3, #2
    567c:	700b      	strb	r3, [r1, #0]
	return 0;
    567e:	2000      	movs	r0, #0
		break;
    5680:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5682:	f06f 0015 	mvn.w	r0, #21
    5686:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    5688:	2000      	movs	r0, #0
    568a:	7008      	strb	r0, [r1, #0]
		break;
    568c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    568e:	2306      	movs	r3, #6
    5690:	700b      	strb	r3, [r1, #0]
	return 0;
    5692:	2000      	movs	r0, #0
		break;
    5694:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    5696:	2307      	movs	r3, #7
    5698:	700b      	strb	r3, [r1, #0]
	return 0;
    569a:	2000      	movs	r0, #0
		break;
    569c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    569e:	2305      	movs	r3, #5
    56a0:	700b      	strb	r3, [r1, #0]
	return 0;
    56a2:	2000      	movs	r0, #0
}
    56a4:	4770      	bx	lr

000056a6 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    56a6:	f010 0f10 	tst.w	r0, #16
    56aa:	d104      	bne.n	56b6 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    56ac:	f010 0f20 	tst.w	r0, #32
    56b0:	d103      	bne.n	56ba <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    56b2:	2000      	movs	r0, #0
    56b4:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    56b6:	2003      	movs	r0, #3
    56b8:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    56ba:	2001      	movs	r0, #1
}
    56bc:	4770      	bx	lr

000056be <gpio_nrfx_port_get_raw>:
	return port->config;
    56be:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    56c0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    56c2:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    56c4:	600b      	str	r3, [r1, #0]
}
    56c6:	2000      	movs	r0, #0
    56c8:	4770      	bx	lr

000056ca <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    56ca:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    56cc:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    56ce:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    56d2:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    56d6:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
    56d8:	60d9      	str	r1, [r3, #12]
}
    56da:	2000      	movs	r0, #0
    56dc:	4770      	bx	lr

000056de <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    56de:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    56e0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    56e2:	6099      	str	r1, [r3, #8]
}
    56e4:	2000      	movs	r0, #0
    56e6:	4770      	bx	lr

000056e8 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    56e8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    56ea:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    56ec:	60d9      	str	r1, [r3, #12]
}
    56ee:	2000      	movs	r0, #0
    56f0:	4770      	bx	lr

000056f2 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    56f2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    56f4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    56f6:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    56f8:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    56fc:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    56fe:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
    5700:	60d3      	str	r3, [r2, #12]
}
    5702:	2000      	movs	r0, #0
    5704:	4770      	bx	lr

00005706 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    5706:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    570a:	d007      	beq.n	571c <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    570c:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    5710:	d00d      	beq.n	572e <get_trigger+0x28>
    5712:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5716:	d008      	beq.n	572a <get_trigger+0x24>
    5718:	2001      	movs	r0, #1
}
    571a:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    571c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5720:	d001      	beq.n	5726 <get_trigger+0x20>
    5722:	2005      	movs	r0, #5
    5724:	4770      	bx	lr
    5726:	2004      	movs	r0, #4
    5728:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    572a:	2002      	movs	r0, #2
    572c:	4770      	bx	lr
    572e:	2003      	movs	r0, #3
    5730:	4770      	bx	lr

00005732 <gpio_nrfx_manage_callback>:
{
    5732:	b410      	push	{r4}
	return port->data;
    5734:	6904      	ldr	r4, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5736:	f104 0c04 	add.w	ip, r4, #4
	return list->head;
    573a:	6863      	ldr	r3, [r4, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    573c:	b1fb      	cbz	r3, 577e <gpio_nrfx_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    573e:	2000      	movs	r0, #0
    5740:	e00d      	b.n	575e <gpio_nrfx_manage_callback+0x2c>
	return node->next;
    5742:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5744:	6063      	str	r3, [r4, #4]
	return list->tail;
    5746:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
    574a:	4281      	cmp	r1, r0
    574c:	d112      	bne.n	5774 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
    574e:	f8cc 3004 	str.w	r3, [ip, #4]
}
    5752:	e00f      	b.n	5774 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
    5754:	f8cc 0004 	str.w	r0, [ip, #4]
}
    5758:	e00c      	b.n	5774 <gpio_nrfx_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    575a:	4618      	mov	r0, r3
    575c:	681b      	ldr	r3, [r3, #0]
    575e:	b163      	cbz	r3, 577a <gpio_nrfx_manage_callback+0x48>
    5760:	4299      	cmp	r1, r3
    5762:	d1fa      	bne.n	575a <gpio_nrfx_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
    5764:	2800      	cmp	r0, #0
    5766:	d0ec      	beq.n	5742 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    5768:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    576a:	6003      	str	r3, [r0, #0]
	return list->tail;
    576c:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
    5770:	4299      	cmp	r1, r3
    5772:	d0ef      	beq.n	5754 <gpio_nrfx_manage_callback+0x22>
	parent->next = child;
    5774:	2300      	movs	r3, #0
    5776:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5778:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    577a:	b903      	cbnz	r3, 577e <gpio_nrfx_manage_callback+0x4c>
			if (!set) {
    577c:	b162      	cbz	r2, 5798 <gpio_nrfx_manage_callback+0x66>
				return -EINVAL;
			}
		}
	}

	if (set) {
    577e:	b172      	cbz	r2, 579e <gpio_nrfx_manage_callback+0x6c>
	return list->head;
    5780:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
    5782:	600b      	str	r3, [r1, #0]
	list->head = node;
    5784:	6061      	str	r1, [r4, #4]
	return list->tail;
    5786:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
    578a:	b10b      	cbz	r3, 5790 <gpio_nrfx_manage_callback+0x5e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    578c:	2000      	movs	r0, #0
    578e:	e007      	b.n	57a0 <gpio_nrfx_manage_callback+0x6e>
	list->tail = node;
    5790:	f8cc 1004 	str.w	r1, [ip, #4]
    5794:	2000      	movs	r0, #0
}
    5796:	e003      	b.n	57a0 <gpio_nrfx_manage_callback+0x6e>
				return -EINVAL;
    5798:	f06f 0015 	mvn.w	r0, #21
    579c:	e000      	b.n	57a0 <gpio_nrfx_manage_callback+0x6e>
	return 0;
    579e:	2000      	movs	r0, #0
}
    57a0:	bc10      	pop	{r4}
    57a2:	4770      	bx	lr

000057a4 <nrfx_gpio_handler>:
{
    57a4:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    57a6:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    57aa:	0940      	lsrs	r0, r0, #5
    57ac:	f7fc fc92 	bl	20d4 <get_dev>
	if (port == NULL) {
    57b0:	b1d8      	cbz	r0, 57ea <nrfx_gpio_handler+0x46>
    57b2:	4606      	mov	r6, r0
	return port->data;
    57b4:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    57b6:	2501      	movs	r5, #1
    57b8:	40a5      	lsls	r5, r4
	return list->head;
    57ba:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    57bc:	b119      	cbz	r1, 57c6 <nrfx_gpio_handler+0x22>
    57be:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    57c0:	b149      	cbz	r1, 57d6 <nrfx_gpio_handler+0x32>
	return node->next;
    57c2:	680c      	ldr	r4, [r1, #0]
    57c4:	e007      	b.n	57d6 <nrfx_gpio_handler+0x32>
    57c6:	460c      	mov	r4, r1
    57c8:	e005      	b.n	57d6 <nrfx_gpio_handler+0x32>
    57ca:	b164      	cbz	r4, 57e6 <nrfx_gpio_handler+0x42>
    57cc:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    57ce:	b104      	cbz	r4, 57d2 <nrfx_gpio_handler+0x2e>
	return node->next;
    57d0:	6823      	ldr	r3, [r4, #0]
    57d2:	4621      	mov	r1, r4
    57d4:	461c      	mov	r4, r3
    57d6:	b141      	cbz	r1, 57ea <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    57d8:	688a      	ldr	r2, [r1, #8]
    57da:	402a      	ands	r2, r5
    57dc:	d0f5      	beq.n	57ca <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    57de:	684b      	ldr	r3, [r1, #4]
    57e0:	4630      	mov	r0, r6
    57e2:	4798      	blx	r3
    57e4:	e7f1      	b.n	57ca <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    57e6:	4623      	mov	r3, r4
    57e8:	e7f3      	b.n	57d2 <nrfx_gpio_handler+0x2e>
}
    57ea:	bd70      	pop	{r4, r5, r6, pc}

000057ec <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    57ec:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    57ee:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    57f0:	f04f 0120 	mov.w	r1, #32
    57f4:	f3ef 8211 	mrs	r2, BASEPRI
    57f8:	f381 8812 	msr	BASEPRI_MAX, r1
    57fc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5800:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5804:	b131      	cbz	r1, 5814 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5806:	2100      	movs	r1, #0
    5808:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    580c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5810:	2101      	movs	r1, #1
    5812:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5814:	f382 8811 	msr	BASEPRI, r2
    5818:	f3bf 8f6f 	isb	sy
}
    581c:	4770      	bx	lr

0000581e <uarte_nrfx_isr_int>:
{
    581e:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5820:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    5822:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    5824:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5828:	f413 7f80 	tst.w	r3, #256	; 0x100
    582c:	d002      	beq.n	5834 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    582e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    5832:	b9d3      	cbnz	r3, 586a <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5834:	686b      	ldr	r3, [r5, #4]
    5836:	f013 0f10 	tst.w	r3, #16
    583a:	d015      	beq.n	5868 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    583c:	f04f 0220 	mov.w	r2, #32
    5840:	f3ef 8311 	mrs	r3, BASEPRI
    5844:	f382 8812 	msr	BASEPRI_MAX, r2
    5848:	f3bf 8f6f 	isb	sy
    584c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5850:	b112      	cbz	r2, 5858 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5852:	2200      	movs	r2, #0
    5854:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5858:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    585c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    5860:	f383 8811 	msr	BASEPRI, r3
    5864:	f3bf 8f6f 	isb	sy
}
    5868:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    586a:	f7ff ffbf 	bl	57ec <endtx_isr>
    586e:	e7e1      	b.n	5834 <uarte_nrfx_isr_int+0x16>

00005870 <uarte_nrfx_configure>:
{
    5870:	b570      	push	{r4, r5, r6, lr}
    5872:	b082      	sub	sp, #8
    5874:	4605      	mov	r5, r0
    5876:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    5878:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
    587a:	794b      	ldrb	r3, [r1, #5]
    587c:	2b01      	cmp	r3, #1
    587e:	d006      	beq.n	588e <uarte_nrfx_configure+0x1e>
    5880:	2b03      	cmp	r3, #3
    5882:	d011      	beq.n	58a8 <uarte_nrfx_configure+0x38>
    5884:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    5888:	4610      	mov	r0, r2
    588a:	b002      	add	sp, #8
    588c:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    588e:	2300      	movs	r3, #0
    5890:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5894:	79a3      	ldrb	r3, [r4, #6]
    5896:	2b03      	cmp	r3, #3
    5898:	d146      	bne.n	5928 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    589a:	79e3      	ldrb	r3, [r4, #7]
    589c:	b143      	cbz	r3, 58b0 <uarte_nrfx_configure+0x40>
    589e:	2b01      	cmp	r3, #1
    58a0:	d015      	beq.n	58ce <uarte_nrfx_configure+0x5e>
    58a2:	f06f 0285 	mvn.w	r2, #133	; 0x85
    58a6:	e7ef      	b.n	5888 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    58a8:	2310      	movs	r3, #16
    58aa:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    58ae:	e7f1      	b.n	5894 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    58b0:	2300      	movs	r3, #0
    58b2:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    58b6:	2300      	movs	r3, #0
    58b8:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    58bc:	7923      	ldrb	r3, [r4, #4]
    58be:	2b01      	cmp	r3, #1
    58c0:	d02a      	beq.n	5918 <uarte_nrfx_configure+0xa8>
    58c2:	2b02      	cmp	r3, #2
    58c4:	d024      	beq.n	5910 <uarte_nrfx_configure+0xa0>
    58c6:	b133      	cbz	r3, 58d6 <uarte_nrfx_configure+0x66>
    58c8:	f06f 0285 	mvn.w	r2, #133	; 0x85
    58cc:	e7dc      	b.n	5888 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    58ce:	2301      	movs	r3, #1
    58d0:	f88d 3000 	strb.w	r3, [sp]
		break;
    58d4:	e7ef      	b.n	58b6 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    58d6:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    58da:	6821      	ldr	r1, [r4, #0]
    58dc:	4628      	mov	r0, r5
    58de:	f7fc fd11 	bl	2304 <baudrate_set>
    58e2:	4602      	mov	r2, r0
    58e4:	bb18      	cbnz	r0, 592e <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
    58e6:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    58e8:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    58ea:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    58ee:	f89d 0002 	ldrb.w	r0, [sp, #2]
    58f2:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    58f4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    58f8:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    58fa:	f89d 0000 	ldrb.w	r0, [sp]
    58fe:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5900:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    5904:	3604      	adds	r6, #4
    5906:	e894 0003 	ldmia.w	r4, {r0, r1}
    590a:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
    590e:	e7bb      	b.n	5888 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5910:	230e      	movs	r3, #14
    5912:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    5916:	e7e0      	b.n	58da <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5918:	230e      	movs	r3, #14
    591a:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    591e:	f44f 7380 	mov.w	r3, #256	; 0x100
    5922:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    5926:	e7d8      	b.n	58da <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
    5928:	f06f 0285 	mvn.w	r2, #133	; 0x85
    592c:	e7ac      	b.n	5888 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    592e:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5932:	e7a9      	b.n	5888 <uarte_nrfx_configure+0x18>

00005934 <uarte_nrfx_config_get>:
{
    5934:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    5936:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    5938:	3304      	adds	r3, #4
    593a:	e893 0003 	ldmia.w	r3, {r0, r1}
    593e:	e882 0003 	stmia.w	r2, {r0, r1}
}
    5942:	2000      	movs	r0, #0
    5944:	4770      	bx	lr

00005946 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    5946:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5948:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    594a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    594e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5952:	4770      	bx	lr

00005954 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    5954:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5956:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5958:	685b      	ldr	r3, [r3, #4]
    595a:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    595e:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5962:	b929      	cbnz	r1, 5970 <is_tx_ready+0x1c>
    5964:	b933      	cbnz	r3, 5974 <is_tx_ready+0x20>
    5966:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    596a:	b92b      	cbnz	r3, 5978 <is_tx_ready+0x24>
    596c:	2000      	movs	r0, #0
    596e:	4770      	bx	lr
    5970:	2001      	movs	r0, #1
    5972:	4770      	bx	lr
    5974:	2000      	movs	r0, #0
    5976:	4770      	bx	lr
    5978:	2001      	movs	r0, #1
}
    597a:	4770      	bx	lr

0000597c <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    597c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    597e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5980:	2208      	movs	r2, #8
    5982:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    5986:	4770      	bx	lr

00005988 <tx_start>:
{
    5988:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    598a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    598c:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    598e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5992:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5996:	2200      	movs	r2, #0
    5998:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    599c:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    59a0:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    59a4:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    59a8:	685b      	ldr	r3, [r3, #4]
    59aa:	f013 0f10 	tst.w	r3, #16
    59ae:	d102      	bne.n	59b6 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    59b0:	2301      	movs	r3, #1
    59b2:	60a3      	str	r3, [r4, #8]
}
    59b4:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    59b6:	2101      	movs	r1, #1
    59b8:	f7ff ffe0 	bl	597c <uarte_enable>
    p_reg->INTENSET = mask;
    59bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    59c0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    59c4:	e7f4      	b.n	59b0 <tx_start+0x28>

000059c6 <uarte_nrfx_poll_in>:
{
    59c6:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    59c8:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    59ca:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    59cc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    59ce:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    59d2:	b15a      	cbz	r2, 59ec <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    59d4:	6962      	ldr	r2, [r4, #20]
    59d6:	7812      	ldrb	r2, [r2, #0]
    59d8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    59da:	2000      	movs	r0, #0
    59dc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    59e0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    59e4:	2201      	movs	r2, #1
    59e6:	601a      	str	r2, [r3, #0]
}
    59e8:	bc10      	pop	{r4}
    59ea:	4770      	bx	lr
		return -1;
    59ec:	f04f 30ff 	mov.w	r0, #4294967295
    59f0:	e7fa      	b.n	59e8 <uarte_nrfx_poll_in+0x22>

000059f2 <wait_tx_ready>:
{
    59f2:	b570      	push	{r4, r5, r6, lr}
    59f4:	4606      	mov	r6, r0
    59f6:	e014      	b.n	5a22 <wait_tx_ready+0x30>
		if (res) {
    59f8:	b17d      	cbz	r5, 5a1a <wait_tx_ready+0x28>
	__asm__ volatile(
    59fa:	f04f 0320 	mov.w	r3, #32
    59fe:	f3ef 8411 	mrs	r4, BASEPRI
    5a02:	f383 8812 	msr	BASEPRI_MAX, r3
    5a06:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5a0a:	4630      	mov	r0, r6
    5a0c:	f7ff ffa2 	bl	5954 <is_tx_ready>
    5a10:	b9a0      	cbnz	r0, 5a3c <wait_tx_ready+0x4a>
	__asm__ volatile(
    5a12:	f384 8811 	msr	BASEPRI, r4
    5a16:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    5a1a:	2021      	movs	r0, #33	; 0x21
    5a1c:	2100      	movs	r1, #0
    5a1e:	f7fe fe5d 	bl	46dc <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5a22:	2464      	movs	r4, #100	; 0x64
    5a24:	4630      	mov	r0, r6
    5a26:	f7ff ff95 	bl	5954 <is_tx_ready>
    5a2a:	4605      	mov	r5, r0
    5a2c:	2800      	cmp	r0, #0
    5a2e:	d1e3      	bne.n	59f8 <wait_tx_ready+0x6>
    5a30:	2001      	movs	r0, #1
    5a32:	f000 f9ae 	bl	5d92 <nrfx_busy_wait>
    5a36:	3c01      	subs	r4, #1
    5a38:	d1f4      	bne.n	5a24 <wait_tx_ready+0x32>
    5a3a:	e7dd      	b.n	59f8 <wait_tx_ready+0x6>
}
    5a3c:	4620      	mov	r0, r4
    5a3e:	bd70      	pop	{r4, r5, r6, pc}

00005a40 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5a44:	b083      	sub	sp, #12
    5a46:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    5a48:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    5a4a:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    5a4c:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5a50:	2100      	movs	r1, #0
    5a52:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5a56:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    5a5a:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    5a5e:	aa01      	add	r2, sp, #4
    5a60:	4648      	mov	r0, r9
    5a62:	f000 f8d3 	bl	5c0c <pinctrl_lookup_state>
	if (ret < 0) {
    5a66:	1e04      	subs	r4, r0, #0
    5a68:	db07      	blt.n	5a7a <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    5a6a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5a6c:	f8d9 2000 	ldr.w	r2, [r9]
    5a70:	7919      	ldrb	r1, [r3, #4]
    5a72:	6818      	ldr	r0, [r3, #0]
    5a74:	f7fc ffa6 	bl	29c4 <pinctrl_configure_pins>
    5a78:	4604      	mov	r4, r0
	if (err < 0) {
    5a7a:	2c00      	cmp	r4, #0
    5a7c:	db35      	blt.n	5aea <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    5a7e:	f108 0104 	add.w	r1, r8, #4
    5a82:	4628      	mov	r0, r5
    5a84:	f7ff fef4 	bl	5870 <uarte_nrfx_configure>
	if (err) {
    5a88:	4604      	mov	r4, r0
    5a8a:	bb70      	cbnz	r0, 5aea <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5a8c:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5a8e:	f013 0f02 	tst.w	r3, #2
    5a92:	d12e      	bne.n	5af2 <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5a94:	2308      	movs	r3, #8
    5a96:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    5a9a:	7a3b      	ldrb	r3, [r7, #8]
    5a9c:	b95b      	cbnz	r3, 5ab6 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5a9e:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    5aa2:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    5aa6:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5aaa:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5aae:	2301      	movs	r3, #1
    5ab0:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ab4:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    5ab6:	687b      	ldr	r3, [r7, #4]
    5ab8:	f013 0f02 	tst.w	r3, #2
    5abc:	d103      	bne.n	5ac6 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    5abe:	f44f 7380 	mov.w	r3, #256	; 0x100
    5ac2:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5ac6:	687b      	ldr	r3, [r7, #4]
    5ac8:	f013 0f10 	tst.w	r3, #16
    5acc:	d003      	beq.n	5ad6 <uarte_instance_init+0x96>
    5ace:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5ad2:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    5ad6:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5ada:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5ade:	2300      	movs	r3, #0
    5ae0:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ae4:	2301      	movs	r3, #1
    5ae6:	60b3      	str	r3, [r6, #8]
    5ae8:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5aea:	4620      	mov	r0, r4
    5aec:	b003      	add	sp, #12
    5aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    5af2:	4641      	mov	r1, r8
    5af4:	4630      	mov	r0, r6
    5af6:	f7fc fce7 	bl	24c8 <endtx_stoptx_ppi_init>
		if (err < 0) {
    5afa:	2800      	cmp	r0, #0
    5afc:	daca      	bge.n	5a94 <uarte_instance_init+0x54>
			return err;
    5afe:	4604      	mov	r4, r0
    5b00:	e7f3      	b.n	5aea <uarte_instance_init+0xaa>

00005b02 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    5b02:	b510      	push	{r4, lr}
    5b04:	4604      	mov	r4, r0
    5b06:	2200      	movs	r2, #0
    5b08:	2101      	movs	r1, #1
    5b0a:	2008      	movs	r0, #8
    5b0c:	f7fb fcd4 	bl	14b8 <z_arm_irq_priority_set>
    5b10:	2008      	movs	r0, #8
    5b12:	f7fb fcb5 	bl	1480 <arch_irq_enable>
    5b16:	2100      	movs	r1, #0
    5b18:	4620      	mov	r0, r4
    5b1a:	f7ff ff91 	bl	5a40 <uarte_instance_init>
    5b1e:	bd10      	pop	{r4, pc}

00005b20 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5b20:	4770      	bx	lr

00005b22 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    5b22:	1a40      	subs	r0, r0, r1
}
    5b24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5b28:	4770      	bx	lr

00005b2a <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5b2a:	f100 0350 	add.w	r3, r0, #80	; 0x50
    5b2e:	009b      	lsls	r3, r3, #2
    5b30:	b29b      	uxth	r3, r3
    5b32:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    5b36:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    5b3a:	2200      	movs	r2, #0
    5b3c:	601a      	str	r2, [r3, #0]
    5b3e:	681b      	ldr	r3, [r3, #0]
}
    5b40:	4770      	bx	lr

00005b42 <absolute_time_to_cc>:
}
    5b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5b46:	4770      	bx	lr

00005b48 <full_int_lock>:
	__asm__ volatile(
    5b48:	f04f 0320 	mov.w	r3, #32
    5b4c:	f3ef 8011 	mrs	r0, BASEPRI
    5b50:	f383 8812 	msr	BASEPRI_MAX, r3
    5b54:	f3bf 8f6f 	isb	sy
}
    5b58:	4770      	bx	lr

00005b5a <full_int_unlock>:
	__asm__ volatile(
    5b5a:	f380 8811 	msr	BASEPRI, r0
    5b5e:	f3bf 8f6f 	isb	sy
}
    5b62:	4770      	bx	lr

00005b64 <set_absolute_alarm>:
{
    5b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b66:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5b68:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    5b6c:	f7fc fcd6 	bl	251c <get_comparator>
    5b70:	4607      	mov	r7, r0
    5b72:	e019      	b.n	5ba8 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    5b74:	2013      	movs	r0, #19
    5b76:	f000 fc0e 	bl	6396 <z_impl_k_busy_wait>
}
    5b7a:	e022      	b.n	5bc2 <set_absolute_alarm+0x5e>
		event_clear(chan);
    5b7c:	4630      	mov	r0, r6
    5b7e:	f7ff ffd4 	bl	5b2a <event_clear>
		event_enable(chan);
    5b82:	4630      	mov	r0, r6
    5b84:	f7fc fcd2 	bl	252c <event_enable>
		set_comparator(chan, cc_val);
    5b88:	4629      	mov	r1, r5
    5b8a:	4630      	mov	r0, r6
    5b8c:	f7fc fcbc 	bl	2508 <set_comparator>
		now2 = counter();
    5b90:	f7fc fce0 	bl	2554 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5b94:	4284      	cmp	r4, r0
    5b96:	d01e      	beq.n	5bd6 <set_absolute_alarm+0x72>
    5b98:	1c81      	adds	r1, r0, #2
    5b9a:	4628      	mov	r0, r5
    5b9c:	f7ff ffc1 	bl	5b22 <counter_sub>
	} while ((now2 != now) &&
    5ba0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5ba4:	d917      	bls.n	5bd6 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    5ba6:	462f      	mov	r7, r5
		now = counter();
    5ba8:	f7fc fcd4 	bl	2554 <counter>
    5bac:	4604      	mov	r4, r0
		set_comparator(chan, now);
    5bae:	4601      	mov	r1, r0
    5bb0:	4630      	mov	r0, r6
    5bb2:	f7fc fca9 	bl	2508 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    5bb6:	4621      	mov	r1, r4
    5bb8:	4638      	mov	r0, r7
    5bba:	f7ff ffb2 	bl	5b22 <counter_sub>
    5bbe:	2801      	cmp	r0, #1
    5bc0:	d0d8      	beq.n	5b74 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5bc2:	1ca7      	adds	r7, r4, #2
    5bc4:	4639      	mov	r1, r7
    5bc6:	4628      	mov	r0, r5
    5bc8:	f7ff ffab 	bl	5b22 <counter_sub>
    5bcc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5bd0:	d9d4      	bls.n	5b7c <set_absolute_alarm+0x18>
			cc_val = now + 2;
    5bd2:	463d      	mov	r5, r7
    5bd4:	e7d2      	b.n	5b7c <set_absolute_alarm+0x18>
}
    5bd6:	4628      	mov	r0, r5
    5bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005bda <compare_set>:
{
    5bda:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bdc:	b083      	sub	sp, #12
    5bde:	4604      	mov	r4, r0
    5be0:	4617      	mov	r7, r2
    5be2:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    5be4:	f7fc fcbc 	bl	2560 <compare_int_lock>
    5be8:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    5bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5bec:	9301      	str	r3, [sp, #4]
    5bee:	9b08      	ldr	r3, [sp, #32]
    5bf0:	9300      	str	r3, [sp, #0]
    5bf2:	463a      	mov	r2, r7
    5bf4:	462b      	mov	r3, r5
    5bf6:	4620      	mov	r0, r4
    5bf8:	f7fc fd92 	bl	2720 <compare_set_nolocks>
    5bfc:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    5bfe:	4631      	mov	r1, r6
    5c00:	4620      	mov	r0, r4
    5c02:	f7fc fd07 	bl	2614 <compare_int_unlock>
}
    5c06:	4628      	mov	r0, r5
    5c08:	b003      	add	sp, #12
    5c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005c0c <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5c0c:	b410      	push	{r4}
	*state = &config->states[0];
    5c0e:	6843      	ldr	r3, [r0, #4]
    5c10:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5c12:	e001      	b.n	5c18 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    5c14:	3408      	adds	r4, #8
    5c16:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5c18:	6814      	ldr	r4, [r2, #0]
    5c1a:	7a03      	ldrb	r3, [r0, #8]
    5c1c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    5c20:	3b01      	subs	r3, #1
    5c22:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5c26:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    5c2a:	429c      	cmp	r4, r3
    5c2c:	d804      	bhi.n	5c38 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    5c2e:	7963      	ldrb	r3, [r4, #5]
    5c30:	428b      	cmp	r3, r1
    5c32:	d1ef      	bne.n	5c14 <pinctrl_lookup_state+0x8>
			return 0;
    5c34:	2000      	movs	r0, #0
    5c36:	e001      	b.n	5c3c <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    5c38:	f06f 0001 	mvn.w	r0, #1
}
    5c3c:	bc10      	pop	{r4}
    5c3e:	4770      	bx	lr

00005c40 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5c40:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    5c42:	2000      	movs	r0, #0
    5c44:	f7fb fe94 	bl	1970 <sys_arch_reboot>

00005c48 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    5c48:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    5c4a:	f7fe ff2f 	bl	4aac <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    5c4e:	bd08      	pop	{r3, pc}

00005c50 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    5c50:	b510      	push	{r4, lr}
    5c52:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    5c54:	f7fb fb10 	bl	1278 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    5c58:	f7fb fbe0 	bl	141c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    5c5c:	4620      	mov	r0, r4
    5c5e:	f7ff fff3 	bl	5c48 <hw_cc3xx_init_internal>
	return res;
}
    5c62:	bd10      	pop	{r4, pc}

00005c64 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5c64:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5c68:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5c6c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5c70:	2a07      	cmp	r2, #7
    5c72:	d001      	beq.n	5c78 <nrf53_errata_42+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5c74:	2000      	movs	r0, #0
    5c76:	4770      	bx	lr
                    switch(var2)
    5c78:	3b02      	subs	r3, #2
    5c7a:	2b00      	cmp	r3, #0
    5c7c:	d804      	bhi.n	5c88 <nrf53_errata_42+0x24>
    5c7e:	e8df f003 	tbb	[pc, r3]
    5c82:	01          	.byte	0x01
    5c83:	00          	.byte	0x00
    5c84:	2001      	movs	r0, #1
    5c86:	4770      	bx	lr
                            return false;
    5c88:	2000      	movs	r0, #0
    #endif
}
    5c8a:	4770      	bx	lr

00005c8c <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5c8c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5c90:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5c94:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5c98:	2a07      	cmp	r2, #7
    5c9a:	d001      	beq.n	5ca0 <nrf53_errata_46+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5c9c:	2000      	movs	r0, #0
    5c9e:	4770      	bx	lr
                    switch(var2)
    5ca0:	2b04      	cmp	r3, #4
    5ca2:	d007      	beq.n	5cb4 <nrf53_errata_46+0x28>
    5ca4:	d808      	bhi.n	5cb8 <nrf53_errata_46+0x2c>
    5ca6:	3b02      	subs	r3, #2
    5ca8:	2b01      	cmp	r3, #1
    5caa:	d801      	bhi.n	5cb0 <nrf53_errata_46+0x24>
    5cac:	2001      	movs	r0, #1
    #endif
}
    5cae:	4770      	bx	lr
                            return false;
    5cb0:	2000      	movs	r0, #0
    5cb2:	4770      	bx	lr
                            return false;
    5cb4:	2000      	movs	r0, #0
    5cb6:	4770      	bx	lr
                            return false;
    5cb8:	2000      	movs	r0, #0
    5cba:	4770      	bx	lr

00005cbc <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5cbc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5cc0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5cc4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5cc8:	2a07      	cmp	r2, #7
    5cca:	d001      	beq.n	5cd0 <nrf53_errata_49+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5ccc:	2000      	movs	r0, #0
    5cce:	4770      	bx	lr
                    switch(var2)
    5cd0:	3b02      	subs	r3, #2
    5cd2:	2b00      	cmp	r3, #0
    5cd4:	d804      	bhi.n	5ce0 <nrf53_errata_49+0x24>
    5cd6:	e8df f003 	tbb	[pc, r3]
    5cda:	01          	.byte	0x01
    5cdb:	00          	.byte	0x00
    5cdc:	2001      	movs	r0, #1
    5cde:	4770      	bx	lr
                            return false;
    5ce0:	2000      	movs	r0, #0
    #endif
}
    5ce2:	4770      	bx	lr

00005ce4 <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5ce4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5ce8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5cec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5cf0:	2a07      	cmp	r2, #7
    5cf2:	d001      	beq.n	5cf8 <nrf53_errata_55+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    5cf4:	2000      	movs	r0, #0
    5cf6:	4770      	bx	lr
                            return true;
    5cf8:	2001      	movs	r0, #1
    #endif
}
    5cfa:	4770      	bx	lr

00005cfc <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5cfc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5d00:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5d04:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5d08:	2a07      	cmp	r2, #7
    5d0a:	d001      	beq.n	5d10 <nrf53_errata_64+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d0c:	2000      	movs	r0, #0
    5d0e:	4770      	bx	lr
                    switch(var2)
    5d10:	3b02      	subs	r3, #2
    5d12:	2b00      	cmp	r3, #0
    5d14:	d804      	bhi.n	5d20 <nrf53_errata_64+0x24>
    5d16:	e8df f003 	tbb	[pc, r3]
    5d1a:	01          	.byte	0x01
    5d1b:	00          	.byte	0x00
    5d1c:	2001      	movs	r0, #1
    5d1e:	4770      	bx	lr
                            return false;
    5d20:	2000      	movs	r0, #0
    #endif
}
    5d22:	4770      	bx	lr

00005d24 <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5d24:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5d28:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5d2c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5d30:	2a07      	cmp	r2, #7
    5d32:	d001      	beq.n	5d38 <nrf53_errata_69+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d34:	2000      	movs	r0, #0
    5d36:	4770      	bx	lr
                    switch(var2)
    5d38:	3b02      	subs	r3, #2
    5d3a:	2b00      	cmp	r3, #0
    5d3c:	d804      	bhi.n	5d48 <nrf53_errata_69+0x24>
    5d3e:	e8df f003 	tbb	[pc, r3]
    5d42:	01          	.byte	0x01
    5d43:	00          	.byte	0x00
    5d44:	2001      	movs	r0, #1
    5d46:	4770      	bx	lr
                            return false;
    5d48:	2000      	movs	r0, #0
    #endif
}
    5d4a:	4770      	bx	lr

00005d4c <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5d4c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5d50:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5d54:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5d58:	2a07      	cmp	r2, #7
    5d5a:	d001      	beq.n	5d60 <nrf53_errata_97+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d5c:	2000      	movs	r0, #0
    5d5e:	4770      	bx	lr
                    switch(var2)
    5d60:	3b02      	subs	r3, #2
    5d62:	2b00      	cmp	r3, #0
    5d64:	d804      	bhi.n	5d70 <nrf53_errata_97+0x24>
    5d66:	e8df f003 	tbb	[pc, r3]
    5d6a:	01          	.byte	0x01
    5d6b:	00          	.byte	0x00
    5d6c:	2001      	movs	r0, #1
    5d6e:	4770      	bx	lr
                            return false;
    5d70:	2000      	movs	r0, #0
    #endif
}
    5d72:	4770      	bx	lr

00005d74 <nrf53_errata_140>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5d74:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5d78:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5d7c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5d80:	2a07      	cmp	r2, #7
    5d82:	d001      	beq.n	5d88 <nrf53_errata_140+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    5d84:	2000      	movs	r0, #0
    5d86:	4770      	bx	lr
                            return true;
    5d88:	2001      	movs	r0, #1
    #endif
}
    5d8a:	4770      	bx	lr

00005d8c <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    5d8c:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    5d8e:	4780      	blx	r0
}
    5d90:	bd08      	pop	{r3, pc}

00005d92 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    5d92:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    5d94:	f000 faff 	bl	6396 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    5d98:	bd08      	pop	{r3, pc}

00005d9a <clock_initial_lfclksrc_get>:
}
    5d9a:	2001      	movs	r0, #1
    5d9c:	4770      	bx	lr

00005d9e <clock_lfclksrc_tweak>:
{
    5d9e:	b538      	push	{r3, r4, r5, lr}
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    5da0:	7803      	ldrb	r3, [r0, #0]
    5da2:	2b01      	cmp	r3, #1
    5da4:	bf0c      	ite	eq
    5da6:	2501      	moveq	r5, #1
    5da8:	2500      	movne	r5, #0
    if (!is_correct_clk)
    5daa:	d101      	bne.n	5db0 <clock_lfclksrc_tweak+0x12>
}
    5dac:	4628      	mov	r0, r5
    5dae:	bd38      	pop	{r3, r4, r5, pc}
    5db0:	4604      	mov	r4, r0
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5db2:	2000      	movs	r0, #0
    5db4:	f7fc ff74 	bl	2ca0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    5db8:	f7ff ffef 	bl	5d9a <clock_initial_lfclksrc_get>
    5dbc:	7020      	strb	r0, [r4, #0]
    5dbe:	e7f5      	b.n	5dac <clock_lfclksrc_tweak+0xe>

00005dc0 <nrfx_clock_enable>:
{
    5dc0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5dc2:	2005      	movs	r0, #5
    5dc4:	f7fb fb6a 	bl	149c <arch_irq_is_enabled>
    5dc8:	b158      	cbz	r0, 5de2 <nrfx_clock_enable+0x22>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    5dca:	f7ff ffe6 	bl	5d9a <clock_initial_lfclksrc_get>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    5dce:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5dd2:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    5dd6:	2201      	movs	r2, #1
    5dd8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    5ddc:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    5de0:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5de2:	2005      	movs	r0, #5
    5de4:	f7fb fb4c 	bl	1480 <arch_irq_enable>
    5de8:	e7ef      	b.n	5dca <nrfx_clock_enable+0xa>

00005dea <nrfx_clock_start>:
    switch (domain)
    5dea:	2803      	cmp	r0, #3
    5dec:	d871      	bhi.n	5ed2 <nrfx_clock_start+0xe8>
    5dee:	e8df f000 	tbb	[pc, r0]
    5df2:	4802      	.short	0x4802
    5df4:	6254      	.short	0x6254
{
    5df6:	b500      	push	{lr}
    5df8:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5dfa:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    5dfe:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5e02:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5e06:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5e0a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5e0e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5e12:	d11d      	bne.n	5e50 <nrfx_clock_start+0x66>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    5e14:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e18:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    5e1c:	f013 0f01 	tst.w	r3, #1
    5e20:	d11b      	bne.n	5e5a <nrfx_clock_start+0x70>
                    lfclksrc = clock_initial_lfclksrc_get();
    5e22:	f7ff ffba 	bl	5d9a <clock_initial_lfclksrc_get>
    5e26:	f88d 0007 	strb.w	r0, [sp, #7]
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
    5e2a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
    5e2e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e32:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e36:	2200      	movs	r2, #0
    5e38:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5e3c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    5e40:	2202      	movs	r2, #2
    5e42:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e46:	2201      	movs	r2, #1
    5e48:	609a      	str	r2, [r3, #8]
}
    5e4a:	b003      	add	sp, #12
    5e4c:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    5e50:	f10d 0007 	add.w	r0, sp, #7
    5e54:	f7ff ffa3 	bl	5d9e <clock_lfclksrc_tweak>
    5e58:	e7e7      	b.n	5e2a <nrfx_clock_start+0x40>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5e5a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e5e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5e62:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    5e66:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    5e6a:	f10d 0007 	add.w	r0, sp, #7
    5e6e:	f7ff ff96 	bl	5d9e <clock_lfclksrc_tweak>
    5e72:	2800      	cmp	r0, #0
    5e74:	d0d9      	beq.n	5e2a <nrfx_clock_start+0x40>
    p_reg->INTENSET = mask;
    5e76:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e7a:	2202      	movs	r2, #2
    5e7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    5e80:	e7e3      	b.n	5e4a <nrfx_clock_start+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e82:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e86:	2200      	movs	r2, #0
    5e88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5e8c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    5e90:	2201      	movs	r2, #1
    5e92:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e96:	601a      	str	r2, [r3, #0]
}
    5e98:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e9a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e9e:	2200      	movs	r2, #0
    5ea0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    5ea4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    5ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
    5eac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5eb0:	2201      	movs	r2, #1
    5eb2:	621a      	str	r2, [r3, #32]
}
    5eb4:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5eb6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5eba:	2200      	movs	r2, #0
    5ebc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    5ec0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    5ec4:	f44f 7280 	mov.w	r2, #256	; 0x100
    5ec8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ecc:	2201      	movs	r2, #1
    5ece:	619a      	str	r2, [r3, #24]
}
    5ed0:	4770      	bx	lr
    5ed2:	4770      	bx	lr

00005ed4 <nrfx_clock_stop>:
{
    5ed4:	b508      	push	{r3, lr}
    clock_stop(domain);
    5ed6:	f7fc fee3 	bl	2ca0 <clock_stop>
}
    5eda:	bd08      	pop	{r3, pc}

00005edc <pin_is_task_output>:
{
    5edc:	b510      	push	{r4, lr}
    5ede:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    5ee0:	f7fd f810 	bl	2f04 <pin_is_output>
    5ee4:	b128      	cbz	r0, 5ef2 <pin_is_task_output+0x16>
    5ee6:	4620      	mov	r0, r4
    5ee8:	f7fc fff6 	bl	2ed8 <pin_in_use_by_te>
    5eec:	b118      	cbz	r0, 5ef6 <pin_is_task_output+0x1a>
    5eee:	2001      	movs	r0, #1
    5ef0:	e000      	b.n	5ef4 <pin_is_task_output+0x18>
    5ef2:	2000      	movs	r0, #0
}
    5ef4:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    5ef6:	2000      	movs	r0, #0
    5ef8:	e7fc      	b.n	5ef4 <pin_is_task_output+0x18>

00005efa <pin_is_input>:
{
    5efa:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    5efc:	f7fd f802 	bl	2f04 <pin_is_output>
    5f00:	f080 0001 	eor.w	r0, r0, #1
}
    5f04:	b2c0      	uxtb	r0, r0
    5f06:	bd08      	pop	{r3, pc}

00005f08 <gpiote_polarity_to_trigger>:
}
    5f08:	4770      	bx	lr

00005f0a <gpiote_trigger_to_polarity>:
}
    5f0a:	4770      	bx	lr

00005f0c <is_level>:
}
    5f0c:	2803      	cmp	r0, #3
    5f0e:	bf94      	ite	ls
    5f10:	2000      	movls	r0, #0
    5f12:	2001      	movhi	r0, #1
    5f14:	4770      	bx	lr

00005f16 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    5f16:	b148      	cbz	r0, 5f2c <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    5f18:	68c3      	ldr	r3, [r0, #12]
    5f1a:	8818      	ldrh	r0, [r3, #0]
    5f1c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    5f20:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    5f24:	bf14      	ite	ne
    5f26:	2000      	movne	r0, #0
    5f28:	2001      	moveq	r0, #1
    5f2a:	4770      	bx	lr
		return false;
    5f2c:	2000      	movs	r0, #0
}
    5f2e:	4770      	bx	lr

00005f30 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f32:	4605      	mov	r5, r0
    5f34:	460e      	mov	r6, r1
	__asm__ volatile(
    5f36:	f04f 0320 	mov.w	r3, #32
    5f3a:	f3ef 8711 	mrs	r7, BASEPRI
    5f3e:	f383 8812 	msr	BASEPRI_MAX, r3
    5f42:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5f46:	f7fe fbf5 	bl	4734 <z_impl_z_current_get>
    5f4a:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    5f4c:	4631      	mov	r1, r6
    5f4e:	4628      	mov	r0, r5
    5f50:	f7ff fe76 	bl	5c40 <k_sys_fatal_error_handler>
	__asm__ volatile(
    5f54:	f387 8811 	msr	BASEPRI, r7
    5f58:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5f5c:	4620      	mov	r0, r4
    5f5e:	f7fb fd57 	bl	1a10 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005f64 <z_early_memset>:
{
    5f64:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    5f66:	f7ff fa52 	bl	540e <memset>
}
    5f6a:	bd08      	pop	{r3, pc}

00005f6c <z_early_memcpy>:
{
    5f6c:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    5f6e:	f7ff fa1f 	bl	53b0 <memcpy>
}
    5f72:	bd08      	pop	{r3, pc}

00005f74 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5f74:	68c2      	ldr	r2, [r0, #12]
    5f76:	6903      	ldr	r3, [r0, #16]
    5f78:	431a      	orrs	r2, r3
    5f7a:	f012 0203 	ands.w	r2, r2, #3
    5f7e:	d10d      	bne.n	5f9c <create_free_list+0x28>
	slab->free_list = NULL;
    5f80:	2100      	movs	r1, #0
    5f82:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5f84:	e005      	b.n	5f92 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    5f86:	6941      	ldr	r1, [r0, #20]
    5f88:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    5f8a:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    5f8c:	68c1      	ldr	r1, [r0, #12]
    5f8e:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    5f90:	3201      	adds	r2, #1
    5f92:	6881      	ldr	r1, [r0, #8]
    5f94:	4291      	cmp	r1, r2
    5f96:	d8f6      	bhi.n	5f86 <create_free_list+0x12>
	return 0;
    5f98:	2000      	movs	r0, #0
    5f9a:	4770      	bx	lr
		return -EINVAL;
    5f9c:	f06f 0015 	mvn.w	r0, #21
}
    5fa0:	4770      	bx	lr

00005fa2 <k_mem_slab_init>:
{
    5fa2:	b510      	push	{r4, lr}
    5fa4:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    5fa6:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    5fa8:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    5faa:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    5fac:	2300      	movs	r3, #0
    5fae:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    5fb0:	f7ff ffe0 	bl	5f74 <create_free_list>
	if (rc < 0) {
    5fb4:	2800      	cmp	r0, #0
    5fb6:	db01      	blt.n	5fbc <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    5fb8:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    5fba:	6064      	str	r4, [r4, #4]
}
    5fbc:	bd10      	pop	{r4, pc}

00005fbe <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fc0:	4604      	mov	r4, r0
    5fc2:	460d      	mov	r5, r1
	__asm__ volatile(
    5fc4:	f04f 0320 	mov.w	r3, #32
    5fc8:	f3ef 8611 	mrs	r6, BASEPRI
    5fcc:	f383 8812 	msr	BASEPRI_MAX, r3
    5fd0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5fd4:	6943      	ldr	r3, [r0, #20]
    5fd6:	b163      	cbz	r3, 5ff2 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    5fd8:	682b      	ldr	r3, [r5, #0]
    5fda:	6962      	ldr	r2, [r4, #20]
    5fdc:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    5fde:	682b      	ldr	r3, [r5, #0]
    5fe0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    5fe2:	69a3      	ldr	r3, [r4, #24]
    5fe4:	3b01      	subs	r3, #1
    5fe6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    5fe8:	f386 8811 	msr	BASEPRI, r6
    5fec:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ff2:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    5ff6:	f000 f924 	bl	6242 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    5ffa:	2800      	cmp	r0, #0
    5ffc:	d0ec      	beq.n	5fd8 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5ffe:	682a      	ldr	r2, [r5, #0]
    6000:	2100      	movs	r1, #0
    6002:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6006:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    6008:	f000 f87b 	bl	6102 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    600c:	4631      	mov	r1, r6
    600e:	4638      	mov	r0, r7
    6010:	f7fe f814 	bl	403c <z_reschedule>
			return;
    6014:	e7ec      	b.n	5ff0 <k_mem_slab_free+0x32>

00006016 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6016:	3207      	adds	r2, #7
    6018:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    601c:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    6020:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    6024:	2300      	movs	r3, #0
    6026:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
    602a:	1888      	adds	r0, r1, r2
    602c:	4770      	bx	lr

0000602e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    602e:	f3ef 8005 	mrs	r0, IPSR
}
    6032:	3800      	subs	r0, #0
    6034:	bf18      	it	ne
    6036:	2001      	movne	r0, #1
    6038:	4770      	bx	lr

0000603a <z_impl_k_thread_start>:
{
    603a:	b508      	push	{r3, lr}
	z_sched_start(thread);
    603c:	f7fe f94c 	bl	42d8 <z_sched_start>
}
    6040:	bd08      	pop	{r3, pc}

00006042 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    6042:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    6044:	2400      	movs	r4, #0
    6046:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    6048:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    604a:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    604c:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    604e:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    6050:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    6052:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    6054:	bc10      	pop	{r4}
    6056:	4770      	bx	lr

00006058 <z_pm_save_idle_exit>:
{
    6058:	b508      	push	{r3, lr}
	pm_system_resume();
    605a:	f7fa ffb3 	bl	fc4 <pm_system_resume>
	sys_clock_idle_exit();
    605e:	f7ff fd5f 	bl	5b20 <sys_clock_idle_exit>
}
    6062:	bd08      	pop	{r3, pc}

00006064 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    6064:	4288      	cmp	r0, r1
    6066:	da00      	bge.n	606a <new_prio_for_inheritance+0x6>
    6068:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    606a:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    606e:	db01      	blt.n	6074 <new_prio_for_inheritance+0x10>
    6070:	4608      	mov	r0, r1
    6072:	4770      	bx	lr
    6074:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    6078:	4770      	bx	lr

0000607a <adjust_owner_prio>:
{
    607a:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    607c:	6880      	ldr	r0, [r0, #8]
    607e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6082:	428b      	cmp	r3, r1
    6084:	d101      	bne.n	608a <adjust_owner_prio+0x10>
	return false;
    6086:	2000      	movs	r0, #0
}
    6088:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    608a:	f7fe f973 	bl	4374 <z_set_prio>
    608e:	e7fb      	b.n	6088 <adjust_owner_prio+0xe>

00006090 <z_impl_k_mutex_init>:
{
    6090:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6092:	2000      	movs	r0, #0
    6094:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    6096:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    6098:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    609a:	605b      	str	r3, [r3, #4]
}
    609c:	4770      	bx	lr

0000609e <thread_active_elsewhere>:
}
    609e:	2000      	movs	r0, #0
    60a0:	4770      	bx	lr

000060a2 <pended_on_thread>:
}
    60a2:	6880      	ldr	r0, [r0, #8]
    60a4:	4770      	bx	lr

000060a6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    60a6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    60aa:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    60ae:	4283      	cmp	r3, r0
    60b0:	d001      	beq.n	60b6 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    60b2:	1ac0      	subs	r0, r0, r3
    60b4:	4770      	bx	lr
	return 0;
    60b6:	2000      	movs	r0, #0
}
    60b8:	4770      	bx	lr

000060ba <z_reschedule_irqlock>:
{
    60ba:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    60bc:	4603      	mov	r3, r0
    60be:	b920      	cbnz	r0, 60ca <z_reschedule_irqlock+0x10>
    60c0:	f3ef 8205 	mrs	r2, IPSR
    60c4:	b942      	cbnz	r2, 60d8 <z_reschedule_irqlock+0x1e>
    60c6:	2201      	movs	r2, #1
    60c8:	e000      	b.n	60cc <z_reschedule_irqlock+0x12>
    60ca:	2200      	movs	r2, #0
	if (resched(key)) {
    60cc:	b932      	cbnz	r2, 60dc <z_reschedule_irqlock+0x22>
    60ce:	f383 8811 	msr	BASEPRI, r3
    60d2:	f3bf 8f6f 	isb	sy
}
    60d6:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    60d8:	2200      	movs	r2, #0
    60da:	e7f7      	b.n	60cc <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    60dc:	4618      	mov	r0, r3
    60de:	f7fb fa21 	bl	1524 <arch_swap>
	return ret;
    60e2:	e7f8      	b.n	60d6 <z_reschedule_irqlock+0x1c>

000060e4 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    60e4:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    60e6:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    60e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    60ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    60ec:	2300      	movs	r3, #0
    60ee:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    60f0:	604b      	str	r3, [r1, #4]
}
    60f2:	4770      	bx	lr

000060f4 <z_priq_dumb_best>:
{
    60f4:	4603      	mov	r3, r0
	return list->head == list;
    60f6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    60f8:	4283      	cmp	r3, r0
    60fa:	d000      	beq.n	60fe <z_priq_dumb_best+0xa>
}
    60fc:	4770      	bx	lr
	struct k_thread *thread = NULL;
    60fe:	2000      	movs	r0, #0
	return thread;
    6100:	e7fc      	b.n	60fc <z_priq_dumb_best+0x8>

00006102 <z_ready_thread>:
{
    6102:	b538      	push	{r3, r4, r5, lr}
    6104:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    6106:	2300      	movs	r3, #0
	__asm__ volatile(
    6108:	f04f 0220 	mov.w	r2, #32
    610c:	f3ef 8511 	mrs	r5, BASEPRI
    6110:	f382 8812 	msr	BASEPRI_MAX, r2
    6114:	f3bf 8f6f 	isb	sy
    6118:	e004      	b.n	6124 <z_ready_thread+0x22>
	__asm__ volatile(
    611a:	f385 8811 	msr	BASEPRI, r5
    611e:	f3bf 8f6f 	isb	sy
    6122:	2301      	movs	r3, #1
    6124:	b943      	cbnz	r3, 6138 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    6126:	4620      	mov	r0, r4
    6128:	f7ff ffb9 	bl	609e <thread_active_elsewhere>
    612c:	2800      	cmp	r0, #0
    612e:	d1f4      	bne.n	611a <z_ready_thread+0x18>
			ready_thread(thread);
    6130:	4620      	mov	r0, r4
    6132:	f7fe f891 	bl	4258 <ready_thread>
    6136:	e7f0      	b.n	611a <z_ready_thread+0x18>
}
    6138:	bd38      	pop	{r3, r4, r5, pc}

0000613a <z_thread_timeout>:
{
    613a:	b570      	push	{r4, r5, r6, lr}
    613c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    613e:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    6142:	2300      	movs	r3, #0
	__asm__ volatile(
    6144:	f04f 0220 	mov.w	r2, #32
    6148:	f3ef 8611 	mrs	r6, BASEPRI
    614c:	f382 8812 	msr	BASEPRI_MAX, r2
    6150:	f3bf 8f6f 	isb	sy
    6154:	e011      	b.n	617a <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6156:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    615a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    615e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6162:	f023 0310 	bic.w	r3, r3, #16
    6166:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    616a:	4628      	mov	r0, r5
    616c:	f7fe f874 	bl	4258 <ready_thread>
	__asm__ volatile(
    6170:	f386 8811 	msr	BASEPRI, r6
    6174:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6178:	2301      	movs	r3, #1
    617a:	b9ab      	cbnz	r3, 61a8 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    617c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    6180:	f013 0f28 	tst.w	r3, #40	; 0x28
    6184:	d1f4      	bne.n	6170 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    6186:	f854 3c10 	ldr.w	r3, [r4, #-16]
    618a:	2b00      	cmp	r3, #0
    618c:	d0e3      	beq.n	6156 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    618e:	4628      	mov	r0, r5
    6190:	f7ff ff87 	bl	60a2 <pended_on_thread>
    6194:	4629      	mov	r1, r5
    6196:	f7ff ffa5 	bl	60e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    619a:	7b6b      	ldrb	r3, [r5, #13]
    619c:	f023 0302 	bic.w	r3, r3, #2
    61a0:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    61a2:	2300      	movs	r3, #0
    61a4:	60ab      	str	r3, [r5, #8]
}
    61a6:	e7d6      	b.n	6156 <z_thread_timeout+0x1c>
}
    61a8:	bd70      	pop	{r4, r5, r6, pc}

000061aa <add_to_waitq_locked>:
{
    61aa:	b570      	push	{r4, r5, r6, lr}
    61ac:	4605      	mov	r5, r0
    61ae:	460e      	mov	r6, r1
	unready_thread(thread);
    61b0:	f7fe f8b0 	bl	4314 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    61b4:	7b6b      	ldrb	r3, [r5, #13]
    61b6:	f043 0302 	orr.w	r3, r3, #2
    61ba:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    61bc:	b1b6      	cbz	r6, 61ec <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    61be:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    61c0:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    61c2:	42a6      	cmp	r6, r4
    61c4:	d019      	beq.n	61fa <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    61c6:	b164      	cbz	r4, 61e2 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    61c8:	4621      	mov	r1, r4
    61ca:	4628      	mov	r0, r5
    61cc:	f7ff ff6b 	bl	60a6 <z_sched_prio_cmp>
    61d0:	2800      	cmp	r0, #0
    61d2:	dc0c      	bgt.n	61ee <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    61d4:	b12c      	cbz	r4, 61e2 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    61d6:	6873      	ldr	r3, [r6, #4]
    61d8:	429c      	cmp	r4, r3
    61da:	d002      	beq.n	61e2 <add_to_waitq_locked+0x38>
    61dc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    61de:	2c00      	cmp	r4, #0
    61e0:	d1f1      	bne.n	61c6 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    61e2:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    61e4:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    61e6:	606b      	str	r3, [r5, #4]
	tail->next = node;
    61e8:	601d      	str	r5, [r3, #0]
	list->tail = node;
    61ea:	6075      	str	r5, [r6, #4]
}
    61ec:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    61ee:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    61f0:	606b      	str	r3, [r5, #4]
	node->next = successor;
    61f2:	602c      	str	r4, [r5, #0]
	prev->next = node;
    61f4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    61f6:	6065      	str	r5, [r4, #4]
}
    61f8:	e7f8      	b.n	61ec <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    61fa:	2400      	movs	r4, #0
    61fc:	e7e3      	b.n	61c6 <add_to_waitq_locked+0x1c>

000061fe <pend>:
{
    61fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6202:	4605      	mov	r5, r0
    6204:	460e      	mov	r6, r1
    6206:	4691      	mov	r9, r2
    6208:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    620a:	2400      	movs	r4, #0
	__asm__ volatile(
    620c:	f04f 0320 	mov.w	r3, #32
    6210:	f3ef 8711 	mrs	r7, BASEPRI
    6214:	f383 8812 	msr	BASEPRI_MAX, r3
    6218:	f3bf 8f6f 	isb	sy
    621c:	e008      	b.n	6230 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
    621e:	4631      	mov	r1, r6
    6220:	4628      	mov	r0, r5
    6222:	f7ff ffc2 	bl	61aa <add_to_waitq_locked>
	__asm__ volatile(
    6226:	f387 8811 	msr	BASEPRI, r7
    622a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    622e:	2401      	movs	r4, #1
    6230:	2c00      	cmp	r4, #0
    6232:	d0f4      	beq.n	621e <pend+0x20>
	add_thread_timeout(thread, timeout);
    6234:	464a      	mov	r2, r9
    6236:	4643      	mov	r3, r8
    6238:	4628      	mov	r0, r5
    623a:	f7fd fea1 	bl	3f80 <add_thread_timeout>
}
    623e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006242 <z_unpend_first_thread>:
{
    6242:	b570      	push	{r4, r5, r6, lr}
    6244:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    6246:	2300      	movs	r3, #0
	__asm__ volatile(
    6248:	f04f 0220 	mov.w	r2, #32
    624c:	f3ef 8611 	mrs	r6, BASEPRI
    6250:	f382 8812 	msr	BASEPRI_MAX, r2
    6254:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    6258:	461c      	mov	r4, r3
    625a:	e004      	b.n	6266 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    625c:	f386 8811 	msr	BASEPRI, r6
    6260:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6264:	2301      	movs	r3, #1
    6266:	b9ab      	cbnz	r3, 6294 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    6268:	4628      	mov	r0, r5
    626a:	f7ff ff43 	bl	60f4 <z_priq_dumb_best>
		if (thread != NULL) {
    626e:	4604      	mov	r4, r0
    6270:	2800      	cmp	r0, #0
    6272:	d0f3      	beq.n	625c <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6274:	f7ff ff15 	bl	60a2 <pended_on_thread>
    6278:	4621      	mov	r1, r4
    627a:	f7ff ff33 	bl	60e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    627e:	7b63      	ldrb	r3, [r4, #13]
    6280:	f023 0302 	bic.w	r3, r3, #2
    6284:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6286:	2300      	movs	r3, #0
    6288:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    628a:	f104 0018 	add.w	r0, r4, #24
    628e:	f000 f81e 	bl	62ce <z_abort_timeout>
    6292:	e7e3      	b.n	625c <z_unpend_first_thread+0x1a>
}
    6294:	4620      	mov	r0, r4
    6296:	bd70      	pop	{r4, r5, r6, pc}

00006298 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    6298:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    629a:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    629c:	6083      	str	r3, [r0, #8]
}
    629e:	4770      	bx	lr

000062a0 <remove_timeout>:
{
    62a0:	b510      	push	{r4, lr}
    62a2:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    62a4:	f7fe faa8 	bl	47f8 <next>
    62a8:	b148      	cbz	r0, 62be <remove_timeout+0x1e>
    62aa:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    62ac:	6920      	ldr	r0, [r4, #16]
    62ae:	6961      	ldr	r1, [r4, #20]
    62b0:	6913      	ldr	r3, [r2, #16]
    62b2:	181b      	adds	r3, r3, r0
    62b4:	6950      	ldr	r0, [r2, #20]
    62b6:	eb41 0100 	adc.w	r1, r1, r0
    62ba:	6113      	str	r3, [r2, #16]
    62bc:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    62be:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    62c0:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    62c2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    62c4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    62c6:	2300      	movs	r3, #0
    62c8:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    62ca:	6063      	str	r3, [r4, #4]
}
    62cc:	bd10      	pop	{r4, pc}

000062ce <z_abort_timeout>:
{
    62ce:	b570      	push	{r4, r5, r6, lr}
    62d0:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    62d2:	2300      	movs	r3, #0
	__asm__ volatile(
    62d4:	f04f 0220 	mov.w	r2, #32
    62d8:	f3ef 8611 	mrs	r6, BASEPRI
    62dc:	f382 8812 	msr	BASEPRI_MAX, r2
    62e0:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    62e4:	f06f 0015 	mvn.w	r0, #21
    62e8:	e004      	b.n	62f4 <z_abort_timeout+0x26>
	__asm__ volatile(
    62ea:	f386 8811 	msr	BASEPRI, r6
    62ee:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    62f2:	2301      	movs	r3, #1
    62f4:	461d      	mov	r5, r3
    62f6:	b93b      	cbnz	r3, 6308 <z_abort_timeout+0x3a>
	return node->next != NULL;
    62f8:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    62fa:	2b00      	cmp	r3, #0
    62fc:	d0f5      	beq.n	62ea <z_abort_timeout+0x1c>
			remove_timeout(to);
    62fe:	4620      	mov	r0, r4
    6300:	f7ff ffce 	bl	62a0 <remove_timeout>
			ret = 0;
    6304:	4628      	mov	r0, r5
    6306:	e7f0      	b.n	62ea <z_abort_timeout+0x1c>
}
    6308:	bd70      	pop	{r4, r5, r6, pc}

0000630a <z_get_next_timeout_expiry>:
{
    630a:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    630c:	2300      	movs	r3, #0
	__asm__ volatile(
    630e:	f04f 0220 	mov.w	r2, #32
    6312:	f3ef 8411 	mrs	r4, BASEPRI
    6316:	f382 8812 	msr	BASEPRI_MAX, r2
    631a:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    631e:	f04f 30ff 	mov.w	r0, #4294967295
    6322:	e006      	b.n	6332 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    6324:	f7fe fa80 	bl	4828 <next_timeout>
	__asm__ volatile(
    6328:	f384 8811 	msr	BASEPRI, r4
    632c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6330:	2301      	movs	r3, #1
    6332:	2b00      	cmp	r3, #0
    6334:	d0f6      	beq.n	6324 <z_get_next_timeout_expiry+0x1a>
}
    6336:	bd10      	pop	{r4, pc}

00006338 <z_set_timeout_expiry>:
{
    6338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    633a:	4605      	mov	r5, r0
    633c:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    633e:	2300      	movs	r3, #0
	__asm__ volatile(
    6340:	f04f 0220 	mov.w	r2, #32
    6344:	f3ef 8611 	mrs	r6, BASEPRI
    6348:	f382 8812 	msr	BASEPRI_MAX, r2
    634c:	f3bf 8f6f 	isb	sy
    6350:	e00a      	b.n	6368 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    6352:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    6354:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6358:	2801      	cmp	r0, #1
    635a:	dd00      	ble.n	635e <z_set_timeout_expiry+0x26>
    635c:	b97c      	cbnz	r4, 637e <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    635e:	f386 8811 	msr	BASEPRI, r6
    6362:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6366:	2301      	movs	r3, #1
    6368:	461c      	mov	r4, r3
    636a:	b97b      	cbnz	r3, 638c <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    636c:	f7fe fa5c 	bl	4828 <next_timeout>
			      || (ticks <= next_to);
    6370:	f1b0 3fff 	cmp.w	r0, #4294967295
    6374:	d0ed      	beq.n	6352 <z_set_timeout_expiry+0x1a>
    6376:	42a8      	cmp	r0, r5
    6378:	dbec      	blt.n	6354 <z_set_timeout_expiry+0x1c>
    637a:	2401      	movs	r4, #1
    637c:	e7ea      	b.n	6354 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    637e:	4639      	mov	r1, r7
    6380:	42a8      	cmp	r0, r5
    6382:	bfa8      	it	ge
    6384:	4628      	movge	r0, r5
    6386:	f7fc fabd 	bl	2904 <sys_clock_set_timeout>
    638a:	e7e8      	b.n	635e <z_set_timeout_expiry+0x26>
}
    638c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000638e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    638e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    6390:	f7fe fb5e 	bl	4a50 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6394:	bd08      	pop	{r3, pc}

00006396 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6396:	b900      	cbnz	r0, 639a <z_impl_k_busy_wait+0x4>
    6398:	4770      	bx	lr
{
    639a:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    639c:	f7fa fdea 	bl	f74 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    63a0:	bd08      	pop	{r3, pc}

000063a2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    63a2:	4770      	bx	lr
