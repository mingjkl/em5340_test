
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

01000000 <_vector_table>:
 1000000:	18 08 00 20 a5 11 00 01 c9 45 00 01 79 11 00 01     ... .....E..y...
 1000010:	79 11 00 01 79 11 00 01 79 11 00 01 00 00 00 00     y...y...y.......
	...
 100002c:	01 0f 00 01 79 11 00 01 00 00 00 00 a9 0e 00 01     ....y...........
 100003c:	79 11 00 01                                         y...

01000040 <_irq_vector_table>:
 1000040:	81 0f 00 01 81 0f 00 01 81 0f 00 01 81 0f 00 01     ................
 1000050:	81 0f 00 01 81 0f 00 01 81 0f 00 01 81 0f 00 01     ................
 1000060:	81 0f 00 01 81 0f 00 01 81 0f 00 01 81 0f 00 01     ................
 1000070:	81 0f 00 01 81 0f 00 01 81 0f 00 01 81 0f 00 01     ................
 1000080:	81 0f 00 01 81 0f 00 01 81 0f 00 01 81 0f 00 01     ................
 1000090:	81 0f 00 01 81 0f 00 01 81 0f 00 01 81 0f 00 01     ................
 10000a0:	81 0f 00 01 81 0f 00 01 81 0f 00 01 81 0f 00 01     ................
 10000b0:	81 0f 00 01 81 0f 00 01                             ........

Disassembly of section text:

010000b8 <__aeabi_uldivmod>:
 10000b8:	b953      	cbnz	r3, 10000d0 <__aeabi_uldivmod+0x18>
 10000ba:	b94a      	cbnz	r2, 10000d0 <__aeabi_uldivmod+0x18>
 10000bc:	2900      	cmp	r1, #0
 10000be:	bf08      	it	eq
 10000c0:	2800      	cmpeq	r0, #0
 10000c2:	bf1c      	itt	ne
 10000c4:	f04f 31ff 	movne.w	r1, #4294967295
 10000c8:	f04f 30ff 	movne.w	r0, #4294967295
 10000cc:	f000 b80c 	b.w	10000e8 <__aeabi_idiv0>
 10000d0:	f1ad 0c08 	sub.w	ip, sp, #8
 10000d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 10000d8:	f000 f808 	bl	10000ec <__udivmoddi4>
 10000dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 10000e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 10000e4:	b004      	add	sp, #16
 10000e6:	4770      	bx	lr

010000e8 <__aeabi_idiv0>:
 10000e8:	4770      	bx	lr
 10000ea:	bf00      	nop

010000ec <__udivmoddi4>:
 10000ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10000f0:	4607      	mov	r7, r0
 10000f2:	468c      	mov	ip, r1
 10000f4:	4608      	mov	r0, r1
 10000f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 10000f8:	4615      	mov	r5, r2
 10000fa:	463c      	mov	r4, r7
 10000fc:	4619      	mov	r1, r3
 10000fe:	2b00      	cmp	r3, #0
 1000100:	f040 80c5 	bne.w	100028e <__udivmoddi4+0x1a2>
 1000104:	4282      	cmp	r2, r0
 1000106:	fab2 f782 	clz	r7, r2
 100010a:	d946      	bls.n	100019a <__udivmoddi4+0xae>
 100010c:	b14f      	cbz	r7, 1000122 <__udivmoddi4+0x36>
 100010e:	f1c7 0e20 	rsb	lr, r7, #32
 1000112:	fa00 f307 	lsl.w	r3, r0, r7
 1000116:	40bd      	lsls	r5, r7
 1000118:	fa24 fe0e 	lsr.w	lr, r4, lr
 100011c:	40bc      	lsls	r4, r7
 100011e:	ea4e 0c03 	orr.w	ip, lr, r3
 1000122:	ea4f 4815 	mov.w	r8, r5, lsr #16
 1000126:	fa1f fe85 	uxth.w	lr, r5
 100012a:	0c22      	lsrs	r2, r4, #16
 100012c:	fbbc f9f8 	udiv	r9, ip, r8
 1000130:	fb08 c319 	mls	r3, r8, r9, ip
 1000134:	fb09 fa0e 	mul.w	sl, r9, lr
 1000138:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 100013c:	459a      	cmp	sl, r3
 100013e:	d928      	bls.n	1000192 <__udivmoddi4+0xa6>
 1000140:	18eb      	adds	r3, r5, r3
 1000142:	f109 30ff 	add.w	r0, r9, #4294967295
 1000146:	d204      	bcs.n	1000152 <__udivmoddi4+0x66>
 1000148:	459a      	cmp	sl, r3
 100014a:	d902      	bls.n	1000152 <__udivmoddi4+0x66>
 100014c:	f1a9 0002 	sub.w	r0, r9, #2
 1000150:	442b      	add	r3, r5
 1000152:	eba3 030a 	sub.w	r3, r3, sl
 1000156:	b2a4      	uxth	r4, r4
 1000158:	fbb3 f2f8 	udiv	r2, r3, r8
 100015c:	fb08 3312 	mls	r3, r8, r2, r3
 1000160:	fb02 fe0e 	mul.w	lr, r2, lr
 1000164:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 1000168:	45a6      	cmp	lr, r4
 100016a:	d914      	bls.n	1000196 <__udivmoddi4+0xaa>
 100016c:	192c      	adds	r4, r5, r4
 100016e:	f102 33ff 	add.w	r3, r2, #4294967295
 1000172:	d203      	bcs.n	100017c <__udivmoddi4+0x90>
 1000174:	45a6      	cmp	lr, r4
 1000176:	d901      	bls.n	100017c <__udivmoddi4+0x90>
 1000178:	1e93      	subs	r3, r2, #2
 100017a:	442c      	add	r4, r5
 100017c:	eba4 040e 	sub.w	r4, r4, lr
 1000180:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 1000184:	b11e      	cbz	r6, 100018e <__udivmoddi4+0xa2>
 1000186:	40fc      	lsrs	r4, r7
 1000188:	2300      	movs	r3, #0
 100018a:	6034      	str	r4, [r6, #0]
 100018c:	6073      	str	r3, [r6, #4]
 100018e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1000192:	4648      	mov	r0, r9
 1000194:	e7dd      	b.n	1000152 <__udivmoddi4+0x66>
 1000196:	4613      	mov	r3, r2
 1000198:	e7f0      	b.n	100017c <__udivmoddi4+0x90>
 100019a:	b902      	cbnz	r2, 100019e <__udivmoddi4+0xb2>
 100019c:	deff      	udf	#255	; 0xff
 100019e:	bb87      	cbnz	r7, 1000202 <__udivmoddi4+0x116>
 10001a0:	1a83      	subs	r3, r0, r2
 10001a2:	2101      	movs	r1, #1
 10001a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 10001a8:	b2aa      	uxth	r2, r5
 10001aa:	0c20      	lsrs	r0, r4, #16
 10001ac:	fbb3 fcfe 	udiv	ip, r3, lr
 10001b0:	fb0e 331c 	mls	r3, lr, ip, r3
 10001b4:	fb0c f802 	mul.w	r8, ip, r2
 10001b8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 10001bc:	4598      	cmp	r8, r3
 10001be:	d962      	bls.n	1000286 <__udivmoddi4+0x19a>
 10001c0:	18eb      	adds	r3, r5, r3
 10001c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 10001c6:	d204      	bcs.n	10001d2 <__udivmoddi4+0xe6>
 10001c8:	4598      	cmp	r8, r3
 10001ca:	d902      	bls.n	10001d2 <__udivmoddi4+0xe6>
 10001cc:	f1ac 0002 	sub.w	r0, ip, #2
 10001d0:	442b      	add	r3, r5
 10001d2:	eba3 0308 	sub.w	r3, r3, r8
 10001d6:	b2a4      	uxth	r4, r4
 10001d8:	fbb3 fcfe 	udiv	ip, r3, lr
 10001dc:	fb0e 331c 	mls	r3, lr, ip, r3
 10001e0:	fb0c f202 	mul.w	r2, ip, r2
 10001e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 10001e8:	42a2      	cmp	r2, r4
 10001ea:	d94e      	bls.n	100028a <__udivmoddi4+0x19e>
 10001ec:	192c      	adds	r4, r5, r4
 10001ee:	f10c 33ff 	add.w	r3, ip, #4294967295
 10001f2:	d204      	bcs.n	10001fe <__udivmoddi4+0x112>
 10001f4:	42a2      	cmp	r2, r4
 10001f6:	d902      	bls.n	10001fe <__udivmoddi4+0x112>
 10001f8:	f1ac 0302 	sub.w	r3, ip, #2
 10001fc:	442c      	add	r4, r5
 10001fe:	1aa4      	subs	r4, r4, r2
 1000200:	e7be      	b.n	1000180 <__udivmoddi4+0x94>
 1000202:	f1c7 0c20 	rsb	ip, r7, #32
 1000206:	40bd      	lsls	r5, r7
 1000208:	fa00 f307 	lsl.w	r3, r0, r7
 100020c:	fa20 f80c 	lsr.w	r8, r0, ip
 1000210:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 1000214:	fa24 fc0c 	lsr.w	ip, r4, ip
 1000218:	40bc      	lsls	r4, r7
 100021a:	ea4c 0203 	orr.w	r2, ip, r3
 100021e:	b2ab      	uxth	r3, r5
 1000220:	fbb8 fcfe 	udiv	ip, r8, lr
 1000224:	0c11      	lsrs	r1, r2, #16
 1000226:	fb0e 801c 	mls	r0, lr, ip, r8
 100022a:	fb0c f903 	mul.w	r9, ip, r3
 100022e:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 1000232:	4581      	cmp	r9, r0
 1000234:	d923      	bls.n	100027e <__udivmoddi4+0x192>
 1000236:	1828      	adds	r0, r5, r0
 1000238:	f10c 31ff 	add.w	r1, ip, #4294967295
 100023c:	d204      	bcs.n	1000248 <__udivmoddi4+0x15c>
 100023e:	4581      	cmp	r9, r0
 1000240:	d902      	bls.n	1000248 <__udivmoddi4+0x15c>
 1000242:	f1ac 0102 	sub.w	r1, ip, #2
 1000246:	4428      	add	r0, r5
 1000248:	eba0 0009 	sub.w	r0, r0, r9
 100024c:	b292      	uxth	r2, r2
 100024e:	fbb0 fcfe 	udiv	ip, r0, lr
 1000252:	fb0e 001c 	mls	r0, lr, ip, r0
 1000256:	fb0c f803 	mul.w	r8, ip, r3
 100025a:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 100025e:	4598      	cmp	r8, r3
 1000260:	d90f      	bls.n	1000282 <__udivmoddi4+0x196>
 1000262:	18eb      	adds	r3, r5, r3
 1000264:	f10c 32ff 	add.w	r2, ip, #4294967295
 1000268:	d204      	bcs.n	1000274 <__udivmoddi4+0x188>
 100026a:	4598      	cmp	r8, r3
 100026c:	d902      	bls.n	1000274 <__udivmoddi4+0x188>
 100026e:	f1ac 0202 	sub.w	r2, ip, #2
 1000272:	442b      	add	r3, r5
 1000274:	eba3 0308 	sub.w	r3, r3, r8
 1000278:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 100027c:	e792      	b.n	10001a4 <__udivmoddi4+0xb8>
 100027e:	4661      	mov	r1, ip
 1000280:	e7e2      	b.n	1000248 <__udivmoddi4+0x15c>
 1000282:	4662      	mov	r2, ip
 1000284:	e7f6      	b.n	1000274 <__udivmoddi4+0x188>
 1000286:	4660      	mov	r0, ip
 1000288:	e7a3      	b.n	10001d2 <__udivmoddi4+0xe6>
 100028a:	4663      	mov	r3, ip
 100028c:	e7b7      	b.n	10001fe <__udivmoddi4+0x112>
 100028e:	4283      	cmp	r3, r0
 1000290:	d905      	bls.n	100029e <__udivmoddi4+0x1b2>
 1000292:	b10e      	cbz	r6, 1000298 <__udivmoddi4+0x1ac>
 1000294:	e9c6 7000 	strd	r7, r0, [r6]
 1000298:	2100      	movs	r1, #0
 100029a:	4608      	mov	r0, r1
 100029c:	e777      	b.n	100018e <__udivmoddi4+0xa2>
 100029e:	fab3 f183 	clz	r1, r3
 10002a2:	b981      	cbnz	r1, 10002c6 <__udivmoddi4+0x1da>
 10002a4:	4283      	cmp	r3, r0
 10002a6:	d301      	bcc.n	10002ac <__udivmoddi4+0x1c0>
 10002a8:	42ba      	cmp	r2, r7
 10002aa:	d80a      	bhi.n	10002c2 <__udivmoddi4+0x1d6>
 10002ac:	1abc      	subs	r4, r7, r2
 10002ae:	eb60 0303 	sbc.w	r3, r0, r3
 10002b2:	2001      	movs	r0, #1
 10002b4:	469c      	mov	ip, r3
 10002b6:	2e00      	cmp	r6, #0
 10002b8:	d067      	beq.n	100038a <__udivmoddi4+0x29e>
 10002ba:	e9c6 4c00 	strd	r4, ip, [r6]
 10002be:	2100      	movs	r1, #0
 10002c0:	e765      	b.n	100018e <__udivmoddi4+0xa2>
 10002c2:	4608      	mov	r0, r1
 10002c4:	e7f7      	b.n	10002b6 <__udivmoddi4+0x1ca>
 10002c6:	f1c1 0c20 	rsb	ip, r1, #32
 10002ca:	408b      	lsls	r3, r1
 10002cc:	fa02 f501 	lsl.w	r5, r2, r1
 10002d0:	fa22 f40c 	lsr.w	r4, r2, ip
 10002d4:	fa20 fb0c 	lsr.w	fp, r0, ip
 10002d8:	fa27 f20c 	lsr.w	r2, r7, ip
 10002dc:	408f      	lsls	r7, r1
 10002de:	431c      	orrs	r4, r3
 10002e0:	fa00 f301 	lsl.w	r3, r0, r1
 10002e4:	ea4f 4914 	mov.w	r9, r4, lsr #16
 10002e8:	4313      	orrs	r3, r2
 10002ea:	fa1f fe84 	uxth.w	lr, r4
 10002ee:	0c1a      	lsrs	r2, r3, #16
 10002f0:	fbbb f8f9 	udiv	r8, fp, r9
 10002f4:	fb09 bb18 	mls	fp, r9, r8, fp
 10002f8:	fb08 fa0e 	mul.w	sl, r8, lr
 10002fc:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 1000300:	4592      	cmp	sl, r2
 1000302:	d93e      	bls.n	1000382 <__udivmoddi4+0x296>
 1000304:	18a2      	adds	r2, r4, r2
 1000306:	f108 30ff 	add.w	r0, r8, #4294967295
 100030a:	d204      	bcs.n	1000316 <__udivmoddi4+0x22a>
 100030c:	4592      	cmp	sl, r2
 100030e:	d902      	bls.n	1000316 <__udivmoddi4+0x22a>
 1000310:	f1a8 0002 	sub.w	r0, r8, #2
 1000314:	4422      	add	r2, r4
 1000316:	eba2 020a 	sub.w	r2, r2, sl
 100031a:	b29b      	uxth	r3, r3
 100031c:	fbb2 f8f9 	udiv	r8, r2, r9
 1000320:	fb09 2218 	mls	r2, r9, r8, r2
 1000324:	fb08 fe0e 	mul.w	lr, r8, lr
 1000328:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 100032c:	4596      	cmp	lr, r2
 100032e:	d92a      	bls.n	1000386 <__udivmoddi4+0x29a>
 1000330:	18a2      	adds	r2, r4, r2
 1000332:	f108 33ff 	add.w	r3, r8, #4294967295
 1000336:	d204      	bcs.n	1000342 <__udivmoddi4+0x256>
 1000338:	4596      	cmp	lr, r2
 100033a:	d902      	bls.n	1000342 <__udivmoddi4+0x256>
 100033c:	f1a8 0302 	sub.w	r3, r8, #2
 1000340:	4422      	add	r2, r4
 1000342:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 1000346:	eba2 020e 	sub.w	r2, r2, lr
 100034a:	fba0 9305 	umull	r9, r3, r0, r5
 100034e:	429a      	cmp	r2, r3
 1000350:	46ce      	mov	lr, r9
 1000352:	4698      	mov	r8, r3
 1000354:	d302      	bcc.n	100035c <__udivmoddi4+0x270>
 1000356:	d106      	bne.n	1000366 <__udivmoddi4+0x27a>
 1000358:	454f      	cmp	r7, r9
 100035a:	d204      	bcs.n	1000366 <__udivmoddi4+0x27a>
 100035c:	3801      	subs	r0, #1
 100035e:	ebb9 0e05 	subs.w	lr, r9, r5
 1000362:	eb63 0804 	sbc.w	r8, r3, r4
 1000366:	b186      	cbz	r6, 100038a <__udivmoddi4+0x29e>
 1000368:	ebb7 030e 	subs.w	r3, r7, lr
 100036c:	eb62 0708 	sbc.w	r7, r2, r8
 1000370:	fa07 fc0c 	lsl.w	ip, r7, ip
 1000374:	40cb      	lsrs	r3, r1
 1000376:	40cf      	lsrs	r7, r1
 1000378:	ea4c 0303 	orr.w	r3, ip, r3
 100037c:	e9c6 3700 	strd	r3, r7, [r6]
 1000380:	e79d      	b.n	10002be <__udivmoddi4+0x1d2>
 1000382:	4640      	mov	r0, r8
 1000384:	e7c7      	b.n	1000316 <__udivmoddi4+0x22a>
 1000386:	4643      	mov	r3, r8
 1000388:	e7db      	b.n	1000342 <__udivmoddi4+0x256>
 100038a:	4631      	mov	r1, r6
 100038c:	e6ff      	b.n	100018e <__udivmoddi4+0xa2>
	...

01000390 <main>:
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

#if NRF_GPIO_HAS_SEL
    /* Preserve MCUSEL setting. */
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
 1000390:	4c0f      	ldr	r4, [pc, #60]	; (10003d0 <main+0x40>)
#include <zephyr/zephyr.h>
#include "drivers/gpio.h"
#include "hal/nrf_gpio.h"

void main(void)
{
 1000392:	b580      	push	{r7, lr}
 1000394:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c

	while(1)
	{
		nrf_gpio_pin_clear(NRF_GPIO_PIN_MAP(1,15));
		k_msleep(1000);
		printk("Hello World! %s\r\n", CONFIG_BOARD);
 1000398:	4f0e      	ldr	r7, [pc, #56]	; (10003d4 <main+0x44>)
 100039a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
#else
    uint32_t cnf = 0;
#endif
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
 100039e:	f043 0303 	orr.w	r3, r3, #3
 10003a2:	4e0d      	ldr	r6, [pc, #52]	; (10003d8 <main+0x48>)
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);

    reg->PIN_CNF[pin_number] = cnf;
 10003a4:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
 10003a8:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 10003ac:	60e5      	str	r5, [r4, #12]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 10003ae:	2100      	movs	r1, #0
 10003b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 10003b4:	f003 fcd2 	bl	1003d5c <z_impl_k_sleep>
 10003b8:	4639      	mov	r1, r7
 10003ba:	4630      	mov	r0, r6
 10003bc:	f003 ffb6 	bl	100432c <printk>
    p_reg->OUTSET = set_mask;
 10003c0:	60a5      	str	r5, [r4, #8]
 10003c2:	2100      	movs	r1, #0
 10003c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 10003c8:	f003 fcc8 	bl	1003d5c <z_impl_k_sleep>
 10003cc:	e7ec      	b.n	10003a8 <main+0x18>
 10003ce:	bf00      	nop
 10003d0:	418c0800 	.word	0x418c0800
 10003d4:	0100512c 	.word	0x0100512c
 10003d8:	01005145 	.word	0x01005145

010003dc <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 10003dc:	4b01      	ldr	r3, [pc, #4]	; (10003e4 <char_out+0x8>)
 10003de:	681b      	ldr	r3, [r3, #0]
 10003e0:	4718      	bx	r3
 10003e2:	bf00      	nop
 10003e4:	20000000 	.word	0x20000000

010003e8 <__printk_hook_install>:
	_char_out = fn;
 10003e8:	4b01      	ldr	r3, [pc, #4]	; (10003f0 <__printk_hook_install+0x8>)
 10003ea:	6018      	str	r0, [r3, #0]
}
 10003ec:	4770      	bx	lr
 10003ee:	bf00      	nop
 10003f0:	20000000 	.word	0x20000000

010003f4 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 10003f4:	b507      	push	{r0, r1, r2, lr}
 10003f6:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 10003f8:	2100      	movs	r1, #0
 10003fa:	4602      	mov	r2, r0
 10003fc:	9100      	str	r1, [sp, #0]
 10003fe:	4803      	ldr	r0, [pc, #12]	; (100040c <vprintk+0x18>)
 1000400:	f000 f8e6 	bl	10005d0 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 1000404:	b003      	add	sp, #12
 1000406:	f85d fb04 	ldr.w	pc, [sp], #4
 100040a:	bf00      	nop
 100040c:	010003dd 	.word	0x010003dd

01000410 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
 1000410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 1000414:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
 1000418:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
 100041a:	f019 0808 	ands.w	r8, r9, #8
{
 100041e:	4693      	mov	fp, r2
	if (processing) {
 1000420:	d00d      	beq.n	100043e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
 1000422:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
 1000424:	bf0c      	ite	eq
 1000426:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
 100042a:	f049 0920 	orrne.w	r9, r9, #32
 100042e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 1000432:	f38b 8811 	msr	BASEPRI, fp
 1000436:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
 100043a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 100043e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
 1000442:	2902      	cmp	r1, #2
 1000444:	d107      	bne.n	1000456 <process_event+0x46>
			evt = process_recheck(mgr);
 1000446:	4620      	mov	r0, r4
 1000448:	f003 ff7d 	bl	1004346 <process_recheck>
		if (evt == EVT_NOP) {
 100044c:	2800      	cmp	r0, #0
 100044e:	d0f0      	beq.n	1000432 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
 1000450:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000452:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
 1000454:	d14e      	bne.n	10004f4 <process_event+0xe4>
			res = mgr->last_res;
 1000456:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 1000458:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
 100045a:	2f00      	cmp	r7, #0
 100045c:	da15      	bge.n	100048a <process_event+0x7a>
		*clients = mgr->clients;
 100045e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000460:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
 1000464:	e9c4 8800 	strd	r8, r8, [r4]
 1000468:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
 100046c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
 100046e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1000470:	8b21      	ldrh	r1, [r4, #24]
 1000472:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
 1000476:	45ca      	cmp	sl, r9
 1000478:	d002      	beq.n	1000480 <process_event+0x70>
		if (do_monitors
 100047a:	68a3      	ldr	r3, [r4, #8]
 100047c:	2b00      	cmp	r3, #0
 100047e:	d15a      	bne.n	1000536 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
 1000480:	b90d      	cbnz	r5, 1000486 <process_event+0x76>
		    || (transit != NULL)) {
 1000482:	2e00      	cmp	r6, #0
 1000484:	d071      	beq.n	100056a <process_event+0x15a>
 1000486:	2300      	movs	r3, #0
 1000488:	e056      	b.n	1000538 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 100048a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
 100048e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
 1000490:	2a01      	cmp	r2, #1
 1000492:	d81e      	bhi.n	10004d2 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000494:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
 1000498:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
 100049a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 100049c:	b289      	uxth	r1, r1
 100049e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
 10004a2:	d10a      	bne.n	10004ba <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
 10004a4:	b13d      	cbz	r5, 10004b6 <process_event+0xa6>
 10004a6:	462a      	mov	r2, r5
 10004a8:	8b63      	ldrh	r3, [r4, #26]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 10004aa:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
 10004ac:	3301      	adds	r3, #1
 10004ae:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
 10004b0:	2a00      	cmp	r2, #0
 10004b2:	d1fa      	bne.n	10004aa <process_event+0x9a>
 10004b4:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10004b6:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
 10004ba:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
 10004bc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
 10004be:	f003 ff42 	bl	1004346 <process_recheck>
 10004c2:	4606      	mov	r6, r0
 10004c4:	2800      	cmp	r0, #0
 10004c6:	d0d3      	beq.n	1000470 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
 10004c8:	8b23      	ldrh	r3, [r4, #24]
 10004ca:	f043 0320 	orr.w	r3, r3, #32
 10004ce:	8323      	strh	r3, [r4, #24]
 10004d0:	e7cd      	b.n	100046e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
 10004d2:	2b04      	cmp	r3, #4
 10004d4:	d10c      	bne.n	10004f0 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10004d6:	f021 0107 	bic.w	r1, r1, #7
 10004da:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
 10004dc:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
 10004de:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
 10004e0:	f003 ff31 	bl	1004346 <process_recheck>
 10004e4:	4605      	mov	r5, r0
 10004e6:	2800      	cmp	r0, #0
 10004e8:	d0c1      	beq.n	100046e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
 10004ea:	f041 0120 	orr.w	r1, r1, #32
 10004ee:	8321      	strh	r1, [r4, #24]
 10004f0:	2500      	movs	r5, #0
 10004f2:	e7bc      	b.n	100046e <process_event+0x5e>
		} else if (evt == EVT_START) {
 10004f4:	2803      	cmp	r0, #3
 10004f6:	d109      	bne.n	100050c <process_event+0xfc>
			transit = mgr->transitions->start;
 10004f8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10004fa:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
 10004fe:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000500:	f043 0306 	orr.w	r3, r3, #6
}
 1000504:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000506:	8323      	strh	r3, [r4, #24]
		res = 0;
 1000508:	462f      	mov	r7, r5
 100050a:	e7b1      	b.n	1000470 <process_event+0x60>
		} else if (evt == EVT_STOP) {
 100050c:	2804      	cmp	r0, #4
 100050e:	d106      	bne.n	100051e <process_event+0x10e>
			transit = mgr->transitions->stop;
 1000510:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000512:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
 1000516:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000518:	f043 0304 	orr.w	r3, r3, #4
 100051c:	e7f2      	b.n	1000504 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
 100051e:	2805      	cmp	r0, #5
 1000520:	d106      	bne.n	1000530 <process_event+0x120>
			transit = mgr->transitions->reset;
 1000522:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000524:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
 1000528:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 100052a:	f043 0305 	orr.w	r3, r3, #5
 100052e:	e7e9      	b.n	1000504 <process_event+0xf4>
 1000530:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
 1000532:	462e      	mov	r6, r5
 1000534:	e7e8      	b.n	1000508 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
 1000536:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
 1000538:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
 100053c:	8321      	strh	r1, [r4, #24]
 100053e:	f38b 8811 	msr	BASEPRI, fp
 1000542:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
 1000546:	b9fb      	cbnz	r3, 1000588 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
 1000548:	bb85      	cbnz	r5, 10005ac <process_event+0x19c>
			if (transit != NULL) {
 100054a:	b116      	cbz	r6, 1000552 <process_event+0x142>
				transit(mgr, transition_complete);
 100054c:	4620      	mov	r0, r4
 100054e:	491f      	ldr	r1, [pc, #124]	; (10005cc <process_event+0x1bc>)
 1000550:	47b0      	blx	r6
	__asm__ volatile(
 1000552:	f04f 0320 	mov.w	r3, #32
 1000556:	f3ef 8b11 	mrs	fp, BASEPRI
 100055a:	f383 8812 	msr	BASEPRI_MAX, r3
 100055e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
 1000562:	8b23      	ldrh	r3, [r4, #24]
 1000564:	f023 0308 	bic.w	r3, r3, #8
 1000568:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
 100056a:	8b23      	ldrh	r3, [r4, #24]
 100056c:	06da      	lsls	r2, r3, #27
 100056e:	d525      	bpl.n	10005bc <process_event+0x1ac>
			evt = EVT_COMPLETE;
 1000570:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
 1000572:	f023 0310 	bic.w	r3, r3, #16
 1000576:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
 1000578:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 100057c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
 1000580:	2900      	cmp	r1, #0
 1000582:	f47f af5e 	bne.w	1000442 <process_event+0x32>
out:
 1000586:	e754      	b.n	1000432 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 1000588:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
 100058a:	2900      	cmp	r1, #0
 100058c:	d0dc      	beq.n	1000548 <process_event+0x138>
	return node->next;
 100058e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
 1000592:	463b      	mov	r3, r7
 1000594:	4652      	mov	r2, sl
 1000596:	4620      	mov	r0, r4
 1000598:	f8d1 b004 	ldr.w	fp, [r1, #4]
 100059c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
 100059e:	f1b9 0f00 	cmp.w	r9, #0
 10005a2:	d0d1      	beq.n	1000548 <process_event+0x138>
 10005a4:	4649      	mov	r1, r9
 10005a6:	f8d9 9000 	ldr.w	r9, [r9]
 10005aa:	e7f2      	b.n	1000592 <process_event+0x182>
 10005ac:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
 10005ae:	463b      	mov	r3, r7
 10005b0:	4652      	mov	r2, sl
 10005b2:	4620      	mov	r0, r4
 10005b4:	682d      	ldr	r5, [r5, #0]
 10005b6:	f003 fee2 	bl	100437e <notify_one>
 10005ba:	e7c5      	b.n	1000548 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
 10005bc:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
 10005c0:	bf1e      	ittt	ne
 10005c2:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
 10005c6:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
 10005c8:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
 10005ca:	e7d5      	b.n	1000578 <process_event+0x168>
 10005cc:	010043ab 	.word	0x010043ab

010005d0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 10005d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10005d4:	468b      	mov	fp, r1
 10005d6:	4692      	mov	sl, r2
 10005d8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 10005da:	2500      	movs	r5, #0
{
 10005dc:	b091      	sub	sp, #68	; 0x44
 10005de:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 10005e0:	f89a 0000 	ldrb.w	r0, [sl]
 10005e4:	b908      	cbnz	r0, 10005ea <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 10005e6:	4628      	mov	r0, r5
 10005e8:	e363      	b.n	1000cb2 <z_cbvprintf_impl+0x6e2>
		if (*fp != '%') {
 10005ea:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 10005ec:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
 10005f0:	d007      	beq.n	1000602 <z_cbvprintf_impl+0x32>
			OUTC('%');
 10005f2:	4659      	mov	r1, fp
 10005f4:	9b02      	ldr	r3, [sp, #8]
 10005f6:	4798      	blx	r3
 10005f8:	2800      	cmp	r0, #0
 10005fa:	f2c0 835a 	blt.w	1000cb2 <z_cbvprintf_impl+0x6e2>
 10005fe:	3501      	adds	r5, #1
			break;
 1000600:	e212      	b.n	1000a28 <z_cbvprintf_impl+0x458>
		} state = {
 1000602:	2218      	movs	r2, #24
 1000604:	2100      	movs	r1, #0
 1000606:	a80a      	add	r0, sp, #40	; 0x28
 1000608:	f004 f82a 	bl	1004660 <memset>
	if (*sp == '%') {
 100060c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 1000610:	2b25      	cmp	r3, #37	; 0x25
 1000612:	d078      	beq.n	1000706 <z_cbvprintf_impl+0x136>
 1000614:	2200      	movs	r2, #0
 1000616:	4610      	mov	r0, r2
 1000618:	4696      	mov	lr, r2
 100061a:	4694      	mov	ip, r2
 100061c:	4616      	mov	r6, r2
 100061e:	4639      	mov	r1, r7
		switch (*sp) {
 1000620:	f817 3b01 	ldrb.w	r3, [r7], #1
 1000624:	2b2b      	cmp	r3, #43	; 0x2b
 1000626:	f000 809d 	beq.w	1000764 <z_cbvprintf_impl+0x194>
 100062a:	f200 8094 	bhi.w	1000756 <z_cbvprintf_impl+0x186>
 100062e:	2b20      	cmp	r3, #32
 1000630:	f000 809b 	beq.w	100076a <z_cbvprintf_impl+0x19a>
 1000634:	2b23      	cmp	r3, #35	; 0x23
 1000636:	f000 809b 	beq.w	1000770 <z_cbvprintf_impl+0x1a0>
 100063a:	b12e      	cbz	r6, 1000648 <z_cbvprintf_impl+0x78>
 100063c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 1000640:	f046 0604 	orr.w	r6, r6, #4
 1000644:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 1000648:	f1bc 0f00 	cmp.w	ip, #0
 100064c:	d005      	beq.n	100065a <z_cbvprintf_impl+0x8a>
 100064e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 1000652:	f046 0608 	orr.w	r6, r6, #8
 1000656:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 100065a:	f1be 0f00 	cmp.w	lr, #0
 100065e:	d005      	beq.n	100066c <z_cbvprintf_impl+0x9c>
 1000660:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 1000664:	f046 0610 	orr.w	r6, r6, #16
 1000668:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 100066c:	b128      	cbz	r0, 100067a <z_cbvprintf_impl+0xaa>
 100066e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 1000672:	f040 0020 	orr.w	r0, r0, #32
 1000676:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 100067a:	b12a      	cbz	r2, 1000688 <z_cbvprintf_impl+0xb8>
 100067c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 1000680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 1000684:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
 1000688:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 100068c:	f002 0044 	and.w	r0, r2, #68	; 0x44
 1000690:	2844      	cmp	r0, #68	; 0x44
 1000692:	d103      	bne.n	100069c <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 1000694:	f36f 1286 	bfc	r2, #6, #1
 1000698:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
 100069c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 10006a0:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
 10006a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 10006a6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 10006aa:	d17b      	bne.n	10007a4 <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
 10006ac:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
 10006b0:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 10006b2:	f042 0201 	orr.w	r2, r2, #1
 10006b6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
 10006ba:	781a      	ldrb	r2, [r3, #0]
 10006bc:	2a2e      	cmp	r2, #46	; 0x2e
 10006be:	bf0c      	ite	eq
 10006c0:	2101      	moveq	r1, #1
 10006c2:	2100      	movne	r1, #0
 10006c4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 10006c8:	f361 0241 	bfi	r2, r1, #1, #1
 10006cc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
 10006d0:	d174      	bne.n	10007bc <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
 10006d2:	785a      	ldrb	r2, [r3, #1]
 10006d4:	2a2a      	cmp	r2, #42	; 0x2a
 10006d6:	d06a      	beq.n	10007ae <z_cbvprintf_impl+0x1de>
	size_t val = 0;
 10006d8:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 10006da:	260a      	movs	r6, #10
	++sp;
 10006dc:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 10006de:	4618      	mov	r0, r3
 10006e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 10006e4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 10006e8:	2f09      	cmp	r7, #9
 10006ea:	f240 808e 	bls.w	100080a <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
 10006ee:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
 10006f2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
 10006f4:	f3c2 0040 	ubfx	r0, r2, #1, #1
 10006f8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
 10006fc:	f361 0241 	bfi	r2, r1, #1, #1
 1000700:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 1000704:	e05a      	b.n	10007bc <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
 1000706:	f10a 0702 	add.w	r7, sl, #2
 100070a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
 100070e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 1000712:	07d9      	lsls	r1, r3, #31
 1000714:	f140 8149 	bpl.w	10009aa <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
 1000718:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
 100071c:	f1b9 0f00 	cmp.w	r9, #0
 1000720:	da07      	bge.n	1000732 <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
 1000722:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
 1000726:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
 100072a:	f042 0204 	orr.w	r2, r2, #4
 100072e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
 1000732:	075a      	lsls	r2, r3, #29
 1000734:	f140 8142 	bpl.w	10009bc <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
 1000738:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 100073c:	f1b8 0f00 	cmp.w	r8, #0
 1000740:	f280 8141 	bge.w	10009c6 <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
 1000744:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 1000748:	f36f 0341 	bfc	r3, #1, #1
 100074c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 1000750:	f04f 38ff 	mov.w	r8, #4294967295
 1000754:	e137      	b.n	10009c6 <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
 1000756:	2b2d      	cmp	r3, #45	; 0x2d
 1000758:	d00c      	beq.n	1000774 <z_cbvprintf_impl+0x1a4>
 100075a:	2b30      	cmp	r3, #48	; 0x30
 100075c:	f47f af6d 	bne.w	100063a <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
 1000760:	2201      	movs	r2, #1
	} while (loop);
 1000762:	e75c      	b.n	100061e <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
 1000764:	f04f 0c01 	mov.w	ip, #1
 1000768:	e759      	b.n	100061e <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
 100076a:	f04f 0e01 	mov.w	lr, #1
 100076e:	e756      	b.n	100061e <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
 1000770:	2001      	movs	r0, #1
 1000772:	e754      	b.n	100061e <z_cbvprintf_impl+0x4e>
		switch (*sp) {
 1000774:	2601      	movs	r6, #1
 1000776:	e752      	b.n	100061e <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
 1000778:	4633      	mov	r3, r6
 100077a:	fb0c 0202 	mla	r2, ip, r2, r0
 100077e:	3a30      	subs	r2, #48	; 0x30
 1000780:	461e      	mov	r6, r3
 1000782:	f816 0b01 	ldrb.w	r0, [r6], #1
 1000786:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 100078a:	2f09      	cmp	r7, #9
 100078c:	d9f4      	bls.n	1000778 <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
 100078e:	4299      	cmp	r1, r3
 1000790:	d093      	beq.n	10006ba <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 1000792:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
 1000796:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
 1000798:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 100079a:	f362 0141 	bfi	r1, r2, #1, #1
 100079e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 10007a2:	e78a      	b.n	10006ba <z_cbvprintf_impl+0xea>
 10007a4:	460b      	mov	r3, r1
	size_t val = 0;
 10007a6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 10007a8:	f04f 0c0a 	mov.w	ip, #10
 10007ac:	e7e8      	b.n	1000780 <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
 10007ae:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
 10007b2:	3302      	adds	r3, #2
		conv->prec_star = true;
 10007b4:	f042 0204 	orr.w	r2, r2, #4
 10007b8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
 10007bc:	461f      	mov	r7, r3
 10007be:	f817 2b01 	ldrb.w	r2, [r7], #1
 10007c2:	2a6c      	cmp	r2, #108	; 0x6c
 10007c4:	d041      	beq.n	100084a <z_cbvprintf_impl+0x27a>
 10007c6:	d825      	bhi.n	1000814 <z_cbvprintf_impl+0x244>
 10007c8:	2a68      	cmp	r2, #104	; 0x68
 10007ca:	d02b      	beq.n	1000824 <z_cbvprintf_impl+0x254>
 10007cc:	2a6a      	cmp	r2, #106	; 0x6a
 10007ce:	d046      	beq.n	100085e <z_cbvprintf_impl+0x28e>
 10007d0:	2a4c      	cmp	r2, #76	; 0x4c
 10007d2:	d04c      	beq.n	100086e <z_cbvprintf_impl+0x29e>
 10007d4:	461f      	mov	r7, r3
	conv->specifier = *sp++;
 10007d6:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 10007da:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
 10007de:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 10007e0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
 10007e4:	f200 80d9 	bhi.w	100099a <z_cbvprintf_impl+0x3ca>
 10007e8:	2a57      	cmp	r2, #87	; 0x57
 10007ea:	d84d      	bhi.n	1000888 <z_cbvprintf_impl+0x2b8>
 10007ec:	2a41      	cmp	r2, #65	; 0x41
 10007ee:	d003      	beq.n	10007f8 <z_cbvprintf_impl+0x228>
 10007f0:	3a45      	subs	r2, #69	; 0x45
 10007f2:	2a02      	cmp	r2, #2
 10007f4:	f200 80d1 	bhi.w	100099a <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
 10007f8:	2204      	movs	r2, #4
 10007fa:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 10007fe:	f362 0302 	bfi	r3, r2, #0, #3
 1000802:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
 1000806:	2301      	movs	r3, #1
			break;
 1000808:	e09e      	b.n	1000948 <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
 100080a:	fb06 2101 	mla	r1, r6, r1, r2
 100080e:	4603      	mov	r3, r0
 1000810:	3930      	subs	r1, #48	; 0x30
 1000812:	e764      	b.n	10006de <z_cbvprintf_impl+0x10e>
	switch (*sp) {
 1000814:	2a74      	cmp	r2, #116	; 0x74
 1000816:	d026      	beq.n	1000866 <z_cbvprintf_impl+0x296>
 1000818:	2a7a      	cmp	r2, #122	; 0x7a
 100081a:	d1db      	bne.n	10007d4 <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
 100081c:	2206      	movs	r2, #6
 100081e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 1000822:	e00d      	b.n	1000840 <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
 1000824:	785a      	ldrb	r2, [r3, #1]
 1000826:	2a68      	cmp	r2, #104	; 0x68
 1000828:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 100082c:	d106      	bne.n	100083c <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
 100082e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 1000830:	f361 02c6 	bfi	r2, r1, #3, #4
 1000834:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
 1000838:	1c9f      	adds	r7, r3, #2
 100083a:	e7cc      	b.n	10007d6 <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
 100083c:	4613      	mov	r3, r2
 100083e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
 1000840:	f362 03c6 	bfi	r3, r2, #3, #4
 1000844:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
 1000848:	e7c5      	b.n	10007d6 <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
 100084a:	785a      	ldrb	r2, [r3, #1]
 100084c:	2a6c      	cmp	r2, #108	; 0x6c
 100084e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 1000852:	d101      	bne.n	1000858 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
 1000854:	2104      	movs	r1, #4
 1000856:	e7eb      	b.n	1000830 <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
 1000858:	4613      	mov	r3, r2
 100085a:	2203      	movs	r2, #3
 100085c:	e7f0      	b.n	1000840 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
 100085e:	2205      	movs	r2, #5
 1000860:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 1000864:	e7ec      	b.n	1000840 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
 1000866:	2207      	movs	r2, #7
 1000868:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 100086c:	e7e8      	b.n	1000840 <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
 100086e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 1000872:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 1000876:	f023 0302 	bic.w	r3, r3, #2
 100087a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 100087e:	f043 0302 	orr.w	r3, r3, #2
 1000882:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
 1000886:	e7a6      	b.n	10007d6 <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
 1000888:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 100088c:	2920      	cmp	r1, #32
 100088e:	f200 8084 	bhi.w	100099a <z_cbvprintf_impl+0x3ca>
 1000892:	a001      	add	r0, pc, #4	; (adr r0, 1000898 <z_cbvprintf_impl+0x2c8>)
 1000894:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 1000898:	0100095d 	.word	0x0100095d
 100089c:	0100099b 	.word	0x0100099b
 10008a0:	0100099b 	.word	0x0100099b
 10008a4:	0100099b 	.word	0x0100099b
 10008a8:	0100099b 	.word	0x0100099b
 10008ac:	0100099b 	.word	0x0100099b
 10008b0:	0100099b 	.word	0x0100099b
 10008b4:	0100099b 	.word	0x0100099b
 10008b8:	0100099b 	.word	0x0100099b
 10008bc:	010007f9 	.word	0x010007f9
 10008c0:	0100099b 	.word	0x0100099b
 10008c4:	0100095d 	.word	0x0100095d
 10008c8:	0100091d 	.word	0x0100091d
 10008cc:	010007f9 	.word	0x010007f9
 10008d0:	010007f9 	.word	0x010007f9
 10008d4:	010007f9 	.word	0x010007f9
 10008d8:	0100099b 	.word	0x0100099b
 10008dc:	0100091d 	.word	0x0100091d
 10008e0:	0100099b 	.word	0x0100099b
 10008e4:	0100099b 	.word	0x0100099b
 10008e8:	0100099b 	.word	0x0100099b
 10008ec:	0100099b 	.word	0x0100099b
 10008f0:	01000965 	.word	0x01000965
 10008f4:	0100095d 	.word	0x0100095d
 10008f8:	01000981 	.word	0x01000981
 10008fc:	0100099b 	.word	0x0100099b
 1000900:	0100099b 	.word	0x0100099b
 1000904:	01000981 	.word	0x01000981
 1000908:	0100099b 	.word	0x0100099b
 100090c:	0100095d 	.word	0x0100095d
 1000910:	0100099b 	.word	0x0100099b
 1000914:	0100099b 	.word	0x0100099b
 1000918:	0100095d 	.word	0x0100095d
		conv->specifier_cat = SPECIFIER_SINT;
 100091c:	2001      	movs	r0, #1
 100091e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 1000922:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 1000926:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 100092a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 100092c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
 1000930:	bf02      	ittt	eq
 1000932:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
 1000936:	f041 0101 	orreq.w	r1, r1, #1
 100093a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
 100093e:	2a63      	cmp	r2, #99	; 0x63
 1000940:	d131      	bne.n	10009a6 <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 1000942:	3b00      	subs	r3, #0
 1000944:	bf18      	it	ne
 1000946:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 1000948:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 100094c:	f3c2 0140 	ubfx	r1, r2, #1, #1
 1000950:	430b      	orrs	r3, r1
 1000952:	f363 0241 	bfi	r2, r3, #1, #1
 1000956:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 100095a:	e6d8      	b.n	100070e <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
 100095c:	2002      	movs	r0, #2
 100095e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 1000962:	e7de      	b.n	1000922 <z_cbvprintf_impl+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
 1000964:	2103      	movs	r1, #3
 1000966:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 100096a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 100096e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 1000972:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 1000976:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 1000978:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 100097c:	4143      	adcs	r3, r0
 100097e:	e7e3      	b.n	1000948 <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 1000980:	2103      	movs	r1, #3
 1000982:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 1000986:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 100098a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
 100098e:	bf14      	ite	ne
 1000990:	2301      	movne	r3, #1
 1000992:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
 1000994:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 1000998:	e7d6      	b.n	1000948 <z_cbvprintf_impl+0x378>
		conv->invalid = true;
 100099a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 100099e:	f043 0301 	orr.w	r3, r3, #1
 10009a2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
 10009a6:	2300      	movs	r3, #0
 10009a8:	e7ce      	b.n	1000948 <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
 10009aa:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 10009ae:	2a00      	cmp	r2, #0
		int width = -1;
 10009b0:	bfac      	ite	ge
 10009b2:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
 10009b6:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
 10009ba:	e6ba      	b.n	1000732 <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
 10009bc:	079b      	lsls	r3, r3, #30
 10009be:	f57f aec7 	bpl.w	1000750 <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
 10009c2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
 10009c6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 10009c8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 10009cc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
 10009d0:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
 10009d4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 10009d8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 10009da:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 10009de:	d135      	bne.n	1000a4c <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
 10009e0:	1ecb      	subs	r3, r1, #3
 10009e2:	2b04      	cmp	r3, #4
 10009e4:	d822      	bhi.n	1000a2c <z_cbvprintf_impl+0x45c>
 10009e6:	e8df f003 	tbb	[pc, r3]
 10009ea:	0903      	.short	0x0903
 10009ec:	2109      	.short	0x2109
 10009ee:	21          	.byte	0x21
 10009ef:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 10009f0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 10009f4:	17da      	asrs	r2, r3, #31
 10009f6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
 10009fa:	e006      	b.n	1000a0a <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
 10009fc:	3407      	adds	r4, #7
 10009fe:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 1000a02:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 1000a06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 1000a0a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 1000a0e:	f013 0603 	ands.w	r6, r3, #3
 1000a12:	d059      	beq.n	1000ac8 <z_cbvprintf_impl+0x4f8>
			OUTS(sp, fp);
 1000a14:	463b      	mov	r3, r7
 1000a16:	4652      	mov	r2, sl
 1000a18:	4659      	mov	r1, fp
 1000a1a:	9802      	ldr	r0, [sp, #8]
 1000a1c:	f003 fdb3 	bl	1004586 <outs>
 1000a20:	2800      	cmp	r0, #0
 1000a22:	f2c0 8146 	blt.w	1000cb2 <z_cbvprintf_impl+0x6e2>
 1000a26:	4405      	add	r5, r0
			continue;
 1000a28:	46ba      	mov	sl, r7
 1000a2a:	e5d9      	b.n	10005e0 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 1000a2c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 1000a30:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 1000a32:	ea4f 72e3 	mov.w	r2, r3, asr #31
 1000a36:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 1000a3a:	d102      	bne.n	1000a42 <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
 1000a3c:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
 1000a40:	e7d8      	b.n	10009f4 <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
 1000a42:	2902      	cmp	r1, #2
 1000a44:	d1e1      	bne.n	1000a0a <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
 1000a46:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 1000a4a:	e7d3      	b.n	10009f4 <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
 1000a4c:	2b02      	cmp	r3, #2
 1000a4e:	d129      	bne.n	1000aa4 <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
 1000a50:	1ecb      	subs	r3, r1, #3
 1000a52:	2b04      	cmp	r3, #4
 1000a54:	d813      	bhi.n	1000a7e <z_cbvprintf_impl+0x4ae>
 1000a56:	e8df f003 	tbb	[pc, r3]
 1000a5a:	0a03      	.short	0x0a03
 1000a5c:	120a      	.short	0x120a
 1000a5e:	12          	.byte	0x12
 1000a5f:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
 1000a60:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
 1000a62:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
 1000a64:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 1000a66:	920a      	str	r2, [sp, #40]	; 0x28
 1000a68:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
 1000a6a:	4604      	mov	r4, r0
 1000a6c:	e7cd      	b.n	1000a0a <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
 1000a6e:	1de0      	adds	r0, r4, #7
 1000a70:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 1000a74:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 1000a78:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 1000a7c:	e7f5      	b.n	1000a6a <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
 1000a7e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 1000a82:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 1000a84:	930a      	str	r3, [sp, #40]	; 0x28
 1000a86:	f04f 0300 	mov.w	r3, #0
 1000a8a:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 1000a8c:	d105      	bne.n	1000a9a <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
 1000a8e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
 1000a92:	930a      	str	r3, [sp, #40]	; 0x28
 1000a94:	2300      	movs	r3, #0
 1000a96:	930b      	str	r3, [sp, #44]	; 0x2c
 1000a98:	e7b7      	b.n	1000a0a <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
 1000a9a:	2902      	cmp	r1, #2
 1000a9c:	d1b5      	bne.n	1000a0a <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
 1000a9e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 1000aa2:	e7f6      	b.n	1000a92 <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
 1000aa4:	2b04      	cmp	r3, #4
 1000aa6:	d109      	bne.n	1000abc <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
 1000aa8:	1de3      	adds	r3, r4, #7
 1000aaa:	f023 0307 	bic.w	r3, r3, #7
 1000aae:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 1000ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 1000ab6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 1000aba:	e7a6      	b.n	1000a0a <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 1000abc:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 1000abe:	bf04      	itt	eq
 1000ac0:	f854 3b04 	ldreq.w	r3, [r4], #4
 1000ac4:	930a      	streq	r3, [sp, #40]	; 0x28
 1000ac6:	e7a0      	b.n	1000a0a <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
 1000ac8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 1000acc:	2878      	cmp	r0, #120	; 0x78
 1000ace:	d8ab      	bhi.n	1000a28 <z_cbvprintf_impl+0x458>
 1000ad0:	2862      	cmp	r0, #98	; 0x62
 1000ad2:	d822      	bhi.n	1000b1a <z_cbvprintf_impl+0x54a>
 1000ad4:	2825      	cmp	r0, #37	; 0x25
 1000ad6:	f43f ad8c 	beq.w	10005f2 <z_cbvprintf_impl+0x22>
 1000ada:	2858      	cmp	r0, #88	; 0x58
 1000adc:	d1a4      	bne.n	1000a28 <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
 1000ade:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 1000ae2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 1000ae6:	9300      	str	r3, [sp, #0]
 1000ae8:	aa0c      	add	r2, sp, #48	; 0x30
 1000aea:	ab04      	add	r3, sp, #16
 1000aec:	f003 fd05 	bl	10044fa <encode_uint>
 1000af0:	4682      	mov	sl, r0
			if (precision >= 0) {
 1000af2:	f1b8 0f00 	cmp.w	r8, #0
 1000af6:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 1000afa:	db0c      	blt.n	1000b16 <z_cbvprintf_impl+0x546>
				conv->flag_zero = false;
 1000afc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 1000b00:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
 1000b04:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 1000b08:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 1000b0a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 1000b0e:	d902      	bls.n	1000b16 <z_cbvprintf_impl+0x546>
					conv->pad0_value = precision - (int)len;
 1000b10:	eba8 0303 	sub.w	r3, r8, r3
 1000b14:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 1000b16:	4680      	mov	r8, r0
 1000b18:	e03e      	b.n	1000b98 <z_cbvprintf_impl+0x5c8>
		switch (conv->specifier) {
 1000b1a:	3863      	subs	r0, #99	; 0x63
 1000b1c:	2815      	cmp	r0, #21
 1000b1e:	d883      	bhi.n	1000a28 <z_cbvprintf_impl+0x458>
 1000b20:	a201      	add	r2, pc, #4	; (adr r2, 1000b28 <z_cbvprintf_impl+0x558>)
 1000b22:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 1000b26:	bf00      	nop
 1000b28:	01000ba9 	.word	0x01000ba9
 1000b2c:	01000c0d 	.word	0x01000c0d
 1000b30:	01000a29 	.word	0x01000a29
 1000b34:	01000a29 	.word	0x01000a29
 1000b38:	01000a29 	.word	0x01000a29
 1000b3c:	01000a29 	.word	0x01000a29
 1000b40:	01000c0d 	.word	0x01000c0d
 1000b44:	01000a29 	.word	0x01000a29
 1000b48:	01000a29 	.word	0x01000a29
 1000b4c:	01000a29 	.word	0x01000a29
 1000b50:	01000a29 	.word	0x01000a29
 1000b54:	01000c67 	.word	0x01000c67
 1000b58:	01000c35 	.word	0x01000c35
 1000b5c:	01000c39 	.word	0x01000c39
 1000b60:	01000a29 	.word	0x01000a29
 1000b64:	01000a29 	.word	0x01000a29
 1000b68:	01000b81 	.word	0x01000b81
 1000b6c:	01000a29 	.word	0x01000a29
 1000b70:	01000c35 	.word	0x01000c35
 1000b74:	01000a29 	.word	0x01000a29
 1000b78:	01000a29 	.word	0x01000a29
 1000b7c:	01000c35 	.word	0x01000c35
			if (precision >= 0) {
 1000b80:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 1000b84:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
 1000b88:	db0a      	blt.n	1000ba0 <z_cbvprintf_impl+0x5d0>
				len = strnlen(bps, precision);
 1000b8a:	4641      	mov	r1, r8
 1000b8c:	4650      	mov	r0, sl
 1000b8e:	f003 fd53 	bl	1004638 <strnlen>
		char sign = 0;
 1000b92:	2600      	movs	r6, #0
			bpe = bps + len;
 1000b94:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
 1000b98:	f1ba 0f00 	cmp.w	sl, #0
 1000b9c:	d10c      	bne.n	1000bb8 <z_cbvprintf_impl+0x5e8>
 1000b9e:	e743      	b.n	1000a28 <z_cbvprintf_impl+0x458>
				len = strlen(bps);
 1000ba0:	4650      	mov	r0, sl
 1000ba2:	f003 fd42 	bl	100462a <strlen>
 1000ba6:	e7f4      	b.n	1000b92 <z_cbvprintf_impl+0x5c2>
			break;
 1000ba8:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 1000baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
 1000bac:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 1000bb0:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
 1000bb4:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
 1000bb8:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
 1000bbc:	b106      	cbz	r6, 1000bc0 <z_cbvprintf_impl+0x5f0>
			nj_len += 1U;
 1000bbe:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 1000bc0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 1000bc4:	06d0      	lsls	r0, r2, #27
 1000bc6:	d568      	bpl.n	1000c9a <z_cbvprintf_impl+0x6ca>
			nj_len += 2U;
 1000bc8:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 1000bca:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 1000bcc:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 1000bce:	bf48      	it	mi
 1000bd0:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 1000bd2:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 1000bd4:	bf48      	it	mi
 1000bd6:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 1000bd8:	f1b9 0f00 	cmp.w	r9, #0
 1000bdc:	dd76      	ble.n	1000ccc <z_cbvprintf_impl+0x6fc>
			if (!conv->flag_dash) {
 1000bde:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 1000be2:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
 1000be6:	f3c2 0380 	ubfx	r3, r2, #2, #1
 1000bea:	9303      	str	r3, [sp, #12]
 1000bec:	0753      	lsls	r3, r2, #29
 1000bee:	d46d      	bmi.n	1000ccc <z_cbvprintf_impl+0x6fc>
				if (conv->flag_zero) {
 1000bf0:	0650      	lsls	r0, r2, #25
 1000bf2:	d561      	bpl.n	1000cb8 <z_cbvprintf_impl+0x6e8>
					if (sign != 0) {
 1000bf4:	b146      	cbz	r6, 1000c08 <z_cbvprintf_impl+0x638>
						OUTC(sign);
 1000bf6:	4659      	mov	r1, fp
 1000bf8:	4630      	mov	r0, r6
 1000bfa:	9b02      	ldr	r3, [sp, #8]
 1000bfc:	4798      	blx	r3
 1000bfe:	2800      	cmp	r0, #0
 1000c00:	db57      	blt.n	1000cb2 <z_cbvprintf_impl+0x6e2>
						sign = 0;
 1000c02:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 1000c04:	3501      	adds	r5, #1
						sign = 0;
 1000c06:	461e      	mov	r6, r3
					pad = '0';
 1000c08:	2330      	movs	r3, #48	; 0x30
 1000c0a:	e056      	b.n	1000cba <z_cbvprintf_impl+0x6ea>
			if (conv->flag_plus) {
 1000c0c:	071e      	lsls	r6, r3, #28
 1000c0e:	d40f      	bmi.n	1000c30 <z_cbvprintf_impl+0x660>
				sign = ' ';
 1000c10:	f013 0610 	ands.w	r6, r3, #16
 1000c14:	bf18      	it	ne
 1000c16:	2620      	movne	r6, #32
			sint = value->sint;
 1000c18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
 1000c1c:	2b00      	cmp	r3, #0
 1000c1e:	f6bf af5e 	bge.w	1000ade <z_cbvprintf_impl+0x50e>
				value->uint = (uint_value_type)-sint;
 1000c22:	4252      	negs	r2, r2
 1000c24:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
 1000c28:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 1000c2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 1000c2e:	e756      	b.n	1000ade <z_cbvprintf_impl+0x50e>
				sign = '+';
 1000c30:	262b      	movs	r6, #43	; 0x2b
 1000c32:	e7f1      	b.n	1000c18 <z_cbvprintf_impl+0x648>
		switch (conv->specifier) {
 1000c34:	2600      	movs	r6, #0
 1000c36:	e752      	b.n	1000ade <z_cbvprintf_impl+0x50e>
			if (value->ptr != NULL) {
 1000c38:	980a      	ldr	r0, [sp, #40]	; 0x28
 1000c3a:	b340      	cbz	r0, 1000c8e <z_cbvprintf_impl+0x6be>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 1000c3c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 1000c40:	9300      	str	r3, [sp, #0]
 1000c42:	2100      	movs	r1, #0
 1000c44:	ab04      	add	r3, sp, #16
 1000c46:	aa0c      	add	r2, sp, #48	; 0x30
 1000c48:	f003 fc57 	bl	10044fa <encode_uint>
				conv->altform_0c = true;
 1000c4c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
 1000c50:	4682      	mov	sl, r0
				conv->altform_0c = true;
 1000c52:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 1000c56:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 1000c5a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
 1000c5e:	2600      	movs	r6, #0
				conv->altform_0c = true;
 1000c60:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
 1000c64:	e745      	b.n	1000af2 <z_cbvprintf_impl+0x522>
				store_count(conv, value->ptr, count);
 1000c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 1000c68:	2907      	cmp	r1, #7
 1000c6a:	f63f aedd 	bhi.w	1000a28 <z_cbvprintf_impl+0x458>
 1000c6e:	e8df f001 	tbb	[pc, r1]
 1000c72:	040c      	.short	0x040c
 1000c74:	08080c06 	.word	0x08080c06
 1000c78:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 1000c7a:	701d      	strb	r5, [r3, #0]
		break;
 1000c7c:	e6d4      	b.n	1000a28 <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
 1000c7e:	801d      	strh	r5, [r3, #0]
		break;
 1000c80:	e6d2      	b.n	1000a28 <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
 1000c82:	17ea      	asrs	r2, r5, #31
 1000c84:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 1000c88:	e6ce      	b.n	1000a28 <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 1000c8a:	601d      	str	r5, [r3, #0]
		break;
 1000c8c:	e6cc      	b.n	1000a28 <z_cbvprintf_impl+0x458>
			bps = "(nil)";
 1000c8e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1000d58 <z_cbvprintf_impl+0x788>
 1000c92:	4606      	mov	r6, r0
			bpe = bps + 5;
 1000c94:	f10a 0805 	add.w	r8, sl, #5
 1000c98:	e78e      	b.n	1000bb8 <z_cbvprintf_impl+0x5e8>
		} else if (conv->altform_0) {
 1000c9a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 1000c9c:	bf48      	it	mi
 1000c9e:	3301      	addmi	r3, #1
 1000ca0:	e793      	b.n	1000bca <z_cbvprintf_impl+0x5fa>
					OUTC(pad);
 1000ca2:	4618      	mov	r0, r3
 1000ca4:	9303      	str	r3, [sp, #12]
 1000ca6:	4659      	mov	r1, fp
 1000ca8:	9b02      	ldr	r3, [sp, #8]
 1000caa:	4798      	blx	r3
 1000cac:	2800      	cmp	r0, #0
 1000cae:	9b03      	ldr	r3, [sp, #12]
 1000cb0:	da04      	bge.n	1000cbc <z_cbvprintf_impl+0x6ec>
#undef OUTS
#undef OUTC
}
 1000cb2:	b011      	add	sp, #68	; 0x44
 1000cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 1000cb8:	2320      	movs	r3, #32
 1000cba:	444d      	add	r5, r9
 1000cbc:	464a      	mov	r2, r9
				while (width-- > 0) {
 1000cbe:	2a00      	cmp	r2, #0
 1000cc0:	eba5 0109 	sub.w	r1, r5, r9
 1000cc4:	f109 39ff 	add.w	r9, r9, #4294967295
 1000cc8:	dceb      	bgt.n	1000ca2 <z_cbvprintf_impl+0x6d2>
 1000cca:	460d      	mov	r5, r1
		if (sign != 0) {
 1000ccc:	b136      	cbz	r6, 1000cdc <z_cbvprintf_impl+0x70c>
			OUTC(sign);
 1000cce:	4659      	mov	r1, fp
 1000cd0:	4630      	mov	r0, r6
 1000cd2:	9b02      	ldr	r3, [sp, #8]
 1000cd4:	4798      	blx	r3
 1000cd6:	2800      	cmp	r0, #0
 1000cd8:	dbeb      	blt.n	1000cb2 <z_cbvprintf_impl+0x6e2>
 1000cda:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 1000cdc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 1000ce0:	06d9      	lsls	r1, r3, #27
 1000ce2:	d401      	bmi.n	1000ce8 <z_cbvprintf_impl+0x718>
 1000ce4:	071a      	lsls	r2, r3, #28
 1000ce6:	d506      	bpl.n	1000cf6 <z_cbvprintf_impl+0x726>
				OUTC('0');
 1000ce8:	4659      	mov	r1, fp
 1000cea:	2030      	movs	r0, #48	; 0x30
 1000cec:	9b02      	ldr	r3, [sp, #8]
 1000cee:	4798      	blx	r3
 1000cf0:	2800      	cmp	r0, #0
 1000cf2:	dbde      	blt.n	1000cb2 <z_cbvprintf_impl+0x6e2>
 1000cf4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 1000cf6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 1000cfa:	06db      	lsls	r3, r3, #27
 1000cfc:	d507      	bpl.n	1000d0e <z_cbvprintf_impl+0x73e>
				OUTC(conv->specifier);
 1000cfe:	4659      	mov	r1, fp
 1000d00:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 1000d04:	9b02      	ldr	r3, [sp, #8]
 1000d06:	4798      	blx	r3
 1000d08:	2800      	cmp	r0, #0
 1000d0a:	dbd2      	blt.n	1000cb2 <z_cbvprintf_impl+0x6e2>
 1000d0c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 1000d0e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 1000d10:	442e      	add	r6, r5
 1000d12:	1b73      	subs	r3, r6, r5
 1000d14:	2b00      	cmp	r3, #0
 1000d16:	dc16      	bgt.n	1000d46 <z_cbvprintf_impl+0x776>
			OUTS(bps, bpe);
 1000d18:	4643      	mov	r3, r8
 1000d1a:	4652      	mov	r2, sl
 1000d1c:	4659      	mov	r1, fp
 1000d1e:	9802      	ldr	r0, [sp, #8]
 1000d20:	f003 fc31 	bl	1004586 <outs>
 1000d24:	2800      	cmp	r0, #0
 1000d26:	dbc4      	blt.n	1000cb2 <z_cbvprintf_impl+0x6e2>
 1000d28:	4405      	add	r5, r0
		while (width > 0) {
 1000d2a:	44a9      	add	r9, r5
 1000d2c:	eba9 0305 	sub.w	r3, r9, r5
 1000d30:	2b00      	cmp	r3, #0
 1000d32:	f77f ae79 	ble.w	1000a28 <z_cbvprintf_impl+0x458>
			OUTC(' ');
 1000d36:	4659      	mov	r1, fp
 1000d38:	2020      	movs	r0, #32
 1000d3a:	9b02      	ldr	r3, [sp, #8]
 1000d3c:	4798      	blx	r3
 1000d3e:	2800      	cmp	r0, #0
 1000d40:	dbb7      	blt.n	1000cb2 <z_cbvprintf_impl+0x6e2>
 1000d42:	3501      	adds	r5, #1
			--width;
 1000d44:	e7f2      	b.n	1000d2c <z_cbvprintf_impl+0x75c>
				OUTC('0');
 1000d46:	4659      	mov	r1, fp
 1000d48:	2030      	movs	r0, #48	; 0x30
 1000d4a:	9b02      	ldr	r3, [sp, #8]
 1000d4c:	4798      	blx	r3
 1000d4e:	2800      	cmp	r0, #0
 1000d50:	dbaf      	blt.n	1000cb2 <z_cbvprintf_impl+0x6e2>
 1000d52:	3501      	adds	r5, #1
 1000d54:	e7dd      	b.n	1000d12 <z_cbvprintf_impl+0x742>
 1000d56:	bf00      	nop
 1000d58:	01005157 	.word	0x01005157

01000d5c <nordicsemi_nrf53_init>:
 1000d5c:	f04f 0220 	mov.w	r2, #32
 1000d60:	f3ef 8311 	mrs	r3, BASEPRI
 1000d64:	f382 8812 	msr	BASEPRI_MAX, r2
 1000d68:	f3bf 8f6f 	isb	sy
        NRFX_CRITICAL_SECTION_EXIT();
    }
    else
#endif
    {
        p_reg->ICACHECNF = (uint32_t)config;
 1000d6c:	2101      	movs	r1, #1
 1000d6e:	4a04      	ldr	r2, [pc, #16]	; (1000d80 <nordicsemi_nrf53_init+0x24>)
 1000d70:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
 1000d74:	f383 8811 	msr	BASEPRI, r3
 1000d78:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
 1000d7c:	2000      	movs	r0, #0
 1000d7e:	4770      	bx	lr
 1000d80:	41080000 	.word	0x41080000

01000d84 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
 1000d84:	b120      	cbz	r0, 1000d90 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
 1000d86:	4b03      	ldr	r3, [pc, #12]	; (1000d94 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
 1000d88:	0180      	lsls	r0, r0, #6
 1000d8a:	f043 0301 	orr.w	r3, r3, #1
 1000d8e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
 1000d90:	4770      	bx	lr
 1000d92:	bf00      	nop
 1000d94:	01005000 	.word	0x01005000

01000d98 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
 1000d98:	f001 bc40 	b.w	100261c <SystemInit>

01000d9c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 1000d9c:	4901      	ldr	r1, [pc, #4]	; (1000da4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 1000d9e:	2210      	movs	r2, #16
	str	r2, [r1]
 1000da0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 1000da2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 1000da4:	e000ed10 	.word	0xe000ed10

01000da8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 1000da8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 1000daa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 1000dac:	f380 8811 	msr	BASEPRI, r0
	isb
 1000db0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 1000db4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 1000db8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 1000dba:	b662      	cpsie	i
	isb
 1000dbc:	f3bf 8f6f 	isb	sy

	bx	lr
 1000dc0:	4770      	bx	lr
 1000dc2:	bf00      	nop

01000dc4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
 1000dc4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
 1000dc6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
 1000dc8:	f381 8811 	msr	BASEPRI, r1

	wfe
 1000dcc:	bf20      	wfe

	msr	BASEPRI, r0
 1000dce:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
 1000dd2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
 1000dd4:	4770      	bx	lr
 1000dd6:	bf00      	nop

01000dd8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 1000dd8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 1000dda:	2b00      	cmp	r3, #0
 1000ddc:	db08      	blt.n	1000df0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1000dde:	2201      	movs	r2, #1
 1000de0:	f000 001f 	and.w	r0, r0, #31
 1000de4:	fa02 f000 	lsl.w	r0, r2, r0
 1000de8:	4a02      	ldr	r2, [pc, #8]	; (1000df4 <arch_irq_enable+0x1c>)
 1000dea:	095b      	lsrs	r3, r3, #5
 1000dec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 1000df0:	4770      	bx	lr
 1000df2:	bf00      	nop
 1000df4:	e000e100 	.word	0xe000e100

01000df8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 1000df8:	4b05      	ldr	r3, [pc, #20]	; (1000e10 <arch_irq_is_enabled+0x18>)
 1000dfa:	0942      	lsrs	r2, r0, #5
 1000dfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 1000e00:	2301      	movs	r3, #1
 1000e02:	f000 001f 	and.w	r0, r0, #31
 1000e06:	fa03 f000 	lsl.w	r0, r3, r0
}
 1000e0a:	4010      	ands	r0, r2
 1000e0c:	4770      	bx	lr
 1000e0e:	bf00      	nop
 1000e10:	e000e100 	.word	0xe000e100

01000e14 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 1000e14:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 1000e16:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
 1000e18:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1000e1c:	bfac      	ite	ge
 1000e1e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1000e22:	4b06      	ldrlt	r3, [pc, #24]	; (1000e3c <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1000e24:	ea4f 1141 	mov.w	r1, r1, lsl #5
 1000e28:	b2c9      	uxtb	r1, r1
 1000e2a:	bfab      	itete	ge
 1000e2c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1000e30:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1000e34:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1000e38:	5419      	strblt	r1, [r3, r0]
}
 1000e3a:	4770      	bx	lr
 1000e3c:	e000ed14 	.word	0xe000ed14

01000e40 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 1000e40:	bf30      	wfi
    b z_SysNmiOnReset
 1000e42:	f7ff bffd 	b.w	1000e40 <z_SysNmiOnReset>
 1000e46:	bf00      	nop

01000e48 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 1000e48:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 1000e4a:	4b08      	ldr	r3, [pc, #32]	; (1000e6c <z_arm_prep_c+0x24>)
 1000e4c:	4a08      	ldr	r2, [pc, #32]	; (1000e70 <z_arm_prep_c+0x28>)
 1000e4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 1000e52:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 1000e54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1000e58:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 1000e5c:	f002 f924 	bl	10030a8 <z_bss_zero>
	z_data_copy();
 1000e60:	f003 f80e 	bl	1003e80 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 1000e64:	f000 f992 	bl	100118c <z_arm_interrupt_init>
	z_cstart();
 1000e68:	f002 f95e 	bl	1003128 <z_cstart>
 1000e6c:	01000000 	.word	0x01000000
 1000e70:	e000ed00 	.word	0xe000ed00

01000e74 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 1000e74:	4a09      	ldr	r2, [pc, #36]	; (1000e9c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 1000e76:	490a      	ldr	r1, [pc, #40]	; (1000ea0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 1000e78:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 1000e7a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 1000e7c:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
 1000e7e:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 1000e80:	4908      	ldr	r1, [pc, #32]	; (1000ea4 <arch_swap+0x30>)
 1000e82:	684b      	ldr	r3, [r1, #4]
 1000e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 1000e88:	604b      	str	r3, [r1, #4]
 1000e8a:	2300      	movs	r3, #0
 1000e8c:	f383 8811 	msr	BASEPRI, r3
 1000e90:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 1000e94:	6893      	ldr	r3, [r2, #8]
}
 1000e96:	6f98      	ldr	r0, [r3, #120]	; 0x78
 1000e98:	4770      	bx	lr
 1000e9a:	bf00      	nop
 1000e9c:	200003d4 	.word	0x200003d4
 1000ea0:	01005128 	.word	0x01005128
 1000ea4:	e000ed00 	.word	0xe000ed00

01000ea8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 1000ea8:	4913      	ldr	r1, [pc, #76]	; (1000ef8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
 1000eaa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 1000eac:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 1000eb0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 1000eb2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 1000eb6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 1000eba:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
 1000ebc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 1000ec0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 1000ec4:	4f0d      	ldr	r7, [pc, #52]	; (1000efc <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 1000ec6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 1000eca:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 1000ecc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 1000ece:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 1000ed0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 1000ed2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 1000ed4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 1000ed6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 1000eda:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 1000ede:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 1000ee2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
 1000ee6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
 1000eea:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
 1000eec:	f003 fb73 	bl	10045d6 <configure_builtin_stack_guard>
    pop {r2, lr}
 1000ef0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 1000ef4:	4770      	bx	lr
 1000ef6:	0000      	.short	0x0000
    ldr r1, =_kernel
 1000ef8:	200003d4 	.word	0x200003d4
    ldr v4, =_SCS_ICSR
 1000efc:	e000ed04 	.word	0xe000ed04

01000f00 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 1000f00:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 1000f04:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 1000f06:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 1000f0a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 1000f0e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 1000f10:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 1000f14:	2902      	cmp	r1, #2
    beq _oops
 1000f16:	d0ff      	beq.n	1000f18 <_oops>

01000f18 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 1000f18:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 1000f1a:	f003 fb4d 	bl	10045b8 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 1000f1e:	bd01      	pop	{r0, pc}

01000f20 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 1000f20:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 1000f24:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 1000f26:	490b      	ldr	r1, [pc, #44]	; (1000f54 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
 1000f28:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 1000f2c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 1000f2e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 1000f32:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 1000f36:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 1000f38:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
 1000f3c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 1000f40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 1000f44:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 1000f48:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 1000f4a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 1000f4c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 1000f4e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 1000f50:	4770      	bx	lr
 1000f52:	bf00      	nop
 1000f54:	010044e7 	.word	0x010044e7

01000f58 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 1000f58:	4b08      	ldr	r3, [pc, #32]	; (1000f7c <arch_switch_to_main_thread+0x24>)
 1000f5a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 1000f5c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 1000f5e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 1000f62:	4610      	mov	r0, r2
 1000f64:	f381 8809 	msr	PSP, r1
 1000f68:	2100      	movs	r1, #0
 1000f6a:	b663      	cpsie	if
 1000f6c:	f381 8811 	msr	BASEPRI, r1
 1000f70:	f3bf 8f6f 	isb	sy
 1000f74:	2200      	movs	r2, #0
 1000f76:	2300      	movs	r3, #0
 1000f78:	f003 fab5 	bl	10044e6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 1000f7c:	200003d4 	.word	0x200003d4

01000f80 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 1000f80:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 1000f82:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 1000f86:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 1000f8a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 1000f8e:	4904      	ldr	r1, [pc, #16]	; (1000fa0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 1000f90:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 1000f92:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 1000f94:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 1000f96:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 1000f9a:	4902      	ldr	r1, [pc, #8]	; (1000fa4 <_isr_wrapper+0x24>)
	bx r1
 1000f9c:	4708      	bx	r1
 1000f9e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 1000fa0:	01004ef0 	.word	0x01004ef0
	ldr r1, =z_arm_int_exit
 1000fa4:	01000fa9 	.word	0x01000fa9

01000fa8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 1000fa8:	4b04      	ldr	r3, [pc, #16]	; (1000fbc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 1000faa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 1000fac:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 1000fae:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 1000fb0:	d003      	beq.n	1000fba <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 1000fb2:	4903      	ldr	r1, [pc, #12]	; (1000fc0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 1000fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 1000fb8:	600a      	str	r2, [r1, #0]

01000fba <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 1000fba:	4770      	bx	lr
	ldr r3, =_kernel
 1000fbc:	200003d4 	.word	0x200003d4
	ldr r1, =_SCS_ICSR
 1000fc0:	e000ed04 	.word	0xe000ed04

01000fc4 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 1000fc4:	4b09      	ldr	r3, [pc, #36]	; (1000fec <usage_fault.constprop.0+0x28>)
 1000fc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 1000fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
 1000fca:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 1000fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 1000fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 1000fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 1000fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 1000fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
 1000fd6:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 1000fda:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 1000fde:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
 1000fe2:	bf18      	it	ne
 1000fe4:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 1000fe6:	629a      	str	r2, [r3, #40]	; 0x28
}
 1000fe8:	4770      	bx	lr
 1000fea:	bf00      	nop
 1000fec:	e000ed00 	.word	0xe000ed00

01000ff0 <bus_fault.constprop.0>:
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 1000ff0:	4b0c      	ldr	r3, [pc, #48]	; (1001024 <bus_fault.constprop.0+0x34>)
 1000ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 1000ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 1000ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1000ff8:	0592      	lsls	r2, r2, #22
 1000ffa:	d508      	bpl.n	100100e <bus_fault.constprop.0+0x1e>
		STORE_xFAR(bfar, SCB->BFAR);
 1000ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 1000ffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1001000:	0412      	lsls	r2, r2, #16
 1001002:	d504      	bpl.n	100100e <bus_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
 1001004:	b118      	cbz	r0, 100100e <bus_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 1001006:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1001008:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 100100c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 100100e:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 1001010:	4b04      	ldr	r3, [pc, #16]	; (1001024 <bus_fault.constprop.0+0x34>)
 1001012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 1001014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 1001016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1001018:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 100101c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 100101e:	7008      	strb	r0, [r1, #0]
}
 1001020:	4770      	bx	lr
 1001022:	bf00      	nop
 1001024:	e000ed00 	.word	0xe000ed00

01001028 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 1001028:	4b0d      	ldr	r3, [pc, #52]	; (1001060 <mem_manage_fault.constprop.0+0x38>)
 100102a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 100102c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 100102e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1001030:	0792      	lsls	r2, r2, #30
 1001032:	d508      	bpl.n	1001046 <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
 1001034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 1001036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1001038:	0612      	lsls	r2, r2, #24
 100103a:	d504      	bpl.n	1001046 <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
 100103c:	b118      	cbz	r0, 1001046 <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 100103e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1001040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 1001044:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1001046:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 1001048:	4b05      	ldr	r3, [pc, #20]	; (1001060 <mem_manage_fault.constprop.0+0x38>)
 100104a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 100104c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 100104e:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 1001050:	bf58      	it	pl
 1001052:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 1001054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1001056:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 100105a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 100105c:	7008      	strb	r0, [r1, #0]
}
 100105e:	4770      	bx	lr
 1001060:	e000ed00 	.word	0xe000ed00

01001064 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 1001064:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 1001066:	4b3d      	ldr	r3, [pc, #244]	; (100115c <z_arm_fault+0xf8>)
{
 1001068:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 100106a:	685b      	ldr	r3, [r3, #4]
 100106c:	2500      	movs	r5, #0
{
 100106e:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 1001070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 1001074:	f385 8811 	msr	BASEPRI, r5
 1001078:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 100107c:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 1001080:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 1001084:	d111      	bne.n	10010aa <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 1001086:	f002 010c 	and.w	r1, r2, #12
 100108a:	2908      	cmp	r1, #8
 100108c:	d00d      	beq.n	10010aa <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 100108e:	0712      	lsls	r2, r2, #28
 1001090:	d401      	bmi.n	1001096 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 1001092:	4606      	mov	r6, r0
			*nested_exc = true;
 1001094:	2501      	movs	r5, #1
	*recoverable = false;
 1001096:	2200      	movs	r2, #0
	switch (fault) {
 1001098:	3b03      	subs	r3, #3
	*recoverable = false;
 100109a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 100109e:	2b03      	cmp	r3, #3
 10010a0:	d855      	bhi.n	100114e <z_arm_fault+0xea>
 10010a2:	e8df f003 	tbb	[pc, r3]
 10010a6:	4c04      	.short	0x4c04
 10010a8:	4950      	.short	0x4950
		return NULL;
 10010aa:	462e      	mov	r6, r5
 10010ac:	e7f3      	b.n	1001096 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 10010ae:	4b2b      	ldr	r3, [pc, #172]	; (100115c <z_arm_fault+0xf8>)
 10010b0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 10010b2:	f014 0402 	ands.w	r4, r4, #2
 10010b6:	d14a      	bne.n	100114e <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 10010b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 10010ba:	2a00      	cmp	r2, #0
 10010bc:	db15      	blt.n	10010ea <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 10010be:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 10010c0:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 10010c4:	d011      	beq.n	10010ea <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
 10010c6:	69b2      	ldr	r2, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 10010c8:	f832 1c02 	ldrh.w	r1, [r2, #-2]
 10010cc:	f64d 7202 	movw	r2, #57090	; 0xdf02
 10010d0:	4291      	cmp	r1, r2
 10010d2:	d009      	beq.n	10010e8 <z_arm_fault+0x84>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 10010d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 10010d6:	b2d2      	uxtb	r2, r2
 10010d8:	b1fa      	cbz	r2, 100111a <z_arm_fault+0xb6>
			reason = mem_manage_fault(esf, 1, recoverable);
 10010da:	2001      	movs	r0, #1
 10010dc:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
 10010e0:	f7ff ffa2 	bl	1001028 <mem_manage_fault.constprop.0>
 10010e4:	4604      	mov	r4, r0
		break;
 10010e6:	e000      	b.n	10010ea <z_arm_fault+0x86>
			reason = esf->basic.r0;
 10010e8:	6834      	ldr	r4, [r6, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 10010ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 10010ee:	b993      	cbnz	r3, 1001116 <z_arm_fault+0xb2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 10010f0:	2220      	movs	r2, #32
 10010f2:	4631      	mov	r1, r6
 10010f4:	a802      	add	r0, sp, #8
 10010f6:	f003 faa8 	bl	100464a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 10010fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 10010fc:	b34d      	cbz	r5, 1001152 <z_arm_fault+0xee>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 10010fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 1001102:	b922      	cbnz	r2, 100110e <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 1001104:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 1001108:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 100110c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 100110e:	4620      	mov	r0, r4
 1001110:	a902      	add	r1, sp, #8
 1001112:	f003 fa4f 	bl	10045b4 <z_arm_fatal_error>
}
 1001116:	b00a      	add	sp, #40	; 0x28
 1001118:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 100111a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 100111c:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 1001120:	d005      	beq.n	100112e <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
 1001122:	2001      	movs	r0, #1
 1001124:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
 1001128:	f7ff ff62 	bl	1000ff0 <bus_fault.constprop.0>
 100112c:	e7da      	b.n	10010e4 <z_arm_fault+0x80>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 100112e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 1001130:	0c24      	lsrs	r4, r4, #16
 1001132:	0424      	lsls	r4, r4, #16
 1001134:	2c00      	cmp	r4, #0
 1001136:	d0d8      	beq.n	10010ea <z_arm_fault+0x86>
		reason = usage_fault(esf);
 1001138:	f7ff ff44 	bl	1000fc4 <usage_fault.constprop.0>
 100113c:	e7d2      	b.n	10010e4 <z_arm_fault+0x80>
		reason = mem_manage_fault(esf, 0, recoverable);
 100113e:	2000      	movs	r0, #0
 1001140:	f10d 0107 	add.w	r1, sp, #7
 1001144:	e7cc      	b.n	10010e0 <z_arm_fault+0x7c>
		reason = bus_fault(esf, 0, recoverable);
 1001146:	2000      	movs	r0, #0
 1001148:	f10d 0107 	add.w	r1, sp, #7
 100114c:	e7ec      	b.n	1001128 <z_arm_fault+0xc4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 100114e:	2400      	movs	r4, #0
 1001150:	e7cb      	b.n	10010ea <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 1001152:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 1001156:	f023 0301 	bic.w	r3, r3, #1
 100115a:	e7d7      	b.n	100110c <z_arm_fault+0xa8>
 100115c:	e000ed00 	.word	0xe000ed00

01001160 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 1001160:	4b04      	ldr	r3, [pc, #16]	; (1001174 <z_arm_fault_init+0x14>)
 1001162:	695a      	ldr	r2, [r3, #20]
 1001164:	f042 0210 	orr.w	r2, r2, #16
 1001168:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
 100116a:	695a      	ldr	r2, [r3, #20]
 100116c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 1001170:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 1001172:	4770      	bx	lr
 1001174:	e000ed00 	.word	0xe000ed00

01001178 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 1001178:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 100117c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 1001180:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 1001182:	4672      	mov	r2, lr
	bl z_arm_fault
 1001184:	f7ff ff6e 	bl	1001064 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 1001188:	bd01      	pop	{r0, pc}
 100118a:	bf00      	nop

0100118c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 100118c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 100118e:	2120      	movs	r1, #32
 1001190:	4803      	ldr	r0, [pc, #12]	; (10011a0 <z_arm_interrupt_init+0x14>)
 1001192:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 1001194:	3301      	adds	r3, #1
 1001196:	2b1e      	cmp	r3, #30
 1001198:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 100119c:	d1f9      	bne.n	1001192 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 100119e:	4770      	bx	lr
 10011a0:	e000e100 	.word	0xe000e100

010011a4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
 10011a4:	2000      	movs	r0, #0
    msr CONTROL, r0
 10011a6:	f380 8814 	msr	CONTROL, r0
    isb
 10011aa:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
 10011ae:	2000      	movs	r0, #0
    msr MSPLIM, r0
 10011b0:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
 10011b4:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
 10011b8:	f7ff fdee 	bl	1000d98 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
 10011bc:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
 10011be:	490e      	ldr	r1, [pc, #56]	; (10011f8 <__start+0x54>)
    str r0, [r1]
 10011c0:	6008      	str	r0, [r1, #0]
    dsb
 10011c2:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
 10011c6:	480d      	ldr	r0, [pc, #52]	; (10011fc <__start+0x58>)
    msr msp, r0
 10011c8:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
 10011cc:	f000 f83e 	bl	100124c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 10011d0:	2020      	movs	r0, #32
    msr BASEPRI, r0
 10011d2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 10011d6:	480a      	ldr	r0, [pc, #40]	; (1001200 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 10011d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 10011dc:	1840      	adds	r0, r0, r1
    msr PSP, r0
 10011de:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 10011e2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 10011e6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 10011e8:	4308      	orrs	r0, r1
    msr CONTROL, r0
 10011ea:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 10011ee:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 10011f2:	f7ff fe29 	bl	1000e48 <z_arm_prep_c>
 10011f6:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
 10011f8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
 10011fc:	20000818 	.word	0x20000818
    ldr r0, =z_interrupt_stacks
 1001200:	20000918 	.word	0x20000918

01001204 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
 1001204:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 1001208:	4905      	ldr	r1, [pc, #20]	; (1001220 <sys_arch_reboot+0x1c>)
 100120a:	4b06      	ldr	r3, [pc, #24]	; (1001224 <sys_arch_reboot+0x20>)
 100120c:	68ca      	ldr	r2, [r1, #12]
 100120e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 1001212:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 1001214:	60cb      	str	r3, [r1, #12]
 1001216:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 100121a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 100121c:	e7fd      	b.n	100121a <sys_arch_reboot+0x16>
 100121e:	bf00      	nop
 1001220:	e000ed00 	.word	0xe000ed00
 1001224:	05fa0004 	.word	0x05fa0004

01001228 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
 1001228:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
 100122a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
 100122c:	4906      	ldr	r1, [pc, #24]	; (1001248 <z_arm_clear_arm_mpu_config+0x20>)
 100122e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
 1001232:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
 1001236:	4293      	cmp	r3, r2
 1001238:	d100      	bne.n	100123c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
 100123a:	4770      	bx	lr
  mpu->RNR = rnr;
 100123c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
 1001240:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
 1001244:	3301      	adds	r3, #1
 1001246:	e7f6      	b.n	1001236 <z_arm_clear_arm_mpu_config+0xe>
 1001248:	e000ed00 	.word	0xe000ed00

0100124c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
 100124c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 100124e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 1001250:	2400      	movs	r4, #0
 1001252:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
 1001256:	f7ff ffe7 	bl	1001228 <z_arm_clear_arm_mpu_config>
 100125a:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
 100125c:	f04f 30ff 	mov.w	r0, #4294967295
 1001260:	4a0b      	ldr	r2, [pc, #44]	; (1001290 <z_arm_init_arch_hw_at_boot+0x44>)
 1001262:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
 1001266:	3301      	adds	r3, #1
 1001268:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
 100126a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
 100126e:	d1f8      	bne.n	1001262 <z_arm_init_arch_hw_at_boot+0x16>
 1001270:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
 1001272:	f04f 30ff 	mov.w	r0, #4294967295
 1001276:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
 100127a:	3301      	adds	r3, #1
 100127c:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
 100127e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
 1001282:	d1f8      	bne.n	1001276 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
 1001284:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
 1001286:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 100128a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
 100128e:	bd10      	pop	{r4, pc}
 1001290:	e000e100 	.word	0xe000e100

01001294 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 1001294:	4b08      	ldr	r3, [pc, #32]	; (10012b8 <z_impl_k_thread_abort+0x24>)
 1001296:	689b      	ldr	r3, [r3, #8]
 1001298:	4283      	cmp	r3, r0
 100129a:	d10b      	bne.n	10012b4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 100129c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 10012a0:	b143      	cbz	r3, 10012b4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 10012a2:	4b06      	ldr	r3, [pc, #24]	; (10012bc <z_impl_k_thread_abort+0x28>)
 10012a4:	685a      	ldr	r2, [r3, #4]
 10012a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 10012aa:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 10012ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 10012ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 10012b2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 10012b4:	f002 bd72 	b.w	1003d9c <z_thread_abort>
 10012b8:	200003d4 	.word	0x200003d4
 10012bc:	e000ed00 	.word	0xe000ed00

010012c0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 10012c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 10012c2:	4c09      	ldr	r4, [pc, #36]	; (10012e8 <z_arm_configure_static_mpu_regions+0x28>)
 10012c4:	4a09      	ldr	r2, [pc, #36]	; (10012ec <z_arm_configure_static_mpu_regions+0x2c>)
 10012c6:	4623      	mov	r3, r4
 10012c8:	2101      	movs	r1, #1
 10012ca:	4809      	ldr	r0, [pc, #36]	; (10012f0 <z_arm_configure_static_mpu_regions+0x30>)
 10012cc:	f000 f8f2 	bl	10014b4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
 10012d0:	2300      	movs	r3, #0
 10012d2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
 10012d4:	4b07      	ldr	r3, [pc, #28]	; (10012f4 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 10012d6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
 10012d8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 10012da:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
 10012dc:	9301      	str	r3, [sp, #4]
 10012de:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 10012e0:	f000 f8f2 	bl	10014c8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 10012e4:	b004      	add	sp, #16
 10012e6:	bd10      	pop	{r4, pc}
 10012e8:	20070000 	.word	0x20070000
 10012ec:	20000000 	.word	0x20000000
 10012f0:	01005008 	.word	0x01005008
 10012f4:	20000110 	.word	0x20000110

010012f8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
 10012f8:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
 10012fa:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
 10012fc:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
 10012fe:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
 1001302:	f004 031f 	and.w	r3, r4, #31
 1001306:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
 1001308:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
 100130a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
 100130c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
 1001310:	4905      	ldr	r1, [pc, #20]	; (1001328 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
 1001312:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
 1001316:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
 100131a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
 100131e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
 1001322:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
 1001326:	bd10      	pop	{r4, pc}
 1001328:	e000ed00 	.word	0xe000ed00

0100132c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
 100132c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1001330:	460f      	mov	r7, r1
 1001332:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 1001334:	4606      	mov	r6, r0
 1001336:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
 100133a:	4d52      	ldr	r5, [pc, #328]	; (1001484 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
 100133c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
 100133e:	45b8      	cmp	r8, r7
 1001340:	da09      	bge.n	1001356 <mpu_configure_regions_and_partition.constprop.0+0x2a>
		if (regions[i].size == 0U) {
 1001342:	f8d6 9004 	ldr.w	r9, [r6, #4]
 1001346:	f1b9 0f00 	cmp.w	r9, #0
 100134a:	d03a      	beq.n	10013c2 <mpu_configure_regions_and_partition.constprop.0+0x96>
		&&
 100134c:	f1b9 0f1f 	cmp.w	r9, #31
 1001350:	d805      	bhi.n	100135e <mpu_configure_regions_and_partition.constprop.0+0x32>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
 1001352:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
 1001356:	4620      	mov	r0, r4
 1001358:	b005      	add	sp, #20
 100135a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
 100135e:	f019 0f1f 	tst.w	r9, #31
 1001362:	d1f6      	bne.n	1001352 <mpu_configure_regions_and_partition.constprop.0+0x26>
		((part->start &
 1001364:	f8d6 a000 	ldr.w	sl, [r6]
		&&
 1001368:	f01a 0f1f 	tst.w	sl, #31
 100136c:	d1f1      	bne.n	1001352 <mpu_configure_regions_and_partition.constprop.0+0x26>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 100136e:	4650      	mov	r0, sl
 1001370:	f003 f935 	bl	10045de <arm_cmse_mpu_region_get>
 1001374:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 1001376:	eb09 000a 	add.w	r0, r9, sl
 100137a:	3801      	subs	r0, #1
 100137c:	f003 f92f 	bl	10045de <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
 1001380:	4583      	cmp	fp, r0
 1001382:	d1e6      	bne.n	1001352 <mpu_configure_regions_and_partition.constprop.0+0x26>
		if ((u_reg_index == -EINVAL) ||
 1001384:	f11b 0f16 	cmn.w	fp, #22
 1001388:	d0e3      	beq.n	1001352 <mpu_configure_regions_and_partition.constprop.0+0x26>
 100138a:	455c      	cmp	r4, fp
 100138c:	dde1      	ble.n	1001352 <mpu_configure_regions_and_partition.constprop.0+0x26>
	MPU->RNR = rnr;
 100138e:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
 1001392:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
 1001396:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
 100139a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
 100139e:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
 10013a2:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
 10013a6:	e9d6 3200 	ldrd	r3, r2, [r6]
 10013aa:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
 10013ac:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
 10013ae:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
 10013b2:	d11e      	bne.n	10013f2 <mpu_configure_regions_and_partition.constprop.0+0xc6>
 10013b4:	45ca      	cmp	sl, r9
 10013b6:	d108      	bne.n	10013ca <mpu_configure_regions_and_partition.constprop.0+0x9e>
			mpu_configure_region(u_reg_index, &regions[i]);
 10013b8:	4631      	mov	r1, r6
 10013ba:	fa5f f08b 	uxtb.w	r0, fp
 10013be:	f003 f917 	bl	10045f0 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
 10013c2:	f108 0801 	add.w	r8, r8, #1
 10013c6:	360c      	adds	r6, #12
 10013c8:	e7b9      	b.n	100133e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
 10013ca:	4631      	mov	r1, r6
	MPU->RNR = rnr;
 10013cc:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
 10013d0:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
 10013d4:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
 10013d8:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
 10013dc:	431a      	orrs	r2, r3
	MPU->RBAR = rbar;
 10013de:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
 10013e2:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
 10013e4:	f003 f904 	bl	10045f0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
 10013e8:	f110 0f16 	cmn.w	r0, #22
 10013ec:	d0b1      	beq.n	1001352 <mpu_configure_regions_and_partition.constprop.0+0x26>
			reg_index++;
 10013ee:	1c44      	adds	r4, r0, #1
 10013f0:	e7e7      	b.n	10013c2 <mpu_configure_regions_and_partition.constprop.0+0x96>
				regions[i].start - 1);
 10013f2:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
 10013f4:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
 10013f6:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
 10013f8:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
 10013fc:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
 1001400:	d108      	bne.n	1001414 <mpu_configure_regions_and_partition.constprop.0+0xe8>
	return MPU->RLAR;
 1001402:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
 1001406:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
 1001408:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
 100140c:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
 100140e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
 1001412:	e7e7      	b.n	10013e4 <mpu_configure_regions_and_partition.constprop.0+0xb8>
	return MPU->RLAR;
 1001414:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
 1001418:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
 100141c:	430b      	orrs	r3, r1
	MPU->RLAR = rlar;
 100141e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
 1001422:	4631      	mov	r1, r6
 1001424:	f003 f8e4 	bl	10045f0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
 1001428:	f110 0f16 	cmn.w	r0, #22
 100142c:	d091      	beq.n	1001352 <mpu_configure_regions_and_partition.constprop.0+0x26>
	MPU->RNR = rnr;
 100142e:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
 1001432:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
 1001436:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
 100143a:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = mpu_get_rbar() &
 100143e:	f362 0304 	bfi	r3, r2, #0, #5
 1001442:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
 1001446:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
 100144a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 100144e:	085b      	lsrs	r3, r3, #1
 1001450:	f363 1247 	bfi	r2, r3, #5, #3
 1001454:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
 1001458:	e9d6 3200 	ldrd	r3, r2, [r6]
 100145c:	4413      	add	r3, r2
 100145e:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
 1001460:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
 1001464:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
 1001466:	4453      	add	r3, sl
 1001468:	eba3 0309 	sub.w	r3, r3, r9
 100146c:	b2c8      	uxtb	r0, r1
 100146e:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 1001472:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
 1001474:	9303      	str	r3, [sp, #12]
 1001476:	f63f af6c 	bhi.w	1001352 <mpu_configure_regions_and_partition.constprop.0+0x26>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 100147a:	4669      	mov	r1, sp
 100147c:	f7ff ff3c 	bl	10012f8 <region_init>
 1001480:	e7b5      	b.n	10013ee <mpu_configure_regions_and_partition.constprop.0+0xc2>
 1001482:	bf00      	nop
 1001484:	e000ed00 	.word	0xe000ed00

01001488 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 1001488:	2205      	movs	r2, #5
 100148a:	4b04      	ldr	r3, [pc, #16]	; (100149c <arm_core_mpu_enable+0x14>)
 100148c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 1001490:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1001494:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 1001498:	4770      	bx	lr
 100149a:	bf00      	nop
 100149c:	e000ed00 	.word	0xe000ed00

010014a0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 10014a0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 10014a4:	2200      	movs	r2, #0
 10014a6:	4b02      	ldr	r3, [pc, #8]	; (10014b0 <arm_core_mpu_disable+0x10>)
 10014a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 10014ac:	4770      	bx	lr
 10014ae:	bf00      	nop
 10014b0:	e000ed00 	.word	0xe000ed00

010014b4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 10014b4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 10014b6:	4c03      	ldr	r4, [pc, #12]	; (10014c4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
 10014b8:	7822      	ldrb	r2, [r4, #0]
 10014ba:	f7ff ff37 	bl	100132c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 10014be:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 10014c0:	bd10      	pop	{r4, pc}
 10014c2:	bf00      	nop
 10014c4:	20000412 	.word	0x20000412

010014c8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
 10014c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10014cc:	4d29      	ldr	r5, [pc, #164]	; (1001574 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
 10014ce:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
 10014d0:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
 10014d2:	f04f 0800 	mov.w	r8, #0
 10014d6:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
 10014d8:	4f27      	ldr	r7, [pc, #156]	; (1001578 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
 10014da:	45d0      	cmp	r8, sl
 10014dc:	da1b      	bge.n	1001516 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
 10014de:	f8d6 9004 	ldr.w	r9, [r6, #4]
 10014e2:	f1b9 0f00 	cmp.w	r9, #0
 10014e6:	d03f      	beq.n	1001568 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
 10014e8:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 10014ea:	4608      	mov	r0, r1
 10014ec:	9101      	str	r1, [sp, #4]
 10014ee:	f003 f876 	bl	10045de <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 10014f2:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 10014f4:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 10014f6:	eb09 0001 	add.w	r0, r9, r1
 10014fa:	3801      	subs	r0, #1
 10014fc:	f003 f86f 	bl	10045de <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
 1001500:	4284      	cmp	r4, r0
 1001502:	f04f 0214 	mov.w	r2, #20
 1001506:	4b1d      	ldr	r3, [pc, #116]	; (100157c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
 1001508:	d008      	beq.n	100151c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
 100150a:	f06f 0315 	mvn.w	r3, #21
 100150e:	fb02 f808 	mul.w	r8, r2, r8
 1001512:	f84b 3008 	str.w	r3, [fp, r8]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
 1001516:	b003      	add	sp, #12
 1001518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
 100151c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
 1001520:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
 1001522:	d0f8      	beq.n	1001516 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
 1001524:	7819      	ldrb	r1, [r3, #0]
 1001526:	42a1      	cmp	r1, r4
 1001528:	ddf5      	ble.n	1001516 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
 100152a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
 100152e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 1001532:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
 1001536:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
 100153a:	f100 0108 	add.w	r1, r0, #8
 100153e:	7b00      	ldrb	r0, [r0, #12]
 1001540:	f364 0004 	bfi	r0, r4, #0, #5
 1001544:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
 1001546:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
 100154a:	790c      	ldrb	r4, [r1, #4]
 100154c:	0840      	lsrs	r0, r0, #1
 100154e:	f360 1447 	bfi	r4, r0, #5, #3
 1001552:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
 1001554:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
 1001558:	f021 011f 	bic.w	r1, r1, #31
 100155c:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
 100155e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
 1001562:	f021 011f 	bic.w	r1, r1, #31
 1001566:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
 1001568:	f108 0801 	add.w	r8, r8, #1
 100156c:	3514      	adds	r5, #20
 100156e:	360c      	adds	r6, #12
 1001570:	e7b3      	b.n	10014da <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
 1001572:	bf00      	nop
 1001574:	200002d8 	.word	0x200002d8
 1001578:	e000ed00 	.word	0xe000ed00
 100157c:	20000412 	.word	0x20000412

01001580 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 1001580:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 1001582:	4d0e      	ldr	r5, [pc, #56]	; (10015bc <z_arm_mpu_init+0x3c>)
 1001584:	682c      	ldr	r4, [r5, #0]
 1001586:	2c08      	cmp	r4, #8
 1001588:	d815      	bhi.n	10015b6 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 100158a:	2000      	movs	r0, #0
	arm_core_mpu_disable();
 100158c:	f7ff ff88 	bl	10014a0 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
 1001590:	4b0b      	ldr	r3, [pc, #44]	; (10015c0 <z_arm_mpu_init+0x40>)
 1001592:	4a0c      	ldr	r2, [pc, #48]	; (10015c4 <z_arm_mpu_init+0x44>)
 1001594:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 1001598:	4284      	cmp	r4, r0
 100159a:	d105      	bne.n	10015a8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 100159c:	4b0a      	ldr	r3, [pc, #40]	; (10015c8 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 100159e:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
 10015a0:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
 10015a2:	f7ff ff71 	bl	1001488 <arm_core_mpu_enable>
}
 10015a6:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 10015a8:	6869      	ldr	r1, [r5, #4]
 10015aa:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 10015ae:	f7ff fea3 	bl	10012f8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 10015b2:	3001      	adds	r0, #1
 10015b4:	e7f0      	b.n	1001598 <z_arm_mpu_init+0x18>
		return -1;
 10015b6:	f04f 30ff 	mov.w	r0, #4294967295
 10015ba:	e7f4      	b.n	10015a6 <z_arm_mpu_init+0x26>
 10015bc:	01005014 	.word	0x01005014
 10015c0:	e000ed00 	.word	0xe000ed00
 10015c4:	0044ffaa 	.word	0x0044ffaa
 10015c8:	20000412 	.word	0x20000412

010015cc <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 10015cc:	4b01      	ldr	r3, [pc, #4]	; (10015d4 <__stdout_hook_install+0x8>)
 10015ce:	6018      	str	r0, [r3, #0]
}
 10015d0:	4770      	bx	lr
 10015d2:	bf00      	nop
 10015d4:	20000004 	.word	0x20000004

010015d8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
 10015d8:	4b08      	ldr	r3, [pc, #32]	; (10015fc <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
 10015da:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
 10015dc:	1ac3      	subs	r3, r0, r3
{
 10015de:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 10015e0:	4907      	ldr	r1, [pc, #28]	; (1001600 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
 10015e2:	109b      	asrs	r3, r3, #2
{
 10015e4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 10015e6:	4359      	muls	r1, r3
 10015e8:	2240      	movs	r2, #64	; 0x40
 10015ea:	4806      	ldr	r0, [pc, #24]	; (1001604 <onoff_stop+0x2c>)
 10015ec:	f003 f860 	bl	10046b0 <stop>
	notify(mgr, res);
 10015f0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 10015f2:	4601      	mov	r1, r0
	notify(mgr, res);
 10015f4:	4620      	mov	r0, r4
}
 10015f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
 10015fa:	4718      	bx	r3
 10015fc:	200002fc 	.word	0x200002fc
 1001600:	b6db6db7 	.word	0xb6db6db7
 1001604:	01004e78 	.word	0x01004e78

01001608 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1001608:	2340      	movs	r3, #64	; 0x40
{
 100160a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
 100160c:	4c0b      	ldr	r4, [pc, #44]	; (100163c <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 100160e:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
 1001610:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1001612:	460b      	mov	r3, r1
{
 1001614:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1001616:	490a      	ldr	r1, [pc, #40]	; (1001640 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
 1001618:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 100161a:	4361      	muls	r1, r4
{
 100161c:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 100161e:	4a09      	ldr	r2, [pc, #36]	; (1001644 <onoff_start+0x3c>)
 1001620:	4809      	ldr	r0, [pc, #36]	; (1001648 <onoff_start+0x40>)
 1001622:	f003 f871 	bl	1004708 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
 1001626:	1e01      	subs	r1, r0, #0
 1001628:	da05      	bge.n	1001636 <onoff_start+0x2e>
		notify(mgr, err);
 100162a:	4630      	mov	r0, r6
 100162c:	462b      	mov	r3, r5
	}
}
 100162e:	b002      	add	sp, #8
 1001630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
 1001634:	4718      	bx	r3
}
 1001636:	b002      	add	sp, #8
 1001638:	bd70      	pop	{r4, r5, r6, pc}
 100163a:	bf00      	nop
 100163c:	200002fc 	.word	0x200002fc
 1001640:	b6db6db7 	.word	0xb6db6db7
 1001644:	01004779 	.word	0x01004779
 1001648:	01004e78 	.word	0x01004e78

0100164c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
 100164c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
 100164e:	2200      	movs	r2, #0
 1001650:	2101      	movs	r1, #1
{
 1001652:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
 1001654:	2005      	movs	r0, #5
 1001656:	f7ff fbdd 	bl	1000e14 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
 100165a:	4811      	ldr	r0, [pc, #68]	; (10016a0 <clk_init+0x54>)
 100165c:	f001 f8b4 	bl	10027c8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
 1001660:	4b10      	ldr	r3, [pc, #64]	; (10016a4 <clk_init+0x58>)
 1001662:	4298      	cmp	r0, r3
 1001664:	d118      	bne.n	1001698 <clk_init+0x4c>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
 1001666:	6920      	ldr	r0, [r4, #16]
 1001668:	f000 f9b8 	bl	10019dc <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
 100166c:	f001 f8be 	bl	10027ec <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
 1001670:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
 1001672:	490d      	ldr	r1, [pc, #52]	; (10016a8 <clk_init+0x5c>)
 1001674:	4630      	mov	r0, r6
 1001676:	f002 feb5 	bl	10043e4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
 100167a:	2800      	cmp	r0, #0
 100167c:	db0b      	blt.n	1001696 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 100167e:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
 1001680:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
 1001682:	4909      	ldr	r1, [pc, #36]	; (10016a8 <clk_init+0x5c>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 1001684:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
 1001686:	f104 001c 	add.w	r0, r4, #28
 100168a:	f002 feab 	bl	10043e4 <onoff_manager_init>
		if (err < 0) {
 100168e:	2800      	cmp	r0, #0
 1001690:	db01      	blt.n	1001696 <clk_init+0x4a>
	}

	return 0;
 1001692:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 1001694:	64e5      	str	r5, [r4, #76]	; 0x4c
}
 1001696:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 1001698:	f06f 0004 	mvn.w	r0, #4
 100169c:	e7fb      	b.n	1001696 <clk_init+0x4a>
 100169e:	bf00      	nop
 10016a0:	010016e1 	.word	0x010016e1
 10016a4:	0bad0000 	.word	0x0bad0000
 10016a8:	01005068 	.word	0x01005068

010016ac <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
 10016ac:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
 10016ae:	230c      	movs	r3, #12
	sub_data->cb = NULL;
 10016b0:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
 10016b2:	434b      	muls	r3, r1
 10016b4:	4808      	ldr	r0, [pc, #32]	; (10016d8 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
 10016b6:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
 10016b8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
 10016ba:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
 10016bc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
 10016c0:	4418      	add	r0, r3
	sub_data->cb = NULL;
 10016c2:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
 10016c4:	f002 ffe1 	bl	100468a <set_on_state>
	if (callback) {
 10016c8:	b12d      	cbz	r5, 10016d6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
 10016ca:	4632      	mov	r2, r6
 10016cc:	462b      	mov	r3, r5
}
 10016ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
 10016d2:	4802      	ldr	r0, [pc, #8]	; (10016dc <clkstarted_handle.constprop.0+0x30>)
 10016d4:	4718      	bx	r3
}
 10016d6:	bd70      	pop	{r4, r5, r6, pc}
 10016d8:	200002fc 	.word	0x200002fc
 10016dc:	01004e78 	.word	0x01004e78

010016e0 <clock_event_handler>:
	switch (event) {
 10016e0:	2801      	cmp	r0, #1
{
 10016e2:	b510      	push	{r4, lr}
 10016e4:	4604      	mov	r4, r0
	switch (event) {
 10016e6:	d00a      	beq.n	10016fe <clock_event_handler+0x1e>
 10016e8:	2803      	cmp	r0, #3
 10016ea:	d00c      	beq.n	1001706 <clock_event_handler+0x26>
 10016ec:	b978      	cbnz	r0, 100170e <clock_event_handler+0x2e>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
 10016ee:	4b08      	ldr	r3, [pc, #32]	; (1001710 <clock_event_handler+0x30>)
 10016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 10016f2:	075b      	lsls	r3, r3, #29
 10016f4:	d10b      	bne.n	100170e <clock_event_handler+0x2e>
}
 10016f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
 10016fa:	f7ff bfd7 	b.w	10016ac <clkstarted_handle.constprop.0>
			z_nrf_clock_calibration_lfclk_started();
 10016fe:	f000 f97b 	bl	10019f8 <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
 1001702:	4620      	mov	r0, r4
 1001704:	e7f7      	b.n	10016f6 <clock_event_handler+0x16>
}
 1001706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_nrf_clock_calibration_done_handler();
 100170a:	f000 b983 	b.w	1001a14 <z_nrf_clock_calibration_done_handler>
}
 100170e:	bd10      	pop	{r4, pc}
 1001710:	200002fc 	.word	0x200002fc

01001714 <generic_hfclk_start>:
{
 1001714:	b508      	push	{r3, lr}
	__asm__ volatile(
 1001716:	f04f 0320 	mov.w	r3, #32
 100171a:	f3ef 8111 	mrs	r1, BASEPRI
 100171e:	f383 8812 	msr	BASEPRI_MAX, r3
 1001722:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
 1001726:	4a11      	ldr	r2, [pc, #68]	; (100176c <generic_hfclk_start+0x58>)
 1001728:	6813      	ldr	r3, [r2, #0]
 100172a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
 100172e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
 1001732:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
 1001734:	d00b      	beq.n	100174e <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
 1001736:	4a0e      	ldr	r2, [pc, #56]	; (1001770 <generic_hfclk_start+0x5c>)
 1001738:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 100173c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
 1001740:	f013 0301 	ands.w	r3, r3, #1
 1001744:	d003      	beq.n	100174e <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
 1001746:	480b      	ldr	r0, [pc, #44]	; (1001774 <generic_hfclk_start+0x60>)
 1001748:	f002 ff9f 	bl	100468a <set_on_state>
			already_started = true;
 100174c:	2301      	movs	r3, #1
	__asm__ volatile(
 100174e:	f381 8811 	msr	BASEPRI, r1
 1001752:	f3bf 8f6f 	isb	sy
	if (already_started) {
 1001756:	b123      	cbz	r3, 1001762 <generic_hfclk_start+0x4e>
}
 1001758:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
 100175c:	2000      	movs	r0, #0
 100175e:	f7ff bfa5 	b.w	10016ac <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
 1001762:	2001      	movs	r0, #1
}
 1001764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1001768:	f001 b852 	b.w	1002810 <nrfx_clock_start>
 100176c:	2000034c 	.word	0x2000034c
 1001770:	41005000 	.word	0x41005000
 1001774:	2000033c 	.word	0x2000033c

01001778 <api_blocking_start>:
{
 1001778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
 100177a:	2200      	movs	r2, #0
 100177c:	2301      	movs	r3, #1
 100177e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
 1001782:	466b      	mov	r3, sp
 1001784:	4a08      	ldr	r2, [pc, #32]	; (10017a8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
 1001786:	f8cd d000 	str.w	sp, [sp]
 100178a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
 100178e:	f002 ffec 	bl	100476a <api_start>
	if (err < 0) {
 1001792:	2800      	cmp	r0, #0
 1001794:	db05      	blt.n	10017a2 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 1001796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 100179a:	2300      	movs	r3, #0
 100179c:	4668      	mov	r0, sp
 100179e:	f001 feb9 	bl	1003514 <z_impl_k_sem_take>
}
 10017a2:	b005      	add	sp, #20
 10017a4:	f85d fb04 	ldr.w	pc, [sp], #4
 10017a8:	01004791 	.word	0x01004791

010017ac <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 10017ac:	4b07      	ldr	r3, [pc, #28]	; (10017cc <generic_hfclk_stop+0x20>)
 10017ae:	e8d3 2fef 	ldaex	r2, [r3]
 10017b2:	f022 0102 	bic.w	r1, r2, #2
 10017b6:	e8c3 1fe0 	stlex	r0, r1, [r3]
 10017ba:	2800      	cmp	r0, #0
 10017bc:	d1f7      	bne.n	10017ae <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
 10017be:	07d3      	lsls	r3, r2, #31
 10017c0:	d402      	bmi.n	10017c8 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
 10017c2:	2001      	movs	r0, #1
 10017c4:	f003 b904 	b.w	10049d0 <nrfx_clock_stop>
}
 10017c8:	4770      	bx	lr
 10017ca:	bf00      	nop
 10017cc:	2000034c 	.word	0x2000034c

010017d0 <z_nrf_clock_control_get_onoff>:
	return &data->mgr[type];
 10017d0:	b2c3      	uxtb	r3, r0
}
 10017d2:	201c      	movs	r0, #28
 10017d4:	4a01      	ldr	r2, [pc, #4]	; (10017dc <z_nrf_clock_control_get_onoff+0xc>)
 10017d6:	fb03 2000 	mla	r0, r3, r0, r2
 10017da:	4770      	bx	lr
 10017dc:	200002fc 	.word	0x200002fc

010017e0 <z_nrf_clock_control_lf_on>:
{
 10017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 10017e2:	2201      	movs	r2, #1
 10017e4:	4606      	mov	r6, r0
 10017e6:	4924      	ldr	r1, [pc, #144]	; (1001878 <z_nrf_clock_control_lf_on+0x98>)
 10017e8:	e8d1 3fef 	ldaex	r3, [r1]
 10017ec:	e8c1 2fe0 	stlex	r0, r2, [r1]
 10017f0:	2800      	cmp	r0, #0
 10017f2:	d1f9      	bne.n	10017e8 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
 10017f4:	b933      	cbnz	r3, 1001804 <z_nrf_clock_control_lf_on+0x24>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
 10017f6:	4921      	ldr	r1, [pc, #132]	; (100187c <z_nrf_clock_control_lf_on+0x9c>)
		err = onoff_request(mgr, &cli);
 10017f8:	4821      	ldr	r0, [pc, #132]	; (1001880 <z_nrf_clock_control_lf_on+0xa0>)
 10017fa:	604b      	str	r3, [r1, #4]
 10017fc:	60cb      	str	r3, [r1, #12]
 10017fe:	608a      	str	r2, [r1, #8]
 1001800:	f002 fe03 	bl	100440a <onoff_request>
	switch (start_mode) {
 1001804:	1e73      	subs	r3, r6, #1
 1001806:	2b01      	cmp	r3, #1
 1001808:	d821      	bhi.n	100184e <z_nrf_clock_control_lf_on+0x6e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
 100180a:	f003 f963 	bl	1004ad4 <k_is_in_isr>
 100180e:	4604      	mov	r4, r0
 1001810:	b910      	cbnz	r0, 1001818 <z_nrf_clock_control_lf_on+0x38>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
 1001812:	4b1c      	ldr	r3, [pc, #112]	; (1001884 <z_nrf_clock_control_lf_on+0xa4>)
	int key = isr_mode ? irq_lock() : 0;
 1001814:	781b      	ldrb	r3, [r3, #0]
 1001816:	bb4b      	cbnz	r3, 100186c <z_nrf_clock_control_lf_on+0x8c>
	__asm__ volatile(
 1001818:	f04f 0320 	mov.w	r3, #32
 100181c:	f3ef 8511 	mrs	r5, BASEPRI
 1001820:	f383 8812 	msr	BASEPRI_MAX, r3
 1001824:	f3bf 8f6f 	isb	sy
 1001828:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 100182a:	4f17      	ldr	r7, [pc, #92]	; (1001888 <z_nrf_clock_control_lf_on+0xa8>)
 100182c:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 1001830:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 1001834:	03d2      	lsls	r2, r2, #15
 1001836:	d50b      	bpl.n	1001850 <z_nrf_clock_control_lf_on+0x70>
	while (!(nrfx_clock_is_running(d, (void *)&type)
 1001838:	f003 0303 	and.w	r3, r3, #3
 100183c:	2b01      	cmp	r3, #1
 100183e:	d001      	beq.n	1001844 <z_nrf_clock_control_lf_on+0x64>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
 1001840:	2e01      	cmp	r6, #1
 1001842:	d105      	bne.n	1001850 <z_nrf_clock_control_lf_on+0x70>
	if (isr_mode) {
 1001844:	b174      	cbz	r4, 1001864 <z_nrf_clock_control_lf_on+0x84>
	__asm__ volatile(
 1001846:	f385 8811 	msr	BASEPRI, r5
 100184a:	f3bf 8f6f 	isb	sy
}
 100184e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
 1001850:	b11c      	cbz	r4, 100185a <z_nrf_clock_control_lf_on+0x7a>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
 1001852:	4628      	mov	r0, r5
 1001854:	f7ff fab6 	bl	1000dc4 <arch_cpu_atomic_idle>
}
 1001858:	e7e8      	b.n	100182c <z_nrf_clock_control_lf_on+0x4c>
	return z_impl_k_sleep(timeout);
 100185a:	2100      	movs	r1, #0
 100185c:	2021      	movs	r0, #33	; 0x21
 100185e:	f002 fa7d 	bl	1003d5c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
 1001862:	e7e3      	b.n	100182c <z_nrf_clock_control_lf_on+0x4c>
    p_reg->INTENSET = mask;
 1001864:	2302      	movs	r3, #2
 1001866:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
}
 100186a:	e7f0      	b.n	100184e <z_nrf_clock_control_lf_on+0x6e>
    p_reg->INTENCLR = mask;
 100186c:	2202      	movs	r2, #2
 100186e:	4b06      	ldr	r3, [pc, #24]	; (1001888 <z_nrf_clock_control_lf_on+0xa8>)
	int key = isr_mode ? irq_lock() : 0;
 1001870:	4605      	mov	r5, r0
 1001872:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
 1001876:	e7d8      	b.n	100182a <z_nrf_clock_control_lf_on+0x4a>
 1001878:	20000350 	.word	0x20000350
 100187c:	200002ec 	.word	0x200002ec
 1001880:	20000318 	.word	0x20000318
 1001884:	20000416 	.word	0x20000416
 1001888:	41005000 	.word	0x41005000

0100188c <start_cal_process>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 100188c:	2201      	movs	r2, #1
 100188e:	4b0b      	ldr	r3, [pc, #44]	; (10018bc <start_cal_process+0x30>)
 1001890:	e8d3 1fef 	ldaex	r1, [r3]
 1001894:	2900      	cmp	r1, #0
 1001896:	d103      	bne.n	10018a0 <start_cal_process+0x14>
 1001898:	e8c3 2fe0 	stlex	r0, r2, [r3]
 100189c:	2800      	cmp	r0, #0
 100189e:	d1f7      	bne.n	1001890 <start_cal_process+0x4>
	cal_process_in_progress = 0;
}

static void start_cal_process(void)
{
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
 10018a0:	d10a      	bne.n	10018b8 <start_cal_process+0x2c>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
 10018a2:	2300      	movs	r3, #0
 10018a4:	4906      	ldr	r1, [pc, #24]	; (10018c0 <start_cal_process+0x34>)
 10018a6:	60cb      	str	r3, [r1, #12]
 10018a8:	4b06      	ldr	r3, [pc, #24]	; (10018c4 <start_cal_process+0x38>)
 10018aa:	604b      	str	r3, [r1, #4]
 10018ac:	2303      	movs	r3, #3
 10018ae:	608b      	str	r3, [r1, #8]
	err = onoff_request(mgr, cli);
 10018b0:	4b05      	ldr	r3, [pc, #20]	; (10018c8 <start_cal_process+0x3c>)
 10018b2:	6818      	ldr	r0, [r3, #0]
 10018b4:	f002 bda9 	b.w	100440a <onoff_request>
		 * will be released at the end of calibration process and
		 * stopped in consequence.
		 */
		lf_request();
	}
}
 10018b8:	4770      	bx	lr
 10018ba:	bf00      	nop
 10018bc:	20000354 	.word	0x20000354
 10018c0:	20000358 	.word	0x20000358
 10018c4:	010019b1 	.word	0x010019b1
 10018c8:	20000368 	.word	0x20000368

010018cc <temp_sensor_init>:
	total_skips_cnt = 0;
}

#if CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP
static int temp_sensor_init(const struct device *arg)
{
 10018cc:	b508      	push	{r3, lr}
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
 10018ce:	4805      	ldr	r0, [pc, #20]	; (10018e4 <temp_sensor_init+0x18>)
 10018d0:	4b05      	ldr	r3, [pc, #20]	; (10018e8 <temp_sensor_init+0x1c>)
 10018d2:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 10018d4:	f003 f8d5 	bl	1004a82 <z_device_is_ready>
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
		LOG_ERR("Temperature sensor not ready");
		return -ENODEV;
 10018d8:	2800      	cmp	r0, #0
	}

	return 0;
}
 10018da:	bf0c      	ite	eq
 10018dc:	f06f 0012 	mvneq.w	r0, #18
 10018e0:	2000      	movne	r0, #0
 10018e2:	bd08      	pop	{r3, pc}
 10018e4:	01004ed8 	.word	0x01004ed8
 10018e8:	2000036c 	.word	0x2000036c

010018ec <start_cycle>:
{
 10018ec:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
 10018ee:	2200      	movs	r2, #0
 10018f0:	2300      	movs	r3, #0
 10018f2:	4809      	ldr	r0, [pc, #36]	; (1001918 <start_cycle+0x2c>)
 10018f4:	e9cd 2300 	strd	r2, r3, [sp]
 10018f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 10018fc:	2300      	movs	r3, #0
 10018fe:	f002 fc7d 	bl	10041fc <z_impl_k_timer_start>
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
 1001902:	4b06      	ldr	r3, [pc, #24]	; (100191c <start_cycle+0x30>)
	err = onoff_release(mgr);
 1001904:	6818      	ldr	r0, [r3, #0]
 1001906:	f002 fdc9 	bl	100449c <onoff_release>
	cal_process_in_progress = 0;
 100190a:	2200      	movs	r2, #0
 100190c:	4b04      	ldr	r3, [pc, #16]	; (1001920 <start_cycle+0x34>)
 100190e:	601a      	str	r2, [r3, #0]
}
 1001910:	b003      	add	sp, #12
 1001912:	f85d fb04 	ldr.w	pc, [sp], #4
 1001916:	bf00      	nop
 1001918:	200000d8 	.word	0x200000d8
 100191c:	20000368 	.word	0x20000368
 1001920:	20000354 	.word	0x20000354

01001924 <measure_temperature>:
{
 1001924:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int rc = sensor_sample_fetch(temp_sensor);
 1001926:	4d1d      	ldr	r5, [pc, #116]	; (100199c <measure_temperature+0x78>)
 1001928:	6828      	ldr	r0, [r5, #0]
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
 100192a:	6883      	ldr	r3, [r0, #8]
 100192c:	2139      	movs	r1, #57	; 0x39
 100192e:	68db      	ldr	r3, [r3, #12]
 1001930:	4798      	blx	r3
	if (rc == 0) {
 1001932:	4c1b      	ldr	r4, [pc, #108]	; (10019a0 <measure_temperature+0x7c>)
 1001934:	b170      	cbz	r0, 1001954 <measure_temperature+0x30>
		calib_skip_cnt = 0;
 1001936:	2300      	movs	r3, #0
	int16_t diff = 0;
 1001938:	461a      	mov	r2, r3
		calib_skip_cnt = 0;
 100193a:	7023      	strb	r3, [r4, #0]
	if ((calib_skip_cnt == 0) ||
 100193c:	7821      	ldrb	r1, [r4, #0]
 100193e:	b109      	cbz	r1, 1001944 <measure_temperature+0x20>
 1001940:	2a01      	cmp	r2, #1
 1001942:	dd20      	ble.n	1001986 <measure_temperature+0x62>
		prev_temperature = temperature;
 1001944:	4a17      	ldr	r2, [pc, #92]	; (10019a4 <measure_temperature+0x80>)
 1001946:	8013      	strh	r3, [r2, #0]
	nrfx_clock_calibration_start();
 1001948:	f000 ff9e 	bl	1002888 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
 100194c:	2301      	movs	r3, #1
 100194e:	7023      	strb	r3, [r4, #0]
}
 1001950:	b003      	add	sp, #12
 1001952:	bd30      	pop	{r4, r5, pc}
		rc = sensor_channel_get(temp_sensor, SENSOR_CHAN_DIE_TEMP,
 1001954:	6828      	ldr	r0, [r5, #0]
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
 1001956:	6883      	ldr	r3, [r0, #8]
 1001958:	466a      	mov	r2, sp
 100195a:	210c      	movs	r1, #12
 100195c:	691b      	ldr	r3, [r3, #16]
 100195e:	4798      	blx	r3
	if (rc == 0) {
 1001960:	2800      	cmp	r0, #0
 1001962:	d1e8      	bne.n	1001936 <measure_temperature+0x12>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
 1001964:	4a10      	ldr	r2, [pc, #64]	; (10019a8 <measure_temperature+0x84>)
 1001966:	9b01      	ldr	r3, [sp, #4]
 1001968:	fb93 f3f2 	sdiv	r3, r3, r2
 100196c:	9a00      	ldr	r2, [sp, #0]
 100196e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		diff = abs(temperature - prev_temperature);
 1001972:	4a0c      	ldr	r2, [pc, #48]	; (10019a4 <measure_temperature+0x80>)
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
 1001974:	b21b      	sxth	r3, r3
		diff = abs(temperature - prev_temperature);
 1001976:	f9b2 2000 	ldrsh.w	r2, [r2]
 100197a:	1a9a      	subs	r2, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
 100197c:	2a00      	cmp	r2, #0
 100197e:	bfb8      	it	lt
 1001980:	4252      	neglt	r2, r2
 1001982:	b212      	sxth	r2, r2
 1001984:	e7da      	b.n	100193c <measure_temperature+0x18>
		total_skips_cnt++;
 1001986:	4a09      	ldr	r2, [pc, #36]	; (10019ac <measure_temperature+0x88>)
		calib_skip_cnt--;
 1001988:	3901      	subs	r1, #1
		total_skips_cnt++;
 100198a:	6813      	ldr	r3, [r2, #0]
		calib_skip_cnt--;
 100198c:	7021      	strb	r1, [r4, #0]
		total_skips_cnt++;
 100198e:	3301      	adds	r3, #1
 1001990:	6013      	str	r3, [r2, #0]
}
 1001992:	b003      	add	sp, #12
 1001994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		start_cycle();
 1001998:	f7ff bfa8 	b.w	10018ec <start_cycle>
 100199c:	2000036c 	.word	0x2000036c
 10019a0:	20000413 	.word	0x20000413
 10019a4:	20000410 	.word	0x20000410
 10019a8:	0003d090 	.word	0x0003d090
 10019ac:	20000374 	.word	0x20000374

010019b0 <cal_hf_callback>:
{
 10019b0:	b508      	push	{r3, lr}
	if ((temp_sensor == NULL) || !IS_ENABLED(CONFIG_MULTITHREADING)) {
 10019b2:	4b07      	ldr	r3, [pc, #28]	; (10019d0 <cal_hf_callback+0x20>)
 10019b4:	681b      	ldr	r3, [r3, #0]
 10019b6:	b92b      	cbnz	r3, 10019c4 <cal_hf_callback+0x14>
	nrfx_clock_calibration_start();
 10019b8:	f000 ff66 	bl	1002888 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
 10019bc:	2201      	movs	r2, #1
 10019be:	4b05      	ldr	r3, [pc, #20]	; (10019d4 <cal_hf_callback+0x24>)
 10019c0:	701a      	strb	r2, [r3, #0]
}
 10019c2:	bd08      	pop	{r3, pc}
		k_work_submit(&temp_measure_work);
 10019c4:	4804      	ldr	r0, [pc, #16]	; (10019d8 <cal_hf_callback+0x28>)
}
 10019c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit(&temp_measure_work);
 10019ca:	f001 beb1 	b.w	1003730 <k_work_submit>
 10019ce:	bf00      	nop
 10019d0:	2000036c 	.word	0x2000036c
 10019d4:	20000413 	.word	0x20000413
 10019d8:	20000008 	.word	0x20000008

010019dc <z_nrf_clock_calibration_init>:
	mgrs = onoff_mgrs;
 10019dc:	4b03      	ldr	r3, [pc, #12]	; (10019ec <z_nrf_clock_calibration_init+0x10>)
	total_cnt = 0;
 10019de:	4a04      	ldr	r2, [pc, #16]	; (10019f0 <z_nrf_clock_calibration_init+0x14>)
	mgrs = onoff_mgrs;
 10019e0:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
 10019e2:	2300      	movs	r3, #0
 10019e4:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
 10019e6:	4a03      	ldr	r2, [pc, #12]	; (10019f4 <z_nrf_clock_calibration_init+0x18>)
 10019e8:	6013      	str	r3, [r2, #0]
}
 10019ea:	4770      	bx	lr
 10019ec:	20000368 	.word	0x20000368
 10019f0:	20000370 	.word	0x20000370
 10019f4:	20000374 	.word	0x20000374

010019f8 <z_nrf_clock_calibration_lfclk_started>:
SYS_INIT(temp_sensor_init, APPLICATION, 0);
#endif /* CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP */

static void start_unconditional_cal_process(void)
{
	calib_skip_cnt = 0;
 10019f8:	2200      	movs	r2, #0
 10019fa:	4b02      	ldr	r3, [pc, #8]	; (1001a04 <z_nrf_clock_calibration_lfclk_started+0xc>)
 10019fc:	701a      	strb	r2, [r3, #0]
	start_cal_process();
 10019fe:	f7ff bf45 	b.w	100188c <start_cal_process>
 1001a02:	bf00      	nop
 1001a04:	20000413 	.word	0x20000413

01001a08 <z_nrf_clock_calibration_lfclk_stopped>:
	z_impl_k_timer_stop(timer);
 1001a08:	4801      	ldr	r0, [pc, #4]	; (1001a10 <z_nrf_clock_calibration_lfclk_stopped+0x8>)
 1001a0a:	f003 b9ea 	b.w	1004de2 <z_impl_k_timer_stop>
 1001a0e:	bf00      	nop
 1001a10:	200000d8 	.word	0x200000d8

01001a14 <z_nrf_clock_calibration_done_handler>:
	LOG_DBG("Calibration stopped");
}

void z_nrf_clock_calibration_done_handler(void)
{
	total_cnt++;
 1001a14:	4a02      	ldr	r2, [pc, #8]	; (1001a20 <z_nrf_clock_calibration_done_handler+0xc>)
 1001a16:	6813      	ldr	r3, [r2, #0]
 1001a18:	3301      	adds	r3, #1
 1001a1a:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
 1001a1c:	f7ff bf66 	b.w	10018ec <start_cycle>
 1001a20:	20000370 	.word	0x20000370

01001a24 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 1001a24:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 1001a26:	4808      	ldr	r0, [pc, #32]	; (1001a48 <uart_console_init+0x24>)
 1001a28:	4b08      	ldr	r3, [pc, #32]	; (1001a4c <uart_console_init+0x28>)
 1001a2a:	6018      	str	r0, [r3, #0]
 1001a2c:	f003 f829 	bl	1004a82 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 1001a30:	b138      	cbz	r0, 1001a42 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 1001a32:	4807      	ldr	r0, [pc, #28]	; (1001a50 <uart_console_init+0x2c>)
 1001a34:	f7ff fdca 	bl	10015cc <__stdout_hook_install>
	__printk_hook_install(console_out);
 1001a38:	4805      	ldr	r0, [pc, #20]	; (1001a50 <uart_console_init+0x2c>)
 1001a3a:	f7fe fcd5 	bl	10003e8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 1001a3e:	2000      	movs	r0, #0
}
 1001a40:	bd08      	pop	{r3, pc}
		return -ENODEV;
 1001a42:	f06f 0012 	mvn.w	r0, #18
 1001a46:	e7fb      	b.n	1001a40 <uart_console_init+0x1c>
 1001a48:	01004ec0 	.word	0x01004ec0
 1001a4c:	20000378 	.word	0x20000378
 1001a50:	01001a55 	.word	0x01001a55

01001a54 <console_out>:
	if ('\n' == c) {
 1001a54:	280a      	cmp	r0, #10
{
 1001a56:	b538      	push	{r3, r4, r5, lr}
 1001a58:	4604      	mov	r4, r0
 1001a5a:	4d07      	ldr	r5, [pc, #28]	; (1001a78 <console_out+0x24>)
	if ('\n' == c) {
 1001a5c:	d104      	bne.n	1001a68 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 1001a5e:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 1001a60:	6883      	ldr	r3, [r0, #8]
 1001a62:	210d      	movs	r1, #13
 1001a64:	685b      	ldr	r3, [r3, #4]
 1001a66:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 1001a68:	6828      	ldr	r0, [r5, #0]
 1001a6a:	6883      	ldr	r3, [r0, #8]
 1001a6c:	b2e1      	uxtb	r1, r4
 1001a6e:	685b      	ldr	r3, [r3, #4]
 1001a70:	4798      	blx	r3
}
 1001a72:	4620      	mov	r0, r4
 1001a74:	bd38      	pop	{r3, r4, r5, pc}
 1001a76:	bf00      	nop
 1001a78:	20000378 	.word	0x20000378

01001a7c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
 1001a7c:	b530      	push	{r4, r5, lr}
	return port->config;
 1001a7e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
 1001a80:	f001 051f 	and.w	r5, r1, #31
 1001a84:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
 1001a86:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
 1001a8a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
 1001a8e:	b085      	sub	sp, #20
 1001a90:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
 1001a94:	d105      	bne.n	1001aa2 <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
 1001a96:	4628      	mov	r0, r5
 1001a98:	f001 f9a4 	bl	1002de4 <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
 1001a9c:	2000      	movs	r0, #0
}
 1001a9e:	b005      	add	sp, #20
 1001aa0:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 1001aa2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
 1001aa6:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
 1001aaa:	d133      	bne.n	1001b14 <gpio_nrfx_pin_interrupt_configure+0x98>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
 1001aac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 1001ab0:	bf0c      	ite	eq
 1001ab2:	2304      	moveq	r3, #4
 1001ab4:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
 1001ab6:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
 1001aba:	6883      	ldr	r3, [r0, #8]
 1001abc:	fa23 f101 	lsr.w	r1, r3, r1
 1001ac0:	07c9      	lsls	r1, r1, #31
 1001ac2:	d419      	bmi.n	1001af8 <gpio_nrfx_pin_interrupt_configure+0x7c>
 1001ac4:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
 1001ac8:	d116      	bne.n	1001af8 <gpio_nrfx_pin_interrupt_configure+0x7c>
        case 1: return NRF_P1;
 1001aca:	4a1e      	ldr	r2, [pc, #120]	; (1001b44 <gpio_nrfx_pin_interrupt_configure+0xc8>)
 1001acc:	481e      	ldr	r0, [pc, #120]	; (1001b48 <gpio_nrfx_pin_interrupt_configure+0xcc>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
 1001ace:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
 1001ad0:	2901      	cmp	r1, #1
 1001ad2:	bf08      	it	eq
 1001ad4:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
 1001ad6:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
 1001ada:	3380      	adds	r3, #128	; 0x80
 1001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
 1001ae0:	07db      	lsls	r3, r3, #31
 1001ae2:	d409      	bmi.n	1001af8 <gpio_nrfx_pin_interrupt_configure+0x7c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
 1001ae4:	f10d 0407 	add.w	r4, sp, #7
 1001ae8:	4621      	mov	r1, r4
 1001aea:	4628      	mov	r0, r5
 1001aec:	f001 f8e0 	bl	1002cb0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
 1001af0:	4b16      	ldr	r3, [pc, #88]	; (1001b4c <gpio_nrfx_pin_interrupt_configure+0xd0>)
 1001af2:	4298      	cmp	r0, r3
 1001af4:	d019      	beq.n	1001b2a <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
 1001af6:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
 1001af8:	2300      	movs	r3, #0
 1001afa:	4628      	mov	r0, r5
 1001afc:	4619      	mov	r1, r3
 1001afe:	aa02      	add	r2, sp, #8
 1001b00:	f000 ffb0 	bl	1002a64 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
 1001b04:	4b12      	ldr	r3, [pc, #72]	; (1001b50 <gpio_nrfx_pin_interrupt_configure+0xd4>)
 1001b06:	4298      	cmp	r0, r3
 1001b08:	d118      	bne.n	1001b3c <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
 1001b0a:	2101      	movs	r1, #1
 1001b0c:	4628      	mov	r0, r5
 1001b0e:	f001 f923 	bl	1002d58 <nrfx_gpiote_trigger_enable>
 1001b12:	e7c3      	b.n	1001a9c <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
 1001b14:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 1001b18:	d005      	beq.n	1001b26 <gpio_nrfx_pin_interrupt_configure+0xaa>
 1001b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 1001b1e:	bf0c      	ite	eq
 1001b20:	2302      	moveq	r3, #2
 1001b22:	2301      	movne	r3, #1
 1001b24:	e7c7      	b.n	1001ab6 <gpio_nrfx_pin_interrupt_configure+0x3a>
 1001b26:	2303      	movs	r3, #3
 1001b28:	e7c5      	b.n	1001ab6 <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
 1001b2a:	4620      	mov	r0, r4
 1001b2c:	f001 f90e 	bl	1002d4c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
 1001b30:	4b07      	ldr	r3, [pc, #28]	; (1001b50 <gpio_nrfx_pin_interrupt_configure+0xd4>)
 1001b32:	4298      	cmp	r0, r3
 1001b34:	d0df      	beq.n	1001af6 <gpio_nrfx_pin_interrupt_configure+0x7a>
				return -ENOMEM;
 1001b36:	f06f 000b 	mvn.w	r0, #11
 1001b3a:	e7b0      	b.n	1001a9e <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
 1001b3c:	f06f 0015 	mvn.w	r0, #21
 1001b40:	e7ad      	b.n	1001a9e <gpio_nrfx_pin_interrupt_configure+0x22>
 1001b42:	bf00      	nop
 1001b44:	418c0500 	.word	0x418c0500
 1001b48:	418c0800 	.word	0x418c0800
 1001b4c:	0bad0004 	.word	0x0bad0004
 1001b50:	0bad0000 	.word	0x0bad0000

01001b54 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
 1001b54:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
 1001b56:	f001 f8e9 	bl	1002d2c <nrfx_gpiote_is_init>
 1001b5a:	4604      	mov	r4, r0
 1001b5c:	b968      	cbnz	r0, 1001b7a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
 1001b5e:	f001 f8bd 	bl	1002cdc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
 1001b62:	4b08      	ldr	r3, [pc, #32]	; (1001b84 <gpio_nrfx_init+0x30>)
 1001b64:	4298      	cmp	r0, r3
 1001b66:	d10a      	bne.n	1001b7e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
 1001b68:	4621      	mov	r1, r4
 1001b6a:	4807      	ldr	r0, [pc, #28]	; (1001b88 <gpio_nrfx_init+0x34>)
 1001b6c:	f001 f89a 	bl	1002ca4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
 1001b70:	4622      	mov	r2, r4
 1001b72:	2105      	movs	r1, #5
 1001b74:	200a      	movs	r0, #10
 1001b76:	f7ff f94d 	bl	1000e14 <z_arm_irq_priority_set>
		return 0;
 1001b7a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
 1001b7c:	bd10      	pop	{r4, pc}
		return -EIO;
 1001b7e:	f06f 0004 	mvn.w	r0, #4
 1001b82:	e7fb      	b.n	1001b7c <gpio_nrfx_init+0x28>
 1001b84:	0bad0000 	.word	0x0bad0000
 1001b88:	01001b8d 	.word	0x01001b8d

01001b8c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 1001b8c:	0942      	lsrs	r2, r0, #5
{
 1001b8e:	4603      	mov	r3, r0
 1001b90:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 1001b92:	d002      	beq.n	1001b9a <nrfx_gpio_handler+0xe>
 1001b94:	2a01      	cmp	r2, #1
 1001b96:	d015      	beq.n	1001bc4 <nrfx_gpio_handler+0x38>
}
 1001b98:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 1001b9a:	4e0b      	ldr	r6, [pc, #44]	; (1001bc8 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
 1001b9c:	6932      	ldr	r2, [r6, #16]
 1001b9e:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 1001ba0:	2900      	cmp	r1, #0
 1001ba2:	d0f9      	beq.n	1001b98 <nrfx_gpio_handler+0xc>
 1001ba4:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
 1001ba6:	f003 031f 	and.w	r3, r3, #31
 1001baa:	680c      	ldr	r4, [r1, #0]
 1001bac:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
 1001bae:	688a      	ldr	r2, [r1, #8]
 1001bb0:	402a      	ands	r2, r5
 1001bb2:	d002      	beq.n	1001bba <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 1001bb4:	4630      	mov	r0, r6
 1001bb6:	684b      	ldr	r3, [r1, #4]
 1001bb8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 1001bba:	2c00      	cmp	r4, #0
 1001bbc:	d0ec      	beq.n	1001b98 <nrfx_gpio_handler+0xc>
 1001bbe:	4621      	mov	r1, r4
 1001bc0:	6824      	ldr	r4, [r4, #0]
 1001bc2:	e7f4      	b.n	1001bae <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 1001bc4:	4e01      	ldr	r6, [pc, #4]	; (1001bcc <nrfx_gpio_handler+0x40>)
 1001bc6:	e7e9      	b.n	1001b9c <nrfx_gpio_handler+0x10>
 1001bc8:	01004e90 	.word	0x01004e90
 1001bcc:	01004ea8 	.word	0x01004ea8

01001bd0 <gpio_nrfx_pin_configure>:
{
 1001bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
 1001bd4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
 1001bd8:	f001 061f 	and.w	r6, r1, #31
 1001bdc:	f898 300c 	ldrb.w	r3, [r8, #12]
{
 1001be0:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
 1001be2:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
 1001be6:	4614      	mov	r4, r2
 1001be8:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
 1001bea:	4630      	mov	r0, r6
 1001bec:	f10d 0103 	add.w	r1, sp, #3
 1001bf0:	f001 f85e 	bl	1002cb0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
 1001bf4:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
 1001bf8:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
 1001bfa:	d10b      	bne.n	1001c14 <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
 1001bfc:	4630      	mov	r0, r6
 1001bfe:	f001 f919 	bl	1002e34 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
 1001c02:	4b42      	ldr	r3, [pc, #264]	; (1001d0c <gpio_nrfx_pin_configure+0x13c>)
 1001c04:	4599      	cmp	r9, r3
 1001c06:	d103      	bne.n	1001c10 <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
 1001c08:	f89d 0003 	ldrb.w	r0, [sp, #3]
 1001c0c:	f001 f898 	bl	1002d40 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
 1001c10:	2000      	movs	r0, #0
 1001c12:	e056      	b.n	1001cc2 <gpio_nrfx_pin_configure+0xf2>
	nrfx_gpiote_trigger_config_t trigger_config = {
 1001c14:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
 1001c16:	4630      	mov	r0, r6
 1001c18:	4619      	mov	r1, r3
 1001c1a:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
 1001c1c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
 1001c20:	f000 ff20 	bl	1002a64 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
 1001c24:	4b39      	ldr	r3, [pc, #228]	; (1001d0c <gpio_nrfx_pin_configure+0x13c>)
 1001c26:	4298      	cmp	r0, r3
 1001c28:	d002      	beq.n	1001c30 <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
 1001c2a:	f06f 0015 	mvn.w	r0, #21
 1001c2e:	e048      	b.n	1001cc2 <gpio_nrfx_pin_configure+0xf2>
	if (free_ch) {
 1001c30:	4581      	cmp	r9, r0
 1001c32:	d103      	bne.n	1001c3c <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
 1001c34:	f89d 0003 	ldrb.w	r0, [sp, #3]
 1001c38:	f001 f882 	bl	1002d40 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
 1001c3c:	03a5      	lsls	r5, r4, #14
 1001c3e:	d552      	bpl.n	1001ce6 <gpio_nrfx_pin_configure+0x116>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
 1001c40:	f240 3306 	movw	r3, #774	; 0x306
 1001c44:	4023      	ands	r3, r4
 1001c46:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 1001c4a:	d03d      	beq.n	1001cc8 <gpio_nrfx_pin_configure+0xf8>
 1001c4c:	d80c      	bhi.n	1001c68 <gpio_nrfx_pin_configure+0x98>
 1001c4e:	2b06      	cmp	r3, #6
 1001c50:	d015      	beq.n	1001c7e <gpio_nrfx_pin_configure+0xae>
 1001c52:	d804      	bhi.n	1001c5e <gpio_nrfx_pin_configure+0x8e>
 1001c54:	b19b      	cbz	r3, 1001c7e <gpio_nrfx_pin_configure+0xae>
 1001c56:	2b02      	cmp	r3, #2
 1001c58:	d1e7      	bne.n	1001c2a <gpio_nrfx_pin_configure+0x5a>
 1001c5a:	2304      	movs	r3, #4
 1001c5c:	e00f      	b.n	1001c7e <gpio_nrfx_pin_configure+0xae>
 1001c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 1001c62:	d1e2      	bne.n	1001c2a <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
 1001c64:	2301      	movs	r3, #1
 1001c66:	e00a      	b.n	1001c7e <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
 1001c68:	f240 2202 	movw	r2, #514	; 0x202
 1001c6c:	4293      	cmp	r3, r2
 1001c6e:	d02d      	beq.n	1001ccc <gpio_nrfx_pin_configure+0xfc>
 1001c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 1001c74:	d02c      	beq.n	1001cd0 <gpio_nrfx_pin_configure+0x100>
 1001c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 1001c7a:	d1d6      	bne.n	1001c2a <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
 1001c7c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
 1001c7e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
 1001c82:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
 1001c86:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
 1001c8a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
 1001c8c:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
 1001c90:	bf4c      	ite	mi
 1001c92:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
 1001c94:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
 1001c98:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
 1001c9a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
 1001c9e:	d519      	bpl.n	1001cd4 <gpio_nrfx_pin_configure+0x104>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
 1001ca0:	2101      	movs	r1, #1
 1001ca2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 1001ca6:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
 1001caa:	609f      	str	r7, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
 1001cac:	2200      	movs	r2, #0
 1001cae:	4630      	mov	r0, r6
 1001cb0:	a901      	add	r1, sp, #4
 1001cb2:	f000 ff83 	bl	1002bbc <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
 1001cb6:	4b15      	ldr	r3, [pc, #84]	; (1001d0c <gpio_nrfx_pin_configure+0x13c>)
 1001cb8:	4298      	cmp	r0, r3
 1001cba:	bf14      	ite	ne
 1001cbc:	f06f 0015 	mvnne.w	r0, #21
 1001cc0:	2000      	moveq	r0, #0
}
 1001cc2:	b005      	add	sp, #20
 1001cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
 1001cc8:	2307      	movs	r3, #7
 1001cca:	e7d8      	b.n	1001c7e <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
 1001ccc:	2305      	movs	r3, #5
 1001cce:	e7d6      	b.n	1001c7e <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
 1001cd0:	2303      	movs	r3, #3
 1001cd2:	e7d4      	b.n	1001c7e <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
 1001cd4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
 1001cd6:	bf41      	itttt	mi
 1001cd8:	2101      	movmi	r1, #1
 1001cda:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
 1001cde:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
 1001ce2:	60df      	strmi	r7, [r3, #12]
}
 1001ce4:	e7e2      	b.n	1001cac <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
 1001ce6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
 1001ce8:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
 1001cec:	bf4c      	ite	mi
 1001cee:	2403      	movmi	r4, #3
 1001cf0:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
 1001cf4:	461a      	mov	r2, r3
 1001cf6:	4630      	mov	r0, r6
 1001cf8:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
 1001cfa:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
 1001cfe:	f000 feb1 	bl	1002a64 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
 1001d02:	4b02      	ldr	r3, [pc, #8]	; (1001d0c <gpio_nrfx_pin_configure+0x13c>)
 1001d04:	4298      	cmp	r0, r3
 1001d06:	d083      	beq.n	1001c10 <gpio_nrfx_pin_configure+0x40>
 1001d08:	e78f      	b.n	1001c2a <gpio_nrfx_pin_configure+0x5a>
 1001d0a:	bf00      	nop
 1001d0c:	0bad0000 	.word	0x0bad0000

01001d10 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
 1001d10:	2201      	movs	r2, #1
 1001d12:	4b01      	ldr	r3, [pc, #4]	; (1001d18 <hfclk_on_callback+0x8>)
 1001d14:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
 1001d16:	4770      	bx	lr
 1001d18:	41010000 	.word	0x41010000

01001d1c <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
 1001d1c:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
 1001d1e:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
 1001d20:	d10b      	bne.n	1001d3a <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
 1001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 1001d24:	4906      	ldr	r1, [pc, #24]	; (1001d40 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
 1001d26:	4807      	ldr	r0, [pc, #28]	; (1001d44 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
 1001d28:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
 1001d2a:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
 1001d2e:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
 1001d32:	6011      	str	r1, [r2, #0]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
 1001d34:	2000      	movs	r0, #0
	val->val2 = uval % 1000000;
 1001d36:	6053      	str	r3, [r2, #4]
	return 0;
 1001d38:	4770      	bx	lr
		return -ENOTSUP;
 1001d3a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 1001d3e:	4770      	bx	lr
 1001d40:	0003d090 	.word	0x0003d090
 1001d44:	000f4240 	.word	0x000f4240

01001d48 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1001d48:	2200      	movs	r2, #0
 1001d4a:	4b04      	ldr	r3, [pc, #16]	; (1001d5c <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
 1001d4c:	6900      	ldr	r0, [r0, #16]
 1001d4e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
 1001d52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 1001d56:	f001 bbbd 	b.w	10034d4 <z_impl_k_sem_give>
 1001d5a:	bf00      	nop
 1001d5c:	41010000 	.word	0x41010000

01001d60 <temp_nrf5_sample_fetch>:
{
 1001d60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
 1001d62:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
 1001d64:	6aab      	ldr	r3, [r5, #40]	; 0x28
 1001d66:	b363      	cbz	r3, 1001dc2 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
 1001d68:	2939      	cmp	r1, #57	; 0x39
 1001d6a:	d001      	beq.n	1001d70 <temp_nrf5_sample_fetch+0x10>
 1001d6c:	290c      	cmp	r1, #12
 1001d6e:	d12b      	bne.n	1001dc8 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
 1001d70:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
 1001d74:	f04f 32ff 	mov.w	r2, #4294967295
 1001d78:	f04f 33ff 	mov.w	r3, #4294967295
 1001d7c:	4630      	mov	r0, r6
 1001d7e:	f001 faf5 	bl	100336c <z_impl_k_mutex_lock>
 1001d82:	4b13      	ldr	r3, [pc, #76]	; (1001dd0 <temp_nrf5_sample_fetch+0x70>)
 1001d84:	2400      	movs	r4, #0
 1001d86:	9301      	str	r3, [sp, #4]
 1001d88:	2303      	movs	r3, #3
	r = onoff_request(data->clk_mgr, &cli);
 1001d8a:	4669      	mov	r1, sp
 1001d8c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 1001d8e:	9403      	str	r4, [sp, #12]
 1001d90:	9302      	str	r3, [sp, #8]
 1001d92:	f002 fb3a 	bl	100440a <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
 1001d96:	f04f 32ff 	mov.w	r2, #4294967295
 1001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 1001d9e:	4628      	mov	r0, r5
 1001da0:	f001 fbb8 	bl	1003514 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
 1001da4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 1001da6:	f002 fb79 	bl	100449c <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
 1001daa:	4b0a      	ldr	r3, [pc, #40]	; (1001dd4 <temp_nrf5_sample_fetch+0x74>)
 1001dac:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
 1001db0:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
 1001db2:	2201      	movs	r2, #1
 1001db4:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
 1001db6:	4630      	mov	r0, r6
 1001db8:	f001 fb50 	bl	100345c <z_impl_k_mutex_unlock>
	return 0;
 1001dbc:	4620      	mov	r0, r4
}
 1001dbe:	b004      	add	sp, #16
 1001dc0:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
 1001dc2:	f06f 000a 	mvn.w	r0, #10
 1001dc6:	e7fa      	b.n	1001dbe <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
 1001dc8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 1001dcc:	e7f7      	b.n	1001dbe <temp_nrf5_sample_fetch+0x5e>
 1001dce:	bf00      	nop
 1001dd0:	01001d11 	.word	0x01001d11
 1001dd4:	41010000 	.word	0x41010000

01001dd8 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
 1001dd8:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
 1001dda:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
 1001ddc:	2000      	movs	r0, #0
 1001dde:	f7ff fcf7 	bl	10017d0 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
 1001de2:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
 1001de4:	f04f 32ff 	mov.w	r2, #4294967295
 1001de8:	2100      	movs	r1, #0
 1001dea:	4620      	mov	r0, r4
 1001dec:	f002 fe98 	bl	1004b20 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
 1001df0:	f104 0010 	add.w	r0, r4, #16
 1001df4:	f002 fe8d 	bl	1004b12 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
 1001df8:	2200      	movs	r2, #0
 1001dfa:	2101      	movs	r1, #1
 1001dfc:	2010      	movs	r0, #16
 1001dfe:	f7ff f809 	bl	1000e14 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
 1001e02:	2010      	movs	r0, #16
 1001e04:	f7fe ffe8 	bl	1000dd8 <arch_irq_enable>
    p_reg->INTENSET = mask;
 1001e08:	2201      	movs	r2, #1
 1001e0a:	4b02      	ldr	r3, [pc, #8]	; (1001e14 <temp_nrf5_init+0x3c>)

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
 1001e0c:	2000      	movs	r0, #0
 1001e0e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 1001e12:	bd10      	pop	{r4, pc}
 1001e14:	41010000 	.word	0x41010000

01001e18 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 1001e18:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
 1001e1a:	794b      	ldrb	r3, [r1, #5]
 1001e1c:	2b01      	cmp	r3, #1
 1001e1e:	d028      	beq.n	1001e72 <uarte_nrfx_configure+0x5a>
 1001e20:	2b03      	cmp	r3, #3
 1001e22:	d123      	bne.n	1001e6c <uarte_nrfx_configure+0x54>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
 1001e24:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
 1001e26:	798b      	ldrb	r3, [r1, #6]
 1001e28:	2b03      	cmp	r3, #3
 1001e2a:	d11f      	bne.n	1001e6c <uarte_nrfx_configure+0x54>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
 1001e2c:	79cd      	ldrb	r5, [r1, #7]
 1001e2e:	b10d      	cbz	r5, 1001e34 <uarte_nrfx_configure+0x1c>
 1001e30:	2d01      	cmp	r5, #1
 1001e32:	d11b      	bne.n	1001e6c <uarte_nrfx_configure+0x54>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
 1001e34:	790a      	ldrb	r2, [r1, #4]
 1001e36:	2a01      	cmp	r2, #1
 1001e38:	d01d      	beq.n	1001e76 <uarte_nrfx_configure+0x5e>
 1001e3a:	2a02      	cmp	r2, #2
 1001e3c:	d01f      	beq.n	1001e7e <uarte_nrfx_configure+0x66>
 1001e3e:	b9aa      	cbnz	r2, 1001e6c <uarte_nrfx_configure+0x54>
 1001e40:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
 1001e42:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
 1001e44:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
 1001e46:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
 1001e4a:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
 1001e4c:	d06e      	beq.n	1001f2c <uarte_nrfx_configure+0x114>
 1001e4e:	d833      	bhi.n	1001eb8 <uarte_nrfx_configure+0xa0>
 1001e50:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 1001e54:	d06d      	beq.n	1001f32 <uarte_nrfx_configure+0x11a>
 1001e56:	d81c      	bhi.n	1001e92 <uarte_nrfx_configure+0x7a>
 1001e58:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 1001e5c:	d06b      	beq.n	1001f36 <uarte_nrfx_configure+0x11e>
 1001e5e:	d810      	bhi.n	1001e82 <uarte_nrfx_configure+0x6a>
 1001e60:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 1001e64:	d06a      	beq.n	1001f3c <uarte_nrfx_configure+0x124>
 1001e66:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 1001e6a:	d06a      	beq.n	1001f42 <uarte_nrfx_configure+0x12a>
 1001e6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 1001e70:	e05b      	b.n	1001f2a <uarte_nrfx_configure+0x112>
	switch (cfg->stop_bits) {
 1001e72:	2700      	movs	r7, #0
 1001e74:	e7d7      	b.n	1001e26 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
 1001e76:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
 1001e7a:	220e      	movs	r2, #14
 1001e7c:	e7e1      	b.n	1001e42 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
 1001e7e:	2400      	movs	r4, #0
 1001e80:	e7fb      	b.n	1001e7a <uarte_nrfx_configure+0x62>
	switch (baudrate) {
 1001e82:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 1001e86:	d05f      	beq.n	1001f48 <uarte_nrfx_configure+0x130>
 1001e88:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 1001e8c:	d1ee      	bne.n	1001e6c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
 1001e8e:	4b39      	ldr	r3, [pc, #228]	; (1001f74 <uarte_nrfx_configure+0x15c>)
 1001e90:	e03e      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
 1001e92:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
 1001e96:	d05a      	beq.n	1001f4e <uarte_nrfx_configure+0x136>
 1001e98:	d807      	bhi.n	1001eaa <uarte_nrfx_configure+0x92>
 1001e9a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 1001e9e:	d058      	beq.n	1001f52 <uarte_nrfx_configure+0x13a>
 1001ea0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 1001ea4:	d1e2      	bne.n	1001e6c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
 1001ea6:	4b34      	ldr	r3, [pc, #208]	; (1001f78 <uarte_nrfx_configure+0x160>)
 1001ea8:	e032      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
 1001eaa:	f647 2c12 	movw	ip, #31250	; 0x7a12
 1001eae:	4563      	cmp	r3, ip
 1001eb0:	d1dc      	bne.n	1001e6c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
 1001eb2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 1001eb6:	e02b      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
 1001eb8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
 1001ebc:	d04b      	beq.n	1001f56 <uarte_nrfx_configure+0x13e>
 1001ebe:	d813      	bhi.n	1001ee8 <uarte_nrfx_configure+0xd0>
 1001ec0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 1001ec4:	d04a      	beq.n	1001f5c <uarte_nrfx_configure+0x144>
 1001ec6:	d809      	bhi.n	1001edc <uarte_nrfx_configure+0xc4>
 1001ec8:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
 1001ecc:	4563      	cmp	r3, ip
 1001ece:	d047      	beq.n	1001f60 <uarte_nrfx_configure+0x148>
 1001ed0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 1001ed4:	d1ca      	bne.n	1001e6c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
 1001ed6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
 1001eda:	e019      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
 1001edc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 1001ee0:	d1c4      	bne.n	1001e6c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
 1001ee2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
 1001ee6:	e013      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
 1001ee8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
 1001eec:	d03b      	beq.n	1001f66 <uarte_nrfx_configure+0x14e>
 1001eee:	d809      	bhi.n	1001f04 <uarte_nrfx_configure+0xec>
 1001ef0:	f8df c088 	ldr.w	ip, [pc, #136]	; 1001f7c <uarte_nrfx_configure+0x164>
 1001ef4:	4563      	cmp	r3, ip
 1001ef6:	d039      	beq.n	1001f6c <uarte_nrfx_configure+0x154>
 1001ef8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
 1001efc:	d1b6      	bne.n	1001e6c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
 1001efe:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
 1001f02:	e005      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
 1001f04:	f8df c078 	ldr.w	ip, [pc, #120]	; 1001f80 <uarte_nrfx_configure+0x168>
 1001f08:	4563      	cmp	r3, ip
 1001f0a:	d1af      	bne.n	1001e6c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
 1001f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
 1001f10:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
 1001f12:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
 1001f14:	433a      	orrs	r2, r7
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
 1001f16:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
 1001f1a:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
 1001f1c:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
 1001f1e:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
 1001f22:	c903      	ldmia	r1, {r0, r1}
 1001f24:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
 1001f28:	2000      	movs	r0, #0
}
 1001f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
 1001f2c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
 1001f30:	e7ee      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
 1001f32:	4b14      	ldr	r3, [pc, #80]	; (1001f84 <uarte_nrfx_configure+0x16c>)
 1001f34:	e7ec      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
 1001f36:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
 1001f3a:	e7e9      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = 0x00014000;
 1001f3c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
 1001f40:	e7e6      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
 1001f42:	f44f 331c 	mov.w	r3, #159744	; 0x27000
 1001f46:	e7e3      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
 1001f48:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
 1001f4c:	e7e0      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
 1001f4e:	4b0e      	ldr	r3, [pc, #56]	; (1001f88 <uarte_nrfx_configure+0x170>)
 1001f50:	e7de      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
 1001f52:	4b0e      	ldr	r3, [pc, #56]	; (1001f8c <uarte_nrfx_configure+0x174>)
 1001f54:	e7dc      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
 1001f56:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
 1001f5a:	e7d9      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
 1001f5c:	4b0c      	ldr	r3, [pc, #48]	; (1001f90 <uarte_nrfx_configure+0x178>)
 1001f5e:	e7d7      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
 1001f60:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
 1001f64:	e7d4      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
 1001f66:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 1001f6a:	e7d1      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
 1001f6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 1001f70:	e7ce      	b.n	1001f10 <uarte_nrfx_configure+0xf8>
 1001f72:	bf00      	nop
 1001f74:	0013b000 	.word	0x0013b000
 1001f78:	004ea000 	.word	0x004ea000
 1001f7c:	0003d090 	.word	0x0003d090
 1001f80:	000f4240 	.word	0x000f4240
 1001f84:	00275000 	.word	0x00275000
 1001f88:	0075c000 	.word	0x0075c000
 1001f8c:	003af000 	.word	0x003af000
 1001f90:	013a9000 	.word	0x013a9000

01001f94 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
 1001f94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 1001f98:	4607      	mov	r7, r0
 1001f9a:	2200      	movs	r2, #0
 1001f9c:	2101      	movs	r1, #1
 1001f9e:	2013      	movs	r0, #19
 1001fa0:	f7fe ff38 	bl	1000e14 <z_arm_irq_priority_set>
 1001fa4:	2013      	movs	r0, #19
 1001fa6:	f7fe ff17 	bl	1000dd8 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
 1001faa:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
 1001fac:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
 1001fb0:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
 1001fb2:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
 1001fb6:	f8d8 900c 	ldr.w	r9, [r8, #12]
 1001fba:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 1001fbe:	4648      	mov	r0, r9
	data->dev = dev;
 1001fc0:	6037      	str	r7, [r6, #0]
 1001fc2:	aa01      	add	r2, sp, #4
 1001fc4:	f002 fcab 	bl	100491e <pinctrl_lookup_state>
	if (ret < 0) {
 1001fc8:	1e05      	subs	r5, r0, #0
 1001fca:	db4e      	blt.n	100206a <uarte_0_init+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 1001fcc:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 1001fce:	f8d9 2000 	ldr.w	r2, [r9]
 1001fd2:	7919      	ldrb	r1, [r3, #4]
 1001fd4:	6818      	ldr	r0, [r3, #0]
 1001fd6:	f002 fcba 	bl	100494e <pinctrl_configure_pins>
	if (err < 0) {
 1001fda:	1e05      	subs	r5, r0, #0
 1001fdc:	db45      	blt.n	100206a <uarte_0_init+0xd6>
	err = uarte_nrfx_configure(dev, &data->uart_config);
 1001fde:	4638      	mov	r0, r7
 1001fe0:	1d31      	adds	r1, r6, #4
 1001fe2:	f7ff ff19 	bl	1001e18 <uarte_nrfx_configure>
	if (err) {
 1001fe6:	4605      	mov	r5, r0
 1001fe8:	2800      	cmp	r0, #0
 1001fea:	d13e      	bne.n	100206a <uarte_0_init+0xd6>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
 1001fec:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
 1001ff0:	0799      	lsls	r1, r3, #30
 1001ff2:	d512      	bpl.n	100201a <uarte_0_init+0x86>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
 1001ff4:	f106 0018 	add.w	r0, r6, #24
 1001ff8:	f000 fcae 	bl	1002958 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
 1001ffc:	4b1e      	ldr	r3, [pc, #120]	; (1002078 <uarte_0_init+0xe4>)
 1001ffe:	4298      	cmp	r0, r3
 1002000:	d137      	bne.n	1002072 <uarte_0_init+0xde>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
 1002002:	7e32      	ldrb	r2, [r6, #24]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
 1002004:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
 1002008:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
 100200c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
 1002010:	2301      	movs	r3, #1
 1002012:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
 1002014:	4a19      	ldr	r2, [pc, #100]	; (100207c <uarte_0_init+0xe8>)
 1002016:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
 100201a:	2308      	movs	r3, #8
 100201c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
 1002020:	f898 3008 	ldrb.w	r3, [r8, #8]
 1002024:	b953      	cbnz	r3, 100203c <uarte_0_init+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1002026:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 100202a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
 100202e:	6973      	ldr	r3, [r6, #20]
 1002030:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
 1002034:	2301      	movs	r3, #1
 1002036:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100203a:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
 100203c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 1002040:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
 1002042:	bf5c      	itt	pl
 1002044:	f44f 7280 	movpl.w	r2, #256	; 0x100
 1002048:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
 100204c:	06db      	lsls	r3, r3, #27
 100204e:	bf44      	itt	mi
 1002050:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
 1002054:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
 1002058:	6933      	ldr	r3, [r6, #16]
 100205a:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
 100205e:	2300      	movs	r3, #0
 1002060:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1002064:	2301      	movs	r3, #1
 1002066:	60a3      	str	r3, [r4, #8]
 1002068:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
 100206a:	4628      	mov	r0, r5
 100206c:	b003      	add	sp, #12
 100206e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
 1002072:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
 1002076:	e7f8      	b.n	100206a <uarte_0_init+0xd6>
 1002078:	0bad0000 	.word	0x0bad0000
 100207c:	4100f000 	.word	0x4100f000

01002080 <uarte_nrfx_poll_out>:
{
 1002080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1002082:	4604      	mov	r4, r0
 1002084:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
 1002086:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
 1002088:	f002 fd24 	bl	1004ad4 <k_is_in_isr>
 100208c:	b910      	cbnz	r0, 1002094 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
 100208e:	4b2d      	ldr	r3, [pc, #180]	; (1002144 <uarte_nrfx_poll_out+0xc4>)
	if (isr_mode) {
 1002090:	781b      	ldrb	r3, [r3, #0]
 1002092:	b98b      	cbnz	r3, 10020b8 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
 1002094:	f04f 0320 	mov.w	r3, #32
 1002098:	f3ef 8611 	mrs	r6, BASEPRI
 100209c:	f383 8812 	msr	BASEPRI_MAX, r3
 10020a0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
 10020a4:	6860      	ldr	r0, [r4, #4]
 10020a6:	4631      	mov	r1, r6
 10020a8:	f002 fbf0 	bl	100488c <is_tx_ready.isra.0>
 10020ac:	bb30      	cbnz	r0, 10020fc <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
 10020ae:	f386 8811 	msr	BASEPRI, r6
 10020b2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 10020b6:	e7ed      	b.n	1002094 <uarte_nrfx_poll_out+0x14>
{
 10020b8:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
 10020ba:	6860      	ldr	r0, [r4, #4]
 10020bc:	f002 fbe6 	bl	100488c <is_tx_ready.isra.0>
 10020c0:	b970      	cbnz	r0, 10020e0 <uarte_nrfx_poll_out+0x60>
 10020c2:	2001      	movs	r0, #1
 10020c4:	f002 fc82 	bl	10049cc <nrfx_busy_wait>
 10020c8:	3e01      	subs	r6, #1
 10020ca:	d1f6      	bne.n	10020ba <uarte_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
 10020cc:	2100      	movs	r1, #0
 10020ce:	2021      	movs	r0, #33	; 0x21
 10020d0:	f001 fe44 	bl	1003d5c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
 10020d4:	e7f0      	b.n	10020b8 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
 10020d6:	f386 8811 	msr	BASEPRI, r6
 10020da:	f3bf 8f6f 	isb	sy
}
 10020de:	e7f5      	b.n	10020cc <uarte_nrfx_poll_out+0x4c>
	__asm__ volatile(
 10020e0:	f04f 0320 	mov.w	r3, #32
 10020e4:	f3ef 8611 	mrs	r6, BASEPRI
 10020e8:	f383 8812 	msr	BASEPRI_MAX, r3
 10020ec:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
 10020f0:	6860      	ldr	r0, [r4, #4]
 10020f2:	4631      	mov	r1, r6
 10020f4:	f002 fbca 	bl	100488c <is_tx_ready.isra.0>
 10020f8:	2800      	cmp	r0, #0
 10020fa:	d0ec      	beq.n	10020d6 <uarte_nrfx_poll_out+0x56>
	*data->char_out = c;
 10020fc:	693b      	ldr	r3, [r7, #16]
 10020fe:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
 1002100:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
 1002102:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
 1002104:	6813      	ldr	r3, [r2, #0]
 1002106:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
 100210a:	2001      	movs	r0, #1
 100210c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1002110:	2000      	movs	r0, #0
 1002112:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
 1002116:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 100211a:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
 100211e:	6852      	ldr	r2, [r2, #4]
 1002120:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 1002124:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
 1002126:	bf41      	itttt	mi
 1002128:	2208      	movmi	r2, #8
 100212a:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
 100212e:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
 1002132:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1002136:	2201      	movs	r2, #1
 1002138:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
 100213a:	f381 8811 	msr	BASEPRI, r1
 100213e:	f3bf 8f6f 	isb	sy
}
 1002142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1002144:	20000416 	.word	0x20000416

01002148 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
 1002148:	2301      	movs	r3, #1
 100214a:	4083      	lsls	r3, r0
{
 100214c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
 100214e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 1002150:	4a0c      	ldr	r2, [pc, #48]	; (1002184 <compare_int_lock+0x3c>)
 1002152:	e8d2 1fef 	ldaex	r1, [r2]
 1002156:	ea01 0c04 	and.w	ip, r1, r4
 100215a:	e8c2 cfee 	stlex	lr, ip, [r2]
 100215e:	f1be 0f00 	cmp.w	lr, #0
 1002162:	d1f6      	bne.n	1002152 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1002164:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 1002168:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
 100216c:	4a06      	ldr	r2, [pc, #24]	; (1002188 <compare_int_lock+0x40>)
 100216e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
 1002172:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1002176:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
 100217a:	420b      	tst	r3, r1
}
 100217c:	bf14      	ite	ne
 100217e:	2001      	movne	r0, #1
 1002180:	2000      	moveq	r0, #0
 1002182:	bd10      	pop	{r4, pc}
 1002184:	200003c4 	.word	0x200003c4
 1002188:	41016000 	.word	0x41016000

0100218c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
 100218c:	4919      	ldr	r1, [pc, #100]	; (10021f4 <sys_clock_timeout_handler+0x68>)
{
 100218e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1002190:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
 1002192:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
 1002196:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
 1002198:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
 100219c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
 10021a0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
 10021a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 10021a6:	d222      	bcs.n	10021ee <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
 10021a8:	4b13      	ldr	r3, [pc, #76]	; (10021f8 <sys_clock_timeout_handler+0x6c>)
 10021aa:	681b      	ldr	r3, [r3, #0]
 10021ac:	0a1a      	lsrs	r2, r3, #8
 10021ae:	061b      	lsls	r3, r3, #24
 10021b0:	195e      	adds	r6, r3, r5
 10021b2:	4b12      	ldr	r3, [pc, #72]	; (10021fc <sys_clock_timeout_handler+0x70>)
 10021b4:	f142 0700 	adc.w	r7, r2, #0
 10021b8:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
 10021bc:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
 10021be:	f001 ff3d 	bl	100403c <sys_clock_announce>
    return p_reg->CC[ch];
 10021c2:	00a3      	lsls	r3, r4, #2
 10021c4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 10021c8:	f503 33b0 	add.w	r3, r3, #90112	; 0x16000
 10021cc:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
 10021d0:	42aa      	cmp	r2, r5
 10021d2:	d10b      	bne.n	10021ec <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
 10021d4:	b91e      	cbnz	r6, 10021de <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
 10021d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 10021da:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 10021de:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
 10021e2:	4b07      	ldr	r3, [pc, #28]	; (1002200 <sys_clock_timeout_handler+0x74>)
 10021e4:	fa00 f404 	lsl.w	r4, r0, r4
 10021e8:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
 10021ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
 10021ee:	2600      	movs	r6, #0
 10021f0:	e7e5      	b.n	10021be <sys_clock_timeout_handler+0x32>
 10021f2:	bf00      	nop
 10021f4:	20000128 	.word	0x20000128
 10021f8:	200003c8 	.word	0x200003c8
 10021fc:	20000110 	.word	0x20000110
 1002200:	41016000 	.word	0x41016000

01002204 <compare_int_unlock>:
	if (key) {
 1002204:	b1e1      	cbz	r1, 1002240 <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
 1002206:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 1002208:	4a0e      	ldr	r2, [pc, #56]	; (1002244 <compare_int_unlock+0x40>)
 100220a:	4083      	lsls	r3, r0
 100220c:	e8d2 1fef 	ldaex	r1, [r2]
 1002210:	4319      	orrs	r1, r3
 1002212:	e8c2 1fec 	stlex	ip, r1, [r2]
 1002216:	f1bc 0f00 	cmp.w	ip, #0
 100221a:	d1f7      	bne.n	100220c <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 100221c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
 1002220:	4a09      	ldr	r2, [pc, #36]	; (1002248 <compare_int_unlock+0x44>)
 1002222:	4083      	lsls	r3, r0
 1002224:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 1002228:	4b08      	ldr	r3, [pc, #32]	; (100224c <compare_int_unlock+0x48>)
 100222a:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
 100222e:	fa23 f000 	lsr.w	r0, r3, r0
 1002232:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1002234:	bf42      	ittt	mi
 1002236:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
 100223a:	4b05      	ldrmi	r3, [pc, #20]	; (1002250 <compare_int_unlock+0x4c>)
 100223c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
 1002240:	4770      	bx	lr
 1002242:	bf00      	nop
 1002244:	200003c4 	.word	0x200003c4
 1002248:	41016000 	.word	0x41016000
 100224c:	200003c0 	.word	0x200003c0
 1002250:	e000e100 	.word	0xe000e100

01002254 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
 1002254:	4b0d      	ldr	r3, [pc, #52]	; (100228c <z_nrf_rtc_timer_read+0x38>)
 1002256:	6818      	ldr	r0, [r3, #0]
 1002258:	0a01      	lsrs	r1, r0, #8
 100225a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
 100225c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
 1002260:	4b0b      	ldr	r3, [pc, #44]	; (1002290 <z_nrf_rtc_timer_read+0x3c>)
 1002262:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
 1002266:	1818      	adds	r0, r3, r0
 1002268:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
 100226c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 1002270:	d20a      	bcs.n	1002288 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
 1002272:	4b08      	ldr	r3, [pc, #32]	; (1002294 <z_nrf_rtc_timer_read+0x40>)
 1002274:	e9d3 2300 	ldrd	r2, r3, [r3]
 1002278:	4290      	cmp	r0, r2
 100227a:	eb71 0303 	sbcs.w	r3, r1, r3
 100227e:	d203      	bcs.n	1002288 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
 1002280:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
 1002284:	f141 0100 	adc.w	r1, r1, #0
}
 1002288:	4770      	bx	lr
 100228a:	bf00      	nop
 100228c:	200003c8 	.word	0x200003c8
 1002290:	41016000 	.word	0x41016000
 1002294:	20000110 	.word	0x20000110

01002298 <compare_set>:
{
 1002298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100229c:	b085      	sub	sp, #20
 100229e:	4616      	mov	r6, r2
 10022a0:	4698      	mov	r8, r3
 10022a2:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
 10022a4:	f7ff ff50 	bl	1002148 <compare_int_lock>
 10022a8:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
 10022aa:	f7ff ffd3 	bl	1002254 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
 10022ae:	42b0      	cmp	r0, r6
 10022b0:	eb71 0308 	sbcs.w	r3, r1, r8
 10022b4:	d276      	bcs.n	10023a4 <compare_set+0x10c>
		if (target_time - curr_time > COUNTER_SPAN) {
 10022b6:	4b43      	ldr	r3, [pc, #268]	; (10023c4 <compare_set+0x12c>)
 10022b8:	1a30      	subs	r0, r6, r0
 10022ba:	eb68 0101 	sbc.w	r1, r8, r1
 10022be:	4298      	cmp	r0, r3
 10022c0:	f171 0300 	sbcs.w	r3, r1, #0
 10022c4:	d27b      	bcs.n	10023be <compare_set+0x126>
		if (target_time != cc_data[chan].target_time) {
 10022c6:	4b40      	ldr	r3, [pc, #256]	; (10023c8 <compare_set+0x130>)
 10022c8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 10022cc:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 10022d0:	45d8      	cmp	r8, fp
 10022d2:	bf08      	it	eq
 10022d4:	4556      	cmpeq	r6, sl
 10022d6:	d050      	beq.n	100237a <compare_set+0xe2>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 10022d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
 10022dc:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
 10022e0:	4614      	mov	r4, r2
 10022e2:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
 10022e6:	f105 0750 	add.w	r7, r5, #80	; 0x50
 10022ea:	f109 4982 	add.w	r9, r9, #1090519040	; 0x41000000
 10022ee:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 10022f0:	40ab      	lsls	r3, r5
 10022f2:	f509 39b0 	add.w	r9, r9, #90112	; 0x16000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 10022f6:	b2bf      	uxth	r7, r7
 10022f8:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
 10022fc:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
 10022fe:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
 1002302:	4b32      	ldr	r3, [pc, #200]	; (10023cc <compare_set+0x134>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1002304:	f507 37b0 	add.w	r7, r7, #90112	; 0x16000
     return p_reg->COUNTER;
 1002308:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
 100230c:	1a40      	subs	r0, r0, r1
 100230e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
 1002312:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
 1002316:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
 1002318:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
 100231c:	d107      	bne.n	100232e <compare_set+0x96>
 100231e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
 1002322:	2013      	movs	r0, #19
 1002324:	f002 fd59 	bl	1004dda <z_impl_k_busy_wait>
 1002328:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 100232c:	4b27      	ldr	r3, [pc, #156]	; (10023cc <compare_set+0x134>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
 100232e:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
 1002332:	eba4 000c 	sub.w	r0, r4, ip
 1002336:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
 100233a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 100233e:	bf88      	it	hi
 1002340:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1002342:	2000      	movs	r0, #0
 1002344:	6038      	str	r0, [r7, #0]
 1002346:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
 1002348:	9801      	ldr	r0, [sp, #4]
 100234a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
 100234e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
 1002352:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
 1002356:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
 100235a:	4281      	cmp	r1, r0
 100235c:	d006      	beq.n	100236c <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
 100235e:	1a20      	subs	r0, r4, r0
 1002360:	3802      	subs	r0, #2
 1002362:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
 1002366:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 100236a:	d819      	bhi.n	10023a0 <compare_set+0x108>
	return (a - b) & COUNTER_MAX;
 100236c:	1aa4      	subs	r4, r4, r2
 100236e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
 1002372:	eb14 0a06 	adds.w	sl, r4, r6
 1002376:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
 100237a:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
 100237c:	4912      	ldr	r1, [pc, #72]	; (10023c8 <compare_set+0x130>)
	cc_data[chan].callback = handler;
 100237e:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
 1002380:	012b      	lsls	r3, r5, #4
 1002382:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
 1002386:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
 1002388:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
 100238c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 100238e:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
 1002390:	4628      	mov	r0, r5
 1002392:	9900      	ldr	r1, [sp, #0]
 1002394:	f7ff ff36 	bl	1002204 <compare_int_unlock>
}
 1002398:	4620      	mov	r0, r4
 100239a:	b005      	add	sp, #20
 100239c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10023a0:	4620      	mov	r0, r4
 10023a2:	e7b1      	b.n	1002308 <compare_set+0x70>
		atomic_or(&force_isr_mask, BIT(chan));
 10023a4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 10023a6:	4a0a      	ldr	r2, [pc, #40]	; (10023d0 <compare_set+0x138>)
 10023a8:	40ab      	lsls	r3, r5
 10023aa:	e8d2 1fef 	ldaex	r1, [r2]
 10023ae:	4319      	orrs	r1, r3
 10023b0:	e8c2 1fe0 	stlex	r0, r1, [r2]
 10023b4:	2800      	cmp	r0, #0
 10023b6:	d1f8      	bne.n	10023aa <compare_set+0x112>
 10023b8:	46b2      	mov	sl, r6
 10023ba:	46c3      	mov	fp, r8
 10023bc:	e7dd      	b.n	100237a <compare_set+0xe2>
			return -EINVAL;
 10023be:	f06f 0415 	mvn.w	r4, #21
 10023c2:	e7e5      	b.n	1002390 <compare_set+0xf8>
 10023c4:	01000001 	.word	0x01000001
 10023c8:	20000118 	.word	0x20000118
 10023cc:	41016000 	.word	0x41016000
 10023d0:	200003c0 	.word	0x200003c0

010023d4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
 10023d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
 10023d6:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
 10023d8:	f04f 30ff 	mov.w	r0, #4294967295
 10023dc:	f04f 31ff 	mov.w	r1, #4294967295
 10023e0:	4d16      	ldr	r5, [pc, #88]	; (100243c <sys_clock_driver_init+0x68>)
 10023e2:	4b17      	ldr	r3, [pc, #92]	; (1002440 <sys_clock_driver_init+0x6c>)
 10023e4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
 10023e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
 10023ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 10023f0:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 10023f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 10023f6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
 10023fa:	4b12      	ldr	r3, [pc, #72]	; (1002444 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
 10023fc:	2101      	movs	r1, #1
 10023fe:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
 1002402:	2016      	movs	r0, #22
 1002404:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 1002408:	4622      	mov	r2, r4
 100240a:	f7fe fd03 	bl	1000e14 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
 100240e:	2016      	movs	r0, #22
 1002410:	f7fe fce2 	bl	1000dd8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
 1002414:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
 1002416:	4a0c      	ldr	r2, [pc, #48]	; (1002448 <sys_clock_driver_init+0x74>)
 1002418:	60ab      	str	r3, [r5, #8]
 100241a:	602b      	str	r3, [r5, #0]
 100241c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
 100241e:	4b0b      	ldr	r3, [pc, #44]	; (100244c <sys_clock_driver_init+0x78>)
 1002420:	4a0b      	ldr	r2, [pc, #44]	; (1002450 <sys_clock_driver_init+0x7c>)
 1002422:	9300      	str	r3, [sp, #0]
 1002424:	4620      	mov	r0, r4
 1002426:	2300      	movs	r3, #0
 1002428:	9401      	str	r4, [sp, #4]
 100242a:	f7ff ff35 	bl	1002298 <compare_set>

	z_nrf_clock_control_lf_on(mode);
 100242e:	4630      	mov	r0, r6
 1002430:	f7ff f9d6 	bl	10017e0 <z_nrf_clock_control_lf_on>

	return 0;
}
 1002434:	4620      	mov	r0, r4
 1002436:	b002      	add	sp, #8
 1002438:	bd70      	pop	{r4, r5, r6, pc}
 100243a:	bf00      	nop
 100243c:	41016000 	.word	0x41016000
 1002440:	20000118 	.word	0x20000118
 1002444:	e000e100 	.word	0xe000e100
 1002448:	200003c4 	.word	0x200003c4
 100244c:	0100218d 	.word	0x0100218d
 1002450:	007fffff 	.word	0x007fffff

01002454 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
 1002454:	4b35      	ldr	r3, [pc, #212]	; (100252c <rtc_nrf_isr+0xd8>)
{
 1002456:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 100245a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
 100245e:	0791      	lsls	r1, r2, #30
 1002460:	d50b      	bpl.n	100247a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1002462:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 1002466:	b142      	cbz	r2, 100247a <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1002468:	2200      	movs	r2, #0
 100246a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
 100246e:	4a30      	ldr	r2, [pc, #192]	; (1002530 <rtc_nrf_isr+0xdc>)
 1002470:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 1002474:	6813      	ldr	r3, [r2, #0]
 1002476:	3301      	adds	r3, #1
 1002478:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
 100247a:	f04f 0320 	mov.w	r3, #32
 100247e:	f3ef 8111 	mrs	r1, BASEPRI
 1002482:	f383 8812 	msr	BASEPRI_MAX, r3
 1002486:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
 100248a:	4b28      	ldr	r3, [pc, #160]	; (100252c <rtc_nrf_isr+0xd8>)
 100248c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
 1002490:	03d2      	lsls	r2, r2, #15
 1002492:	d50e      	bpl.n	10024b2 <rtc_nrf_isr+0x5e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 1002494:	4a27      	ldr	r2, [pc, #156]	; (1002534 <rtc_nrf_isr+0xe0>)
 1002496:	e8d2 0fef 	ldaex	r0, [r2]
 100249a:	f020 0401 	bic.w	r4, r0, #1
 100249e:	e8c2 4fe5 	stlex	r5, r4, [r2]
 10024a2:	2d00      	cmp	r5, #0
 10024a4:	d1f7      	bne.n	1002496 <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
 10024a6:	2800      	cmp	r0, #0
 10024a8:	d137      	bne.n	100251a <rtc_nrf_isr+0xc6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 10024aa:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
 10024ae:	2a00      	cmp	r2, #0
 10024b0:	d133      	bne.n	100251a <rtc_nrf_isr+0xc6>
{
 10024b2:	2300      	movs	r3, #0
	__asm__ volatile(
 10024b4:	f381 8811 	msr	BASEPRI, r1
 10024b8:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
 10024bc:	b353      	cbz	r3, 1002514 <rtc_nrf_isr+0xc0>
		curr_time = z_nrf_rtc_timer_read();
 10024be:	f7ff fec9 	bl	1002254 <z_nrf_rtc_timer_read>
	__asm__ volatile(
 10024c2:	f04f 0320 	mov.w	r3, #32
 10024c6:	f3ef 8711 	mrs	r7, BASEPRI
 10024ca:	f383 8812 	msr	BASEPRI_MAX, r3
 10024ce:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
 10024d2:	4b19      	ldr	r3, [pc, #100]	; (1002538 <rtc_nrf_isr+0xe4>)
 10024d4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
 10024d8:	42a0      	cmp	r0, r4
 10024da:	eb71 0205 	sbcs.w	r2, r1, r5
 10024de:	f04f 0200 	mov.w	r2, #0
 10024e2:	d321      	bcc.n	1002528 <rtc_nrf_isr+0xd4>
			user_context = cc_data[chan].user_context;
 10024e4:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
 10024e8:	f04f 38ff 	mov.w	r8, #4294967295
 10024ec:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
 10024f0:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
 10024f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
 10024f6:	e9c3 8902 	strd	r8, r9, [r3, #8]
 10024fa:	4b0c      	ldr	r3, [pc, #48]	; (100252c <rtc_nrf_isr+0xd8>)
 10024fc:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
 1002500:	f387 8811 	msr	BASEPRI, r7
 1002504:	f3bf 8f6f 	isb	sy
		if (handler) {
 1002508:	b121      	cbz	r1, 1002514 <rtc_nrf_isr+0xc0>
			handler(chan, expire_time, user_context);
 100250a:	4622      	mov	r2, r4
 100250c:	462b      	mov	r3, r5
 100250e:	2000      	movs	r0, #0
 1002510:	9600      	str	r6, [sp, #0]
 1002512:	4788      	blx	r1
}
 1002514:	b003      	add	sp, #12
 1002516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 100251a:	2200      	movs	r2, #0
 100251c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 1002520:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
 1002524:	2301      	movs	r3, #1
}
 1002526:	e7c5      	b.n	10024b4 <rtc_nrf_isr+0x60>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
 1002528:	4611      	mov	r1, r2
 100252a:	e7e9      	b.n	1002500 <rtc_nrf_isr+0xac>
 100252c:	41016000 	.word	0x41016000
 1002530:	200003c8 	.word	0x200003c8
 1002534:	200003c0 	.word	0x200003c0
 1002538:	20000118 	.word	0x20000118

0100253c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 100253c:	1c43      	adds	r3, r0, #1
{
 100253e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 1002540:	d020      	beq.n	1002584 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 1002542:	2801      	cmp	r0, #1
 1002544:	dd20      	ble.n	1002588 <sys_clock_set_timeout+0x4c>
 1002546:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 100254a:	da1f      	bge.n	100258c <sys_clock_set_timeout+0x50>
 100254c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
 100254e:	f7ff fe81 	bl	1002254 <z_nrf_rtc_timer_read>
 1002552:	4b0f      	ldr	r3, [pc, #60]	; (1002590 <sys_clock_set_timeout+0x54>)
 1002554:	e9d3 1300 	ldrd	r1, r3, [r3]
 1002558:	1a40      	subs	r0, r0, r1
		ticks = 0;
 100255a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 100255e:	bf28      	it	cs
 1002560:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
 1002562:	3001      	adds	r0, #1
 1002564:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
 1002566:	480b      	ldr	r0, [pc, #44]	; (1002594 <sys_clock_set_timeout+0x58>)
 1002568:	4282      	cmp	r2, r0
 100256a:	bf28      	it	cs
 100256c:	4602      	movcs	r2, r0
 100256e:	2000      	movs	r0, #0
 1002570:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
 1002572:	4909      	ldr	r1, [pc, #36]	; (1002598 <sys_clock_set_timeout+0x5c>)
 1002574:	9001      	str	r0, [sp, #4]
 1002576:	9100      	str	r1, [sp, #0]
 1002578:	f143 0300 	adc.w	r3, r3, #0
 100257c:	f7ff fe8c 	bl	1002298 <compare_set>
}
 1002580:	b002      	add	sp, #8
 1002582:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 1002584:	4803      	ldr	r0, [pc, #12]	; (1002594 <sys_clock_set_timeout+0x58>)
 1002586:	e7e1      	b.n	100254c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 1002588:	2400      	movs	r4, #0
 100258a:	e7e0      	b.n	100254e <sys_clock_set_timeout+0x12>
 100258c:	4c01      	ldr	r4, [pc, #4]	; (1002594 <sys_clock_set_timeout+0x58>)
 100258e:	e7de      	b.n	100254e <sys_clock_set_timeout+0x12>
 1002590:	20000128 	.word	0x20000128
 1002594:	007fffff 	.word	0x007fffff
 1002598:	0100218d 	.word	0x0100218d

0100259c <sys_clock_elapsed>:
{
 100259c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
 100259e:	f7ff fe59 	bl	1002254 <z_nrf_rtc_timer_read>
 10025a2:	4b02      	ldr	r3, [pc, #8]	; (10025ac <sys_clock_elapsed+0x10>)
 10025a4:	681b      	ldr	r3, [r3, #0]
}
 10025a6:	1ac0      	subs	r0, r0, r3
 10025a8:	bd08      	pop	{r3, pc}
 10025aa:	bf00      	nop
 10025ac:	20000128 	.word	0x20000128

010025b0 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
 10025b0:	b570      	push	{r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
 10025b2:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
 10025b6:	2c00      	cmp	r4, #0
        case 1: return NRF_P1;
 10025b8:	4e0e      	ldr	r6, [pc, #56]	; (10025f4 <nrf_pin_configure+0x44>)
 10025ba:	bf0e      	itee	eq
 10025bc:	4615      	moveq	r5, r2
 10025be:	2501      	movne	r5, #1
 10025c0:	2100      	movne	r1, #0
 10025c2:	f010 0f20 	tst.w	r0, #32
    *p_pin = pin_number & 0x1F;
 10025c6:	f000 041f 	and.w	r4, r0, #31
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
 10025ca:	f3c0 1281 	ubfx	r2, r0, #6, #2
        case 1: return NRF_P1;
 10025ce:	480a      	ldr	r0, [pc, #40]	; (10025f8 <nrf_pin_configure+0x48>)
 10025d0:	bf18      	it	ne
 10025d2:	4630      	movne	r0, r6
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
 10025d4:	021b      	lsls	r3, r3, #8
 10025d6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
 10025da:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
 10025de:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
 10025e2:	430a      	orrs	r2, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
 10025e4:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
 10025e8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
 10025ec:	4322      	orrs	r2, r4
    reg->PIN_CNF[pin_number] = cnf;
 10025ee:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
		     NRF_GPIO_PIN_NOSENSE);
}
 10025f2:	bd70      	pop	{r4, r5, r6, pc}
 10025f4:	418c0800 	.word	0x418c0800
 10025f8:	418c0500 	.word	0x418c0500

010025fc <nrf_gpio_pin_set>:
        case 1: return NRF_P1;
 10025fc:	4a05      	ldr	r2, [pc, #20]	; (1002614 <nrf_gpio_pin_set+0x18>)
 10025fe:	4b06      	ldr	r3, [pc, #24]	; (1002618 <nrf_gpio_pin_set+0x1c>)
    *p_pin = pin_number & 0x1F;
 1002600:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
 1002604:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
 1002606:	2801      	cmp	r0, #1
 1002608:	bf08      	it	eq
 100260a:	4613      	moveq	r3, r2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
 100260c:	2201      	movs	r2, #1
 100260e:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
 1002610:	609a      	str	r2, [r3, #8]
}
 1002612:	4770      	bx	lr
 1002614:	418c0800 	.word	0x418c0800
 1002618:	418c0500 	.word	0x418c0500

0100261c <SystemInit>:
void SystemInit(void)
{
    /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
     until one ADDR is not initialized. */
    uint32_t index = 0;
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 100261c:	2200      	movs	r2, #0
 100261e:	00d3      	lsls	r3, r2, #3
 1002620:	f103 73ff 	add.w	r3, r3, #33423360	; 0x1fe0000
 1002624:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 1002628:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
 100262c:	3101      	adds	r1, #1
 100262e:	d007      	beq.n	1002640 <SystemInit+0x24>
        #if defined ( __ICCARM__ )
            /* IAR will complain about the order of volatile pointer accesses. */
            #pragma diag_suppress=Pa082
        #endif
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 1002630:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 1002634:	3201      	adds	r2, #1
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 1002636:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 100263a:	2a20      	cmp	r2, #32
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 100263c:	600b      	str	r3, [r1, #0]
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 100263e:	d1ee      	bne.n	100261e <SystemInit+0x2>
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
                #endif
            #elif defined(NRF_NETWORK)
                uint32_t var1 = *(uint32_t *)0x01FF0130ul;
 1002640:	4b14      	ldr	r3, [pc, #80]	; (1002694 <SystemInit+0x78>)
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
 1002642:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 1002646:	2a07      	cmp	r2, #7
 1002648:	d11a      	bne.n	1002680 <SystemInit+0x64>
                {
                    switch(var2)
 100264a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 100264e:	3b02      	subs	r3, #2
 1002650:	2b03      	cmp	r3, #3
 1002652:	d80c      	bhi.n	100266e <SystemInit+0x52>
        #endif
    }

    /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf53_errata_49())
 1002654:	4a10      	ldr	r2, [pc, #64]	; (1002698 <SystemInit+0x7c>)
 1002656:	5cd3      	ldrb	r3, [r2, r3]
 1002658:	b14b      	cbz	r3, 100266e <SystemInit+0x52>
    {
        if (NRF_RESET_NS->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
 100265a:	4b10      	ldr	r3, [pc, #64]	; (100269c <SystemInit+0x80>)
 100265c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 1002660:	07d1      	lsls	r1, r2, #31
        {
            NRF_POWER_NS->EVENTS_SLEEPENTER = 0;
 1002662:	bf42      	ittt	mi
 1002664:	2200      	movmi	r2, #0
 1002666:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
            NRF_POWER_NS->EVENTS_SLEEPEXIT = 0;
 100266a:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118

    /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf53_errata_55())
    {
        if (NRF_RESET_NS->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
 100266e:	4b0b      	ldr	r3, [pc, #44]	; (100269c <SystemInit+0x80>)
 1002670:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 1002674:	07d2      	lsls	r2, r2, #31
            NRF_RESET_NS->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
 1002676:	bf44      	itt	mi
 1002678:	f06f 0201 	mvnmi.w	r2, #1
 100267c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_NS->APPROTECT.DISABLE = NRF_UICR_NS->APPROTECT;
 1002680:	4b07      	ldr	r3, [pc, #28]	; (10026a0 <SystemInit+0x84>)
 1002682:	681a      	ldr	r2, [r3, #0]
 1002684:	4b07      	ldr	r3, [pc, #28]	; (10026a4 <SystemInit+0x88>)
 1002686:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    SystemCoreClock = __SYSTEM_CLOCK;
 100268a:	4b07      	ldr	r3, [pc, #28]	; (10026a8 <SystemInit+0x8c>)
 100268c:	4a07      	ldr	r2, [pc, #28]	; (10026ac <SystemInit+0x90>)
 100268e:	601a      	str	r2, [r3, #0]

    /* Handle fw-branch APPROTECT setup. */
    nrf53_handle_approtect();

    SystemCoreClockUpdate();
}
 1002690:	4770      	bx	lr
 1002692:	bf00      	nop
 1002694:	01ff0000 	.word	0x01ff0000
 1002698:	010051b3 	.word	0x010051b3
 100269c:	41005000 	.word	0x41005000
 10026a0:	01ff8000 	.word	0x01ff8000
 10026a4:	41006000 	.word	0x41006000
 10026a8:	20000034 	.word	0x20000034
 10026ac:	03d09000 	.word	0x03d09000

010026b0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
 10026b0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
 10026b2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
 10026b4:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
 10026b6:	fab2 f382 	clz	r3, r2
 10026ba:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
 10026be:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
 10026c0:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
 10026c2:	d010      	beq.n	10026e6 <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
 10026c4:	fa05 f303 	lsl.w	r3, r5, r3
 10026c8:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 10026cc:	e8d0 6fef 	ldaex	r6, [r0]
 10026d0:	4296      	cmp	r6, r2
 10026d2:	d104      	bne.n	10026de <nrfx_flag32_alloc+0x2e>
 10026d4:	e8c0 3fec 	stlex	ip, r3, [r0]
 10026d8:	f1bc 0f00 	cmp.w	ip, #0
 10026dc:	d1f6      	bne.n	10026cc <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
 10026de:	d1e9      	bne.n	10026b4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
 10026e0:	4802      	ldr	r0, [pc, #8]	; (10026ec <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
 10026e2:	700c      	strb	r4, [r1, #0]
}
 10026e4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
 10026e6:	4802      	ldr	r0, [pc, #8]	; (10026f0 <nrfx_flag32_alloc+0x40>)
 10026e8:	e7fc      	b.n	10026e4 <nrfx_flag32_alloc+0x34>
 10026ea:	bf00      	nop
 10026ec:	0bad0000 	.word	0x0bad0000
 10026f0:	0bad0002 	.word	0x0bad0002

010026f4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
 10026f4:	6803      	ldr	r3, [r0, #0]
{
 10026f6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
 10026f8:	40cb      	lsrs	r3, r1
 10026fa:	07db      	lsls	r3, r3, #31
 10026fc:	d411      	bmi.n	1002722 <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
 10026fe:	2301      	movs	r3, #1
 1002700:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
 1002704:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
 1002706:	ea41 0203 	orr.w	r2, r1, r3
 100270a:	e8d0 4fef 	ldaex	r4, [r0]
 100270e:	429c      	cmp	r4, r3
 1002710:	d104      	bne.n	100271c <nrfx_flag32_free+0x28>
 1002712:	e8c0 2fec 	stlex	ip, r2, [r0]
 1002716:	f1bc 0f00 	cmp.w	ip, #0
 100271a:	d1f6      	bne.n	100270a <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
 100271c:	d1f2      	bne.n	1002704 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
 100271e:	4802      	ldr	r0, [pc, #8]	; (1002728 <nrfx_flag32_free+0x34>)
}
 1002720:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
 1002722:	4802      	ldr	r0, [pc, #8]	; (100272c <nrfx_flag32_free+0x38>)
 1002724:	e7fc      	b.n	1002720 <nrfx_flag32_free+0x2c>
 1002726:	bf00      	nop
 1002728:	0bad0000 	.word	0x0bad0000
 100272c:	0bad0004 	.word	0x0bad0004

01002730 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
 1002730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
 1002732:	4604      	mov	r4, r0
 1002734:	b118      	cbz	r0, 100273e <clock_stop+0xe>
 1002736:	2801      	cmp	r0, #1
 1002738:	d023      	beq.n	1002782 <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
 100273a:	b003      	add	sp, #12
 100273c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
 100273e:	2202      	movs	r2, #2
 1002740:	4b20      	ldr	r3, [pc, #128]	; (10027c4 <clock_stop+0x94>)
 1002742:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1002746:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
 100274a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100274e:	2201      	movs	r2, #1
 1002750:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
 1002752:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
 1002754:	429c      	cmp	r4, r3
 1002756:	bf18      	it	ne
 1002758:	2500      	movne	r5, #0
 100275a:	f242 7710 	movw	r7, #10000	; 0x2710
 100275e:	4e19      	ldr	r6, [pc, #100]	; (10027c4 <clock_stop+0x94>)
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
 1002760:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
 1002764:	bf08      	it	eq
 1002766:	f10d 0507 	addeq.w	r5, sp, #7
    switch (domain)
 100276a:	b1a4      	cbz	r4, 1002796 <clock_stop+0x66>
 100276c:	2c01      	cmp	r4, #1
 100276e:	d1e4      	bne.n	100273a <clock_stop+0xa>
            if (p_clk_src != NULL)
 1002770:	b125      	cbz	r5, 100277c <clock_stop+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
 1002772:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
 1002776:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
 100277a:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 100277c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
 1002780:	e011      	b.n	10027a6 <clock_stop+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1002782:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
 1002784:	4b0f      	ldr	r3, [pc, #60]	; (10027c4 <clock_stop+0x94>)
 1002786:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100278a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 100278e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1002792:	6058      	str	r0, [r3, #4]
}
 1002794:	e7dd      	b.n	1002752 <clock_stop+0x22>
            if (p_clk_src != NULL)
 1002796:	b125      	cbz	r5, 10027a2 <clock_stop+0x72>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 1002798:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
 100279c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
 10027a0:	702b      	strb	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 10027a2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
 10027a6:	03db      	lsls	r3, r3, #15
 10027a8:	d5c7      	bpl.n	100273a <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
 10027aa:	b92d      	cbnz	r5, 10027b8 <clock_stop+0x88>
 10027ac:	2001      	movs	r0, #1
 10027ae:	f002 f90d 	bl	10049cc <nrfx_busy_wait>
 10027b2:	3f01      	subs	r7, #1
 10027b4:	d1d9      	bne.n	100276a <clock_stop+0x3a>
 10027b6:	e7c0      	b.n	100273a <clock_stop+0xa>
 10027b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 10027bc:	2b01      	cmp	r3, #1
 10027be:	d0f5      	beq.n	10027ac <clock_stop+0x7c>
 10027c0:	e7bb      	b.n	100273a <clock_stop+0xa>
 10027c2:	bf00      	nop
 10027c4:	41005000 	.word	0x41005000

010027c8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
 10027c8:	4b05      	ldr	r3, [pc, #20]	; (10027e0 <nrfx_clock_init+0x18>)
 10027ca:	791a      	ldrb	r2, [r3, #4]
 10027cc:	b92a      	cbnz	r2, 10027da <nrfx_clock_init+0x12>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
 10027ce:	715a      	strb	r2, [r3, #5]
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
 10027d0:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
 10027d2:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
 10027d4:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
 10027d6:	4803      	ldr	r0, [pc, #12]	; (10027e4 <nrfx_clock_init+0x1c>)
 10027d8:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
 10027da:	4803      	ldr	r0, [pc, #12]	; (10027e8 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
 10027dc:	4770      	bx	lr
 10027de:	bf00      	nop
 10027e0:	200003cc 	.word	0x200003cc
 10027e4:	0bad0000 	.word	0x0bad0000
 10027e8:	0bad000c 	.word	0x0bad000c

010027ec <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
 10027ec:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
 10027ee:	2005      	movs	r0, #5
 10027f0:	f7fe fb02 	bl	1000df8 <arch_irq_is_enabled>
 10027f4:	b910      	cbnz	r0, 10027fc <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
 10027f6:	2005      	movs	r0, #5
 10027f8:	f7fe faee 	bl	1000dd8 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
 10027fc:	2201      	movs	r2, #1
 10027fe:	4b03      	ldr	r3, [pc, #12]	; (100280c <nrfx_clock_enable+0x20>)
 1002800:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
 1002804:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
 1002808:	bd08      	pop	{r3, pc}
 100280a:	bf00      	nop
 100280c:	41005000 	.word	0x41005000

01002810 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
 1002810:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
 1002812:	b110      	cbz	r0, 100281a <nrfx_clock_start+0xa>
 1002814:	2801      	cmp	r0, #1
 1002816:	d02a      	beq.n	100286e <nrfx_clock_start+0x5e>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
 1002818:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 100281a:	4b1a      	ldr	r3, [pc, #104]	; (1002884 <nrfx_clock_start+0x74>)
 100281c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 1002820:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 1002824:	03c9      	lsls	r1, r1, #15
 1002826:	d40d      	bmi.n	1002844 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
 1002828:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
 100282c:	07d2      	lsls	r2, r2, #31
 100282e:	d510      	bpl.n	1002852 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
 1002830:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    if (!is_correct_clk)
 1002834:	f002 0203 	and.w	r2, r2, #3
 1002838:	2a01      	cmp	r2, #1
 100283a:	d107      	bne.n	100284c <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
 100283c:	2202      	movs	r2, #2
 100283e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
 1002842:	e7e9      	b.n	1002818 <nrfx_clock_start+0x8>
    if (!is_correct_clk)
 1002844:	f002 0303 	and.w	r3, r2, #3
 1002848:	2b01      	cmp	r3, #1
 100284a:	d002      	beq.n	1002852 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
 100284c:	2000      	movs	r0, #0
 100284e:	f7ff ff6f 	bl	1002730 <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
 1002852:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1002854:	2100      	movs	r1, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
 1002856:	4b0b      	ldr	r3, [pc, #44]	; (1002884 <nrfx_clock_start+0x74>)
 1002858:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100285c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 1002860:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
 1002864:	2102      	movs	r1, #2
 1002866:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100286a:	609a      	str	r2, [r3, #8]
}
 100286c:	e7d4      	b.n	1002818 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100286e:	2200      	movs	r2, #0
 1002870:	4b04      	ldr	r3, [pc, #16]	; (1002884 <nrfx_clock_start+0x74>)
 1002872:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 1002876:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
 100287a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100287e:	6018      	str	r0, [r3, #0]
}
 1002880:	e7ca      	b.n	1002818 <nrfx_clock_start+0x8>
 1002882:	bf00      	nop
 1002884:	41005000 	.word	0x41005000

01002888 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
 1002888:	4b10      	ldr	r3, [pc, #64]	; (10028cc <nrfx_clock_calibration_start+0x44>)
 100288a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 100288e:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 1002892:	03c8      	lsls	r0, r1, #15
 1002894:	d516      	bpl.n	10028c4 <nrfx_clock_calibration_start+0x3c>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
 1002896:	07d1      	lsls	r1, r2, #31
 1002898:	d514      	bpl.n	10028c4 <nrfx_clock_calibration_start+0x3c>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 100289a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 100289e:	03d2      	lsls	r2, r2, #15
 10028a0:	d510      	bpl.n	10028c4 <nrfx_clock_calibration_start+0x3c>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
 10028a2:	490b      	ldr	r1, [pc, #44]	; (10028d0 <nrfx_clock_calibration_start+0x48>)
 10028a4:	794a      	ldrb	r2, [r1, #5]
 10028a6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 10028aa:	b96a      	cbnz	r2, 10028c8 <nrfx_clock_calibration_start+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10028ac:	f8c3 011c 	str.w	r0, [r3, #284]	; 0x11c
 10028b0:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    p_reg->INTENSET = mask;
 10028b4:	2280      	movs	r2, #128	; 0x80
 10028b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
 10028ba:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
 10028bc:	4805      	ldr	r0, [pc, #20]	; (10028d4 <nrfx_clock_calibration_start+0x4c>)
        m_clock_cb.cal_state = CAL_STATE_CAL;
 10028be:	714a      	strb	r2, [r1, #5]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10028c0:	611a      	str	r2, [r3, #16]
}
 10028c2:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
 10028c4:	4804      	ldr	r0, [pc, #16]	; (10028d8 <nrfx_clock_calibration_start+0x50>)
 10028c6:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
 10028c8:	4804      	ldr	r0, [pc, #16]	; (10028dc <nrfx_clock_calibration_start+0x54>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
 10028ca:	4770      	bx	lr
 10028cc:	41005000 	.word	0x41005000
 10028d0:	200003cc 	.word	0x200003cc
 10028d4:	0bad0000 	.word	0x0bad0000
 10028d8:	0bad0005 	.word	0x0bad0005
 10028dc:	0bad000b 	.word	0x0bad000b

010028e0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
 10028e0:	4b1b      	ldr	r3, [pc, #108]	; (1002950 <nrfx_power_clock_irq_handler+0x70>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
 10028e2:	b510      	push	{r4, lr}
 10028e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
 10028e8:	b152      	cbz	r2, 1002900 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10028ea:	2000      	movs	r0, #0
 10028ec:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
 10028f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
 10028f4:	2201      	movs	r2, #1
 10028f6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
 10028fa:	4b16      	ldr	r3, [pc, #88]	; (1002954 <nrfx_power_clock_irq_handler+0x74>)
 10028fc:	681b      	ldr	r3, [r3, #0]
 10028fe:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
 1002900:	4b13      	ldr	r3, [pc, #76]	; (1002950 <nrfx_power_clock_irq_handler+0x70>)
 1002902:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
 1002906:	b15a      	cbz	r2, 1002920 <nrfx_power_clock_irq_handler+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1002908:	2200      	movs	r2, #0
 100290a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 100290e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
 1002912:	2202      	movs	r2, #2
 1002914:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
 1002918:	4b0e      	ldr	r3, [pc, #56]	; (1002954 <nrfx_power_clock_irq_handler+0x74>)
 100291a:	2001      	movs	r0, #1
 100291c:	681b      	ldr	r3, [r3, #0]
 100291e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
 1002920:	4b0b      	ldr	r3, [pc, #44]	; (1002950 <nrfx_power_clock_irq_handler+0x70>)
 1002922:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
 1002926:	b192      	cbz	r2, 100294e <nrfx_power_clock_irq_handler+0x6e>
    return p_reg->INTENSET & mask;
 1002928:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 100292c:	0612      	lsls	r2, r2, #24
 100292e:	d50e      	bpl.n	100294e <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1002930:	2200      	movs	r2, #0
 1002932:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 1002936:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
    p_reg->INTENCLR = mask;
 100293a:	2180      	movs	r1, #128	; 0x80
 100293c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
 1002940:	4b04      	ldr	r3, [pc, #16]	; (1002954 <nrfx_power_clock_irq_handler+0x74>)
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
 1002942:	2003      	movs	r0, #3
        m_clock_cb.cal_state = CAL_STATE_IDLE;
 1002944:	715a      	strb	r2, [r3, #5]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
 1002946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
 100294a:	681b      	ldr	r3, [r3, #0]
 100294c:	4718      	bx	r3
}
 100294e:	bd10      	pop	{r4, pc}
 1002950:	41005000 	.word	0x41005000
 1002954:	200003cc 	.word	0x200003cc

01002958 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
 1002958:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
 100295a:	4801      	ldr	r0, [pc, #4]	; (1002960 <nrfx_dppi_channel_alloc+0x8>)
 100295c:	f7ff bea8 	b.w	10026b0 <nrfx_flag32_alloc>
 1002960:	20000038 	.word	0x20000038

01002964 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
 1002964:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
 1002966:	f003 021f 	and.w	r2, r3, #31
 100296a:	6002      	str	r2, [r0, #0]
}
 100296c:	4a03      	ldr	r2, [pc, #12]	; (100297c <nrf_gpio_pin_port_decode+0x18>)
 100296e:	4804      	ldr	r0, [pc, #16]	; (1002980 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
 1002970:	095b      	lsrs	r3, r3, #5
}
 1002972:	2b01      	cmp	r3, #1
 1002974:	bf08      	it	eq
 1002976:	4610      	moveq	r0, r2
 1002978:	4770      	bx	lr
 100297a:	bf00      	nop
 100297c:	418c0800 	.word	0x418c0800
 1002980:	418c0500 	.word	0x418c0500

01002984 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
 1002984:	4b03      	ldr	r3, [pc, #12]	; (1002994 <pin_in_use_by_te+0x10>)
 1002986:	3008      	adds	r0, #8
 1002988:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 100298c:	f3c0 1040 	ubfx	r0, r0, #5, #1
 1002990:	4770      	bx	lr
 1002992:	bf00      	nop
 1002994:	2000003c 	.word	0x2000003c

01002998 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
 1002998:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 100299a:	4c0d      	ldr	r4, [pc, #52]	; (10029d0 <call_handler+0x38>)
 100299c:	f100 0308 	add.w	r3, r0, #8
 10029a0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
 10029a4:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 10029a6:	05da      	lsls	r2, r3, #23
{
 10029a8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 10029aa:	d507      	bpl.n	10029bc <call_handler+0x24>
 10029ac:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
 10029b0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 10029b4:	6852      	ldr	r2, [r2, #4]
 10029b6:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
 10029ba:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
 10029bc:	68a3      	ldr	r3, [r4, #8]
 10029be:	b12b      	cbz	r3, 10029cc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
 10029c0:	4631      	mov	r1, r6
 10029c2:	4628      	mov	r0, r5
 10029c4:	68e2      	ldr	r2, [r4, #12]
    }
}
 10029c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
 10029ca:	4718      	bx	r3
}
 10029cc:	bd70      	pop	{r4, r5, r6, pc}
 10029ce:	bf00      	nop
 10029d0:	2000003c 	.word	0x2000003c

010029d4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 10029d4:	4a12      	ldr	r2, [pc, #72]	; (1002a20 <release_handler+0x4c>)
 10029d6:	3008      	adds	r0, #8
 10029d8:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
 10029dc:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 10029de:	05d9      	lsls	r1, r3, #23
 10029e0:	d51b      	bpl.n	1002a1a <release_handler+0x46>
 10029e2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
 10029e6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 10029ea:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
 10029ee:	2000      	movs	r0, #0
 10029f0:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
 10029f4:	f834 3b02 	ldrh.w	r3, [r4], #2
 10029f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 10029fc:	d003      	beq.n	1002a06 <release_handler+0x32>
 10029fe:	f3c3 2343 	ubfx	r3, r3, #9, #4
 1002a02:	4299      	cmp	r1, r3
 1002a04:	d009      	beq.n	1002a1a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
 1002a06:	3001      	adds	r0, #1
 1002a08:	2830      	cmp	r0, #48	; 0x30
 1002a0a:	d1f3      	bne.n	10029f4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
 1002a0c:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
 1002a0e:	4805      	ldr	r0, [pc, #20]	; (1002a24 <release_handler+0x50>)
}
 1002a10:	bc10      	pop	{r4}
        m_cb.handlers[handler_id].handler = NULL;
 1002a12:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
 1002a16:	f7ff be6d 	b.w	10026f4 <nrfx_flag32_free>
}
 1002a1a:	bc10      	pop	{r4}
 1002a1c:	4770      	bx	lr
 1002a1e:	bf00      	nop
 1002a20:	2000003c 	.word	0x2000003c
 1002a24:	200000b0 	.word	0x200000b0

01002a28 <pin_handler_trigger_uninit>:
{
 1002a28:	b538      	push	{r3, r4, r5, lr}
 1002a2a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
 1002a2c:	f7ff ffaa 	bl	1002984 <pin_in_use_by_te>
 1002a30:	4c0b      	ldr	r4, [pc, #44]	; (1002a60 <pin_handler_trigger_uninit+0x38>)
 1002a32:	f102 0508 	add.w	r5, r2, #8
 1002a36:	b160      	cbz	r0, 1002a52 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
 1002a38:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 1002a3a:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
 1002a3e:	0b5b      	lsrs	r3, r3, #13
 1002a40:	009b      	lsls	r3, r3, #2
 1002a42:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1002a46:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 1002a4a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
 1002a4e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
 1002a52:	4610      	mov	r0, r2
 1002a54:	f7ff ffbe 	bl	10029d4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
 1002a58:	2300      	movs	r3, #0
 1002a5a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
 1002a5e:	bd38      	pop	{r3, r4, r5, pc}
 1002a60:	2000003c 	.word	0x2000003c

01002a64 <nrfx_gpiote_input_configure>:
{
 1002a64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1002a68:	4604      	mov	r4, r0
 1002a6a:	4616      	mov	r6, r2
 1002a6c:	461d      	mov	r5, r3
    if (p_input_config)
 1002a6e:	b321      	cbz	r1, 1002aba <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 1002a70:	4f4e      	ldr	r7, [pc, #312]	; (1002bac <nrfx_gpiote_input_configure+0x148>)
 1002a72:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
 1002a76:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
 1002a7a:	079b      	lsls	r3, r3, #30
 1002a7c:	d506      	bpl.n	1002a8c <nrfx_gpiote_input_configure+0x28>
 1002a7e:	f7ff ff81 	bl	1002984 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
 1002a82:	b118      	cbz	r0, 1002a8c <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
 1002a84:	484a      	ldr	r0, [pc, #296]	; (1002bb0 <nrfx_gpiote_input_configure+0x14c>)
}
 1002a86:	b004      	add	sp, #16
 1002a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
 1002a8c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
 1002a8e:	4620      	mov	r0, r4
 1002a90:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
 1002a94:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
 1002a98:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
 1002a9c:	f10d 020f 	add.w	r2, sp, #15
 1002aa0:	460b      	mov	r3, r1
 1002aa2:	f10d 010e 	add.w	r1, sp, #14
 1002aa6:	f001 ff95 	bl	10049d4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
 1002aaa:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
 1002aae:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
 1002ab2:	f043 0301 	orr.w	r3, r3, #1
 1002ab6:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
 1002aba:	b196      	cbz	r6, 1002ae2 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 1002abc:	483b      	ldr	r0, [pc, #236]	; (1002bac <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
 1002abe:	7833      	ldrb	r3, [r6, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
 1002ac0:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 1002ac2:	f104 0608 	add.w	r6, r4, #8
 1002ac6:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
        if (pin_is_output(pin))
 1002aca:	078f      	lsls	r7, r1, #30
 1002acc:	d50c      	bpl.n	1002ae8 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
 1002ace:	2a00      	cmp	r2, #0
 1002ad0:	d1d8      	bne.n	1002a84 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
 1002ad2:	f830 2016 	ldrh.w	r2, [r0, r6, lsl #1]
 1002ad6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
 1002ada:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 1002ade:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (p_handler_config)
 1002ae2:	bbcd      	cbnz	r5, 1002b58 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
 1002ae4:	4833      	ldr	r0, [pc, #204]	; (1002bb4 <nrfx_gpiote_input_configure+0x150>)
 1002ae6:	e7ce      	b.n	1002a86 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
 1002ae8:	f021 0120 	bic.w	r1, r1, #32
 1002aec:	04c9      	lsls	r1, r1, #19
 1002aee:	0cc9      	lsrs	r1, r1, #19
 1002af0:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
            if (use_evt)
 1002af4:	2a00      	cmp	r2, #0
 1002af6:	d0ec      	beq.n	1002ad2 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
 1002af8:	2b03      	cmp	r3, #3
 1002afa:	d8c3      	bhi.n	1002a84 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
 1002afc:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
 1002b00:	ea4f 028c 	mov.w	r2, ip, lsl #2
 1002b04:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
 1002b08:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
 1002b0c:	b923      	cbnz	r3, 1002b18 <nrfx_gpiote_input_configure+0xb4>
    p_reg->CONFIG[idx] = 0;
 1002b0e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
 1002b12:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
 1002b16:	e7dc      	b.n	1002ad2 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
 1002b18:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
 1002b1c:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
 1002b20:	f027 0703 	bic.w	r7, r7, #3
 1002b24:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
 1002b28:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
 1002b2c:	f041 0120 	orr.w	r1, r1, #32
 1002b30:	f427 374f 	bic.w	r7, r7, #211968	; 0x33c00
 1002b34:	f427 7740 	bic.w	r7, r7, #768	; 0x300
 1002b38:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 1002b3c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
 1002b40:	0227      	lsls	r7, r4, #8
 1002b42:	f407 577c 	and.w	r7, r7, #16128	; 0x3f00
 1002b46:	ea4e 4e03 	orr.w	lr, lr, r3, lsl #16
 1002b4a:	ea47 070e 	orr.w	r7, r7, lr
 1002b4e:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
 1002b52:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
 1002b56:	e7bc      	b.n	1002ad2 <nrfx_gpiote_input_configure+0x6e>
    release_handler(pin);
 1002b58:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
 1002b5a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
 1002b5e:	f7ff ff39 	bl	10029d4 <release_handler>
    if (!handler)
 1002b62:	2e00      	cmp	r6, #0
 1002b64:	d0be      	beq.n	1002ae4 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
 1002b66:	4d11      	ldr	r5, [pc, #68]	; (1002bac <nrfx_gpiote_input_configure+0x148>)
 1002b68:	682b      	ldr	r3, [r5, #0]
 1002b6a:	429e      	cmp	r6, r3
 1002b6c:	d104      	bne.n	1002b78 <nrfx_gpiote_input_configure+0x114>
 1002b6e:	686b      	ldr	r3, [r5, #4]
 1002b70:	429f      	cmp	r7, r3
 1002b72:	d101      	bne.n	1002b78 <nrfx_gpiote_input_configure+0x114>
 1002b74:	2200      	movs	r2, #0
 1002b76:	e00a      	b.n	1002b8e <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
 1002b78:	480f      	ldr	r0, [pc, #60]	; (1002bb8 <nrfx_gpiote_input_configure+0x154>)
 1002b7a:	f10d 010f 	add.w	r1, sp, #15
 1002b7e:	f7ff fd97 	bl	10026b0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
 1002b82:	4b0c      	ldr	r3, [pc, #48]	; (1002bb4 <nrfx_gpiote_input_configure+0x150>)
 1002b84:	4298      	cmp	r0, r3
 1002b86:	f47f af7e 	bne.w	1002a86 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
 1002b8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
 1002b8e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
 1002b92:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
 1002b94:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
 1002b96:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
 1002b9a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
 1002b9e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 1002ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 1002ba6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 1002baa:	e79b      	b.n	1002ae4 <nrfx_gpiote_input_configure+0x80>
 1002bac:	2000003c 	.word	0x2000003c
 1002bb0:	0bad0004 	.word	0x0bad0004
 1002bb4:	0bad0000 	.word	0x0bad0000
 1002bb8:	200000b0 	.word	0x200000b0

01002bbc <nrfx_gpiote_output_configure>:
{
 1002bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 1002bbe:	4604      	mov	r4, r0
 1002bc0:	4616      	mov	r6, r2
 1002bc2:	b085      	sub	sp, #20
    if (p_config)
 1002bc4:	b319      	cbz	r1, 1002c0e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 1002bc6:	4d34      	ldr	r5, [pc, #208]	; (1002c98 <nrfx_gpiote_output_configure+0xdc>)
 1002bc8:	f100 0708 	add.w	r7, r0, #8
 1002bcc:	f835 2017 	ldrh.w	r2, [r5, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
 1002bd0:	0793      	lsls	r3, r2, #30
 1002bd2:	d403      	bmi.n	1002bdc <nrfx_gpiote_output_configure+0x20>
 1002bd4:	f7ff fed6 	bl	1002984 <pin_in_use_by_te>
 1002bd8:	2800      	cmp	r0, #0
 1002bda:	d15a      	bne.n	1002c92 <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
 1002bdc:	f012 0f1c 	tst.w	r2, #28
 1002be0:	d002      	beq.n	1002be8 <nrfx_gpiote_output_configure+0x2c>
 1002be2:	784b      	ldrb	r3, [r1, #1]
 1002be4:	2b01      	cmp	r3, #1
 1002be6:	d054      	beq.n	1002c92 <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
 1002be8:	2301      	movs	r3, #1
 1002bea:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
 1002bee:	2300      	movs	r3, #0
 1002bf0:	1c4a      	adds	r2, r1, #1
 1002bf2:	e9cd 1300 	strd	r1, r3, [sp]
 1002bf6:	4620      	mov	r0, r4
 1002bf8:	1c8b      	adds	r3, r1, #2
 1002bfa:	f10d 010f 	add.w	r1, sp, #15
 1002bfe:	f001 fee9 	bl	10049d4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
 1002c02:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
 1002c06:	f043 0303 	orr.w	r3, r3, #3
 1002c0a:	f825 3017 	strh.w	r3, [r5, r7, lsl #1]
    if (p_task_config)
 1002c0e:	b916      	cbnz	r6, 1002c16 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
 1002c10:	4822      	ldr	r0, [pc, #136]	; (1002c9c <nrfx_gpiote_output_configure+0xe0>)
}
 1002c12:	b005      	add	sp, #20
 1002c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 1002c16:	4a20      	ldr	r2, [pc, #128]	; (1002c98 <nrfx_gpiote_output_configure+0xdc>)
 1002c18:	f104 0708 	add.w	r7, r4, #8
 1002c1c:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
        if (pin_is_input(pin))
 1002c20:	0783      	lsls	r3, r0, #30
 1002c22:	d536      	bpl.n	1002c92 <nrfx_gpiote_output_configure+0xd6>
    p_reg->CONFIG[idx] = 0;
 1002c24:	2300      	movs	r3, #0
        uint32_t ch = p_task_config->task_ch;
 1002c26:	f896 c000 	ldrb.w	ip, [r6]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
 1002c2a:	f020 0020 	bic.w	r0, r0, #32
 1002c2e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 1002c32:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
 1002c36:	04c0      	lsls	r0, r0, #19
 1002c38:	f501 4120 	add.w	r1, r1, #40960	; 0xa000
 1002c3c:	0cc0      	lsrs	r0, r0, #19
 1002c3e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
 1002c42:	f822 0017 	strh.w	r0, [r2, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
 1002c46:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
 1002c4a:	7875      	ldrb	r5, [r6, #1]
 1002c4c:	2d00      	cmp	r5, #0
 1002c4e:	d0df      	beq.n	1002c10 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
 1002c50:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
 1002c54:	78b6      	ldrb	r6, [r6, #2]
 1002c56:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
 1002c5a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 1002c5e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 1002c62:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
 1002c66:	0223      	lsls	r3, r4, #8
 1002c68:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
 1002c6c:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 1002c6e:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
 1002c72:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
 1002c76:	0534      	lsls	r4, r6, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 1002c78:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
 1002c7a:	f404 1480 	and.w	r4, r4, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
 1002c7e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 1002c82:	4323      	orrs	r3, r4
 1002c84:	f040 0020 	orr.w	r0, r0, #32
 1002c88:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
 1002c8c:	f822 0017 	strh.w	r0, [r2, r7, lsl #1]
 1002c90:	e7be      	b.n	1002c10 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
 1002c92:	4803      	ldr	r0, [pc, #12]	; (1002ca0 <nrfx_gpiote_output_configure+0xe4>)
 1002c94:	e7bd      	b.n	1002c12 <nrfx_gpiote_output_configure+0x56>
 1002c96:	bf00      	nop
 1002c98:	2000003c 	.word	0x2000003c
 1002c9c:	0bad0000 	.word	0x0bad0000
 1002ca0:	0bad0004 	.word	0x0bad0004

01002ca4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
 1002ca4:	4b01      	ldr	r3, [pc, #4]	; (1002cac <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
 1002ca6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
 1002caa:	4770      	bx	lr
 1002cac:	2000003c 	.word	0x2000003c

01002cb0 <nrfx_gpiote_channel_get>:
{
 1002cb0:	b508      	push	{r3, lr}
 1002cb2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
 1002cb4:	f7ff fe66 	bl	1002984 <pin_in_use_by_te>
 1002cb8:	b138      	cbz	r0, 1002cca <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 1002cba:	4b05      	ldr	r3, [pc, #20]	; (1002cd0 <nrfx_gpiote_channel_get+0x20>)
 1002cbc:	3208      	adds	r2, #8
 1002cbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
 1002cc2:	4804      	ldr	r0, [pc, #16]	; (1002cd4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 1002cc4:	0b5b      	lsrs	r3, r3, #13
 1002cc6:	700b      	strb	r3, [r1, #0]
}
 1002cc8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
 1002cca:	4803      	ldr	r0, [pc, #12]	; (1002cd8 <nrfx_gpiote_channel_get+0x28>)
 1002ccc:	e7fc      	b.n	1002cc8 <nrfx_gpiote_channel_get+0x18>
 1002cce:	bf00      	nop
 1002cd0:	2000003c 	.word	0x2000003c
 1002cd4:	0bad0000 	.word	0x0bad0000
 1002cd8:	0bad0004 	.word	0x0bad0004

01002cdc <nrfx_gpiote_init>:
{
 1002cdc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
 1002cde:	4c0f      	ldr	r4, [pc, #60]	; (1002d1c <nrfx_gpiote_init+0x40>)
 1002ce0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 1002ce4:	b9bd      	cbnz	r5, 1002d16 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
 1002ce6:	2260      	movs	r2, #96	; 0x60
 1002ce8:	4629      	mov	r1, r5
 1002cea:	f104 0010 	add.w	r0, r4, #16
 1002cee:	f001 fcb7 	bl	1004660 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
 1002cf2:	200a      	movs	r0, #10
 1002cf4:	f7fe f870 	bl	1000dd8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 1002cf8:	4b09      	ldr	r3, [pc, #36]	; (1002d20 <nrfx_gpiote_init+0x44>)
    return err_code;
 1002cfa:	480a      	ldr	r0, [pc, #40]	; (1002d24 <nrfx_gpiote_init+0x48>)
 1002cfc:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
 1002d00:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
 1002d04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 1002d08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
 1002d0c:	2301      	movs	r3, #1
 1002d0e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
 1002d12:	6763      	str	r3, [r4, #116]	; 0x74
}
 1002d14:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
 1002d16:	4804      	ldr	r0, [pc, #16]	; (1002d28 <nrfx_gpiote_init+0x4c>)
 1002d18:	e7fc      	b.n	1002d14 <nrfx_gpiote_init+0x38>
 1002d1a:	bf00      	nop
 1002d1c:	2000003c 	.word	0x2000003c
 1002d20:	4100a000 	.word	0x4100a000
 1002d24:	0bad0000 	.word	0x0bad0000
 1002d28:	0bad0005 	.word	0x0bad0005

01002d2c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
 1002d2c:	4b03      	ldr	r3, [pc, #12]	; (1002d3c <nrfx_gpiote_is_init+0x10>)
 1002d2e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
 1002d32:	3800      	subs	r0, #0
 1002d34:	bf18      	it	ne
 1002d36:	2001      	movne	r0, #1
 1002d38:	4770      	bx	lr
 1002d3a:	bf00      	nop
 1002d3c:	2000003c 	.word	0x2000003c

01002d40 <nrfx_gpiote_channel_free>:
{
 1002d40:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
 1002d42:	4801      	ldr	r0, [pc, #4]	; (1002d48 <nrfx_gpiote_channel_free+0x8>)
 1002d44:	f7ff bcd6 	b.w	10026f4 <nrfx_flag32_free>
 1002d48:	200000ac 	.word	0x200000ac

01002d4c <nrfx_gpiote_channel_alloc>:
{
 1002d4c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
 1002d4e:	4801      	ldr	r0, [pc, #4]	; (1002d54 <nrfx_gpiote_channel_alloc+0x8>)
 1002d50:	f7ff bcae 	b.w	10026b0 <nrfx_flag32_alloc>
 1002d54:	200000ac 	.word	0x200000ac

01002d58 <nrfx_gpiote_trigger_enable>:
{
 1002d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 1002d5a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 1002d5c:	f7ff fe12 	bl	1002984 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 1002d60:	4b1e      	ldr	r3, [pc, #120]	; (1002ddc <nrfx_gpiote_trigger_enable+0x84>)
 1002d62:	f104 0208 	add.w	r2, r4, #8
 1002d66:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 1002d6a:	b1e8      	cbz	r0, 1002da8 <nrfx_gpiote_trigger_enable+0x50>
 1002d6c:	f013 0502 	ands.w	r5, r3, #2
 1002d70:	d11a      	bne.n	1002da8 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 1002d72:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
 1002d74:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
 1002d76:	f102 4082 	add.w	r0, r2, #1090519040	; 0x41000000
 1002d7a:	f500 4021 	add.w	r0, r0, #41216	; 0xa100
 1002d7e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 1002d82:	6005      	str	r5, [r0, #0]
 1002d84:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
 1002d88:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
 1002d8a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
 1002d8e:	f040 0001 	orr.w	r0, r0, #1
 1002d92:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
 1002d96:	b129      	cbz	r1, 1002da4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
 1002d98:	2201      	movs	r2, #1
 1002d9a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
 1002d9e:	4a10      	ldr	r2, [pc, #64]	; (1002de0 <nrfx_gpiote_trigger_enable+0x88>)
 1002da0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
 1002da4:	b003      	add	sp, #12
 1002da6:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
 1002da8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
 1002dac:	2b04      	cmp	r3, #4
 1002dae:	d011      	beq.n	1002dd4 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
 1002db0:	2b05      	cmp	r3, #5
 1002db2:	d011      	beq.n	1002dd8 <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 1002db4:	a801      	add	r0, sp, #4
 1002db6:	9401      	str	r4, [sp, #4]
 1002db8:	f7ff fdd4 	bl	1002964 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
 1002dbc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
 1002dbe:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
 1002dc0:	40d9      	lsrs	r1, r3
 1002dc2:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
 1002dc6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
 1002dc8:	4620      	mov	r0, r4
}
 1002dca:	b003      	add	sp, #12
 1002dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
 1002dd0:	f001 be47 	b.w	1004a62 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
 1002dd4:	2103      	movs	r1, #3
 1002dd6:	e7f7      	b.n	1002dc8 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
 1002dd8:	2102      	movs	r1, #2
 1002dda:	e7f5      	b.n	1002dc8 <nrfx_gpiote_trigger_enable+0x70>
 1002ddc:	2000003c 	.word	0x2000003c
 1002de0:	4100a000 	.word	0x4100a000

01002de4 <nrfx_gpiote_trigger_disable>:
{
 1002de4:	b508      	push	{r3, lr}
 1002de6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 1002de8:	f7ff fdcc 	bl	1002984 <pin_in_use_by_te>
 1002dec:	b1c0      	cbz	r0, 1002e20 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 1002dee:	4b0f      	ldr	r3, [pc, #60]	; (1002e2c <nrfx_gpiote_trigger_disable+0x48>)
 1002df0:	f102 0108 	add.w	r1, r2, #8
 1002df4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 1002df8:	0799      	lsls	r1, r3, #30
 1002dfa:	d411      	bmi.n	1002e20 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
 1002dfc:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 1002dfe:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
 1002e00:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
 1002e02:	490b      	ldr	r1, [pc, #44]	; (1002e30 <nrfx_gpiote_trigger_disable+0x4c>)
 1002e04:	009b      	lsls	r3, r3, #2
 1002e06:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1002e0a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
 1002e0e:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 1002e12:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
 1002e16:	f022 0203 	bic.w	r2, r2, #3
 1002e1a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
 1002e1e:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
 1002e20:	2100      	movs	r1, #0
}
 1002e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
 1002e26:	4610      	mov	r0, r2
 1002e28:	f001 be1b 	b.w	1004a62 <nrf_gpio_cfg_sense_set>
 1002e2c:	2000003c 	.word	0x2000003c
 1002e30:	4100a000 	.word	0x4100a000

01002e34 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
 1002e34:	4b10      	ldr	r3, [pc, #64]	; (1002e78 <nrfx_gpiote_pin_uninit+0x44>)
 1002e36:	f100 0208 	add.w	r2, r0, #8
 1002e3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
 1002e3e:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
 1002e40:	07db      	lsls	r3, r3, #31
{
 1002e42:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
 1002e44:	d516      	bpl.n	1002e74 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
 1002e46:	f7ff ffcd 	bl	1002de4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
 1002e4a:	4620      	mov	r0, r4
 1002e4c:	f7ff fdec 	bl	1002a28 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 1002e50:	a801      	add	r0, sp, #4
 1002e52:	9401      	str	r4, [sp, #4]
 1002e54:	f7ff fd86 	bl	1002964 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
 1002e58:	9b01      	ldr	r3, [sp, #4]
 1002e5a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 1002e5e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 1002e62:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
 1002e66:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
 1002e6a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
 1002e6e:	4803      	ldr	r0, [pc, #12]	; (1002e7c <nrfx_gpiote_pin_uninit+0x48>)
}
 1002e70:	b002      	add	sp, #8
 1002e72:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
 1002e74:	4802      	ldr	r0, [pc, #8]	; (1002e80 <nrfx_gpiote_pin_uninit+0x4c>)
 1002e76:	e7fb      	b.n	1002e70 <nrfx_gpiote_pin_uninit+0x3c>
 1002e78:	2000003c 	.word	0x2000003c
 1002e7c:	0bad0000 	.word	0x0bad0000
 1002e80:	0bad0004 	.word	0x0bad0004

01002e84 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
 1002e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
 1002e88:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
 1002e8a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 1002e8c:	462c      	mov	r4, r5
{
 1002e8e:	4b63      	ldr	r3, [pc, #396]	; (100301c <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
 1002e90:	4863      	ldr	r0, [pc, #396]	; (1003020 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
 1002e92:	4964      	ldr	r1, [pc, #400]	; (1003024 <nrfx_gpiote_irq_handler+0x1a0>)
{
 1002e94:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1002e96:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
 1002e98:	b136      	cbz	r6, 1002ea8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
 1002e9a:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
 1002e9e:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 1002ea0:	bf1e      	ittt	ne
 1002ea2:	601c      	strne	r4, [r3, #0]
 1002ea4:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
 1002ea6:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
 1002ea8:	3304      	adds	r3, #4
 1002eaa:	428b      	cmp	r3, r1
        }
        mask <<= 1;
 1002eac:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
 1002eb0:	d1f1      	bne.n	1002e96 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1002eb2:	4b5b      	ldr	r3, [pc, #364]	; (1003020 <nrfx_gpiote_irq_handler+0x19c>)
 1002eb4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
 1002eb8:	2b00      	cmp	r3, #0
 1002eba:	f000 8091 	beq.w	1002fe0 <nrfx_gpiote_irq_handler+0x15c>
        *p_masks = gpio_regs[i]->LATCH;
 1002ebe:	4f5a      	ldr	r7, [pc, #360]	; (1003028 <nrfx_gpiote_irq_handler+0x1a4>)
 1002ec0:	4e5a      	ldr	r6, [pc, #360]	; (100302c <nrfx_gpiote_irq_handler+0x1a8>)
 1002ec2:	6a3b      	ldr	r3, [r7, #32]
 1002ec4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
 1002ec6:	623b      	str	r3, [r7, #32]
        *p_masks = gpio_regs[i]->LATCH;
 1002ec8:	6a33      	ldr	r3, [r6, #32]
 1002eca:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
 1002ecc:	6233      	str	r3, [r6, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
 1002ece:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
 1002ed2:	f10d 0a10 	add.w	sl, sp, #16
 1002ed6:	ea4f 1348 	mov.w	r3, r8, lsl #5
 1002eda:	9301      	str	r3, [sp, #4]
 1002edc:	e04f      	b.n	1002f7e <nrfx_gpiote_irq_handler+0xfa>
                uint32_t pin = NRF_CTZ(latch[i]);
 1002ede:	fa93 f3a3 	rbit	r3, r3
 1002ee2:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
 1002ee6:	9a01      	ldr	r2, [sp, #4]
 1002ee8:	eb03 0b02 	add.w	fp, r3, r2
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
 1002eec:	4b50      	ldr	r3, [pc, #320]	; (1003030 <nrfx_gpiote_irq_handler+0x1ac>)
 1002eee:	f10b 0208 	add.w	r2, fp, #8
 1002ef2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
 1002ef6:	ea4f 04db 	mov.w	r4, fp, lsr #3
 1002efa:	f3c2 0382 	ubfx	r3, r2, #2, #3
 1002efe:	9300      	str	r3, [sp, #0]
 1002f00:	4699      	mov	r9, r3
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
 1002f02:	2301      	movs	r3, #1
    bit = BITMASK_RELBIT_GET(bit);
 1002f04:	f00b 0007 	and.w	r0, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
 1002f08:	fa03 fc00 	lsl.w	ip, r3, r0
 1002f0c:	f81a 0004 	ldrb.w	r0, [sl, r4]
 1002f10:	0891      	lsrs	r1, r2, #2
 1002f12:	ea20 000c 	bic.w	r0, r0, ip
 1002f16:	f80a 0004 	strb.w	r0, [sl, r4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 1002f1a:	a803      	add	r0, sp, #12
 1002f1c:	f8cd b00c 	str.w	fp, [sp, #12]
 1002f20:	f7ff fd20 	bl	1002964 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
 1002f24:	9c03      	ldr	r4, [sp, #12]
    if (is_level(trigger))
 1002f26:	074b      	lsls	r3, r1, #29
 1002f28:	f104 0480 	add.w	r4, r4, #128	; 0x80
 1002f2c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
 1002f30:	f3c4 4401 	ubfx	r4, r4, #16, #2
 1002f34:	d52d      	bpl.n	1002f92 <nrfx_gpiote_irq_handler+0x10e>
        call_handler(pin, trigger);
 1002f36:	4658      	mov	r0, fp
 1002f38:	4649      	mov	r1, r9
 1002f3a:	f7ff fd2d 	bl	1002998 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 1002f3e:	a803      	add	r0, sp, #12
 1002f40:	f8cd b00c 	str.w	fp, [sp, #12]
 1002f44:	f7ff fd0e 	bl	1002964 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
 1002f48:	9a03      	ldr	r2, [sp, #12]
 1002f4a:	b2e4      	uxtb	r4, r4
 1002f4c:	3280      	adds	r2, #128	; 0x80
 1002f4e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
 1002f52:	f3c2 4201 	ubfx	r2, r2, #16, #2
 1002f56:	4294      	cmp	r4, r2
 1002f58:	d107      	bne.n	1002f6a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
 1002f5a:	2100      	movs	r1, #0
 1002f5c:	4658      	mov	r0, fp
 1002f5e:	f001 fd80 	bl	1004a62 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
 1002f62:	4621      	mov	r1, r4
 1002f64:	4658      	mov	r0, fp
 1002f66:	f001 fd7c 	bl	1004a62 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 1002f6a:	a803      	add	r0, sp, #12
 1002f6c:	f8cd b00c 	str.w	fp, [sp, #12]
 1002f70:	f7ff fcf8 	bl	1002964 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
 1002f74:	2201      	movs	r2, #1
 1002f76:	9b03      	ldr	r3, [sp, #12]
 1002f78:	fa02 f303 	lsl.w	r3, r2, r3
 1002f7c:	6203      	str	r3, [r0, #32]
            while (latch[i])
 1002f7e:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
 1002f82:	2b00      	cmp	r3, #0
 1002f84:	d1ab      	bne.n	1002ede <nrfx_gpiote_irq_handler+0x5a>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
 1002f86:	f1b8 0f00 	cmp.w	r8, #0
 1002f8a:	d11b      	bne.n	1002fc4 <nrfx_gpiote_irq_handler+0x140>
 1002f8c:	f04f 0801 	mov.w	r8, #1
 1002f90:	e7a1      	b.n	1002ed6 <nrfx_gpiote_irq_handler+0x52>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
 1002f92:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
 1002f94:	bf0c      	ite	eq
 1002f96:	2103      	moveq	r1, #3
 1002f98:	2102      	movne	r1, #2
 1002f9a:	4658      	mov	r0, fp
 1002f9c:	f001 fd61 	bl	1004a62 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
 1002fa0:	9b00      	ldr	r3, [sp, #0]
 1002fa2:	2b03      	cmp	r3, #3
 1002fa4:	d004      	beq.n	1002fb0 <nrfx_gpiote_irq_handler+0x12c>
 1002fa6:	2c02      	cmp	r4, #2
 1002fa8:	d107      	bne.n	1002fba <nrfx_gpiote_irq_handler+0x136>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
 1002faa:	f1b9 0f01 	cmp.w	r9, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
 1002fae:	d1dc      	bne.n	1002f6a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
 1002fb0:	4649      	mov	r1, r9
 1002fb2:	4658      	mov	r0, fp
 1002fb4:	f7ff fcf0 	bl	1002998 <call_handler>
 1002fb8:	e7d7      	b.n	1002f6a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
 1002fba:	2c03      	cmp	r4, #3
 1002fbc:	d1d5      	bne.n	1002f6a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
 1002fbe:	f1b9 0f02 	cmp.w	r9, #2
 1002fc2:	e7f4      	b.n	1002fae <nrfx_gpiote_irq_handler+0x12a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 1002fc4:	4a16      	ldr	r2, [pc, #88]	; (1003020 <nrfx_gpiote_irq_handler+0x19c>)
 1002fc6:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
 1002fca:	f8d2 317c 	ldr.w	r3, [r2, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
 1002fce:	6a3a      	ldr	r2, [r7, #32]
 1002fd0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
 1002fd2:	623a      	str	r2, [r7, #32]
        *p_masks = gpio_regs[i]->LATCH;
 1002fd4:	6a33      	ldr	r3, [r6, #32]
 1002fd6:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
 1002fd8:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
 1002fda:	4313      	orrs	r3, r2
 1002fdc:	f47f af77 	bne.w	1002ece <nrfx_gpiote_irq_handler+0x4a>
        mask &= ~NRFX_BIT(ch);
 1002fe0:	2401      	movs	r4, #1
    while (mask)
 1002fe2:	b915      	cbnz	r5, 1002fea <nrfx_gpiote_irq_handler+0x166>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
 1002fe4:	b007      	add	sp, #28
 1002fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
 1002fea:	fa95 f3a5 	rbit	r3, r5
 1002fee:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
 1002ff2:	fa04 f203 	lsl.w	r2, r4, r3
 1002ff6:	009b      	lsls	r3, r3, #2
 1002ff8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1002ffc:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
 1003000:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
 1003004:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
 1003008:	f3c0 2005 	ubfx	r0, r0, #8, #6
 100300c:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
 1003010:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
 1003014:	f7ff fcc0 	bl	1002998 <call_handler>
 1003018:	e7e3      	b.n	1002fe2 <nrfx_gpiote_irq_handler+0x15e>
 100301a:	bf00      	nop
 100301c:	4100a100 	.word	0x4100a100
 1003020:	4100a000 	.word	0x4100a000
 1003024:	4100a120 	.word	0x4100a120
 1003028:	418c0500 	.word	0x418c0500
 100302c:	418c0800 	.word	0x418c0800
 1003030:	2000003c 	.word	0x2000003c

01003034 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 1003034:	4b0e      	ldr	r3, [pc, #56]	; (1003070 <z_sys_init_run_level+0x3c>)
{
 1003036:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 1003038:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 100303c:	3001      	adds	r0, #1
 100303e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 1003042:	42a6      	cmp	r6, r4
 1003044:	d800      	bhi.n	1003048 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 1003046:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 1003048:	e9d4 3500 	ldrd	r3, r5, [r4]
 100304c:	4628      	mov	r0, r5
 100304e:	4798      	blx	r3
		if (dev != NULL) {
 1003050:	b165      	cbz	r5, 100306c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 1003052:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 1003054:	b130      	cbz	r0, 1003064 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 1003056:	2800      	cmp	r0, #0
 1003058:	bfb8      	it	lt
 100305a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 100305c:	28ff      	cmp	r0, #255	; 0xff
 100305e:	bfa8      	it	ge
 1003060:	20ff      	movge	r0, #255	; 0xff
 1003062:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 1003064:	785a      	ldrb	r2, [r3, #1]
 1003066:	f042 0201 	orr.w	r2, r2, #1
 100306a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 100306c:	3408      	adds	r4, #8
 100306e:	e7e8      	b.n	1003042 <z_sys_init_run_level+0xe>
 1003070:	01005114 	.word	0x01005114

01003074 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 1003074:	2201      	movs	r2, #1
{
 1003076:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 1003078:	4b09      	ldr	r3, [pc, #36]	; (10030a0 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 100307a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 100307c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 100307e:	f7ff ffd9 	bl	1003034 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 1003082:	f001 f90d 	bl	10042a0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 1003086:	2003      	movs	r0, #3
 1003088:	f7ff ffd4 	bl	1003034 <z_sys_init_run_level>

	z_init_static_threads();
 100308c:	f000 f912 	bl	10032b4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 1003090:	f7fd f97e 	bl	1000390 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 1003094:	4a03      	ldr	r2, [pc, #12]	; (10030a4 <bg_thread_main+0x30>)
 1003096:	7b13      	ldrb	r3, [r2, #12]
 1003098:	f023 0301 	bic.w	r3, r3, #1
 100309c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 100309e:	bd08      	pop	{r3, pc}
 10030a0:	20000416 	.word	0x20000416
 10030a4:	200001b0 	.word	0x200001b0

010030a8 <z_bss_zero>:
{
 10030a8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 10030aa:	4803      	ldr	r0, [pc, #12]	; (10030b8 <z_bss_zero+0x10>)
 10030ac:	4a03      	ldr	r2, [pc, #12]	; (10030bc <z_bss_zero+0x14>)
 10030ae:	2100      	movs	r1, #0
 10030b0:	1a12      	subs	r2, r2, r0
 10030b2:	f001 fd0b 	bl	1004acc <z_early_memset>
}
 10030b6:	bd08      	pop	{r3, pc}
 10030b8:	20000110 	.word	0x20000110
 10030bc:	20000418 	.word	0x20000418

010030c0 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
 10030c0:	2300      	movs	r3, #0
 10030c2:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 10030c4:	b570      	push	{r4, r5, r6, lr}
 10030c6:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 10030c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 10030cc:	220f      	movs	r2, #15
 10030ce:	9301      	str	r3, [sp, #4]
 10030d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 10030d4:	2318      	movs	r3, #24
 10030d6:	4d0f      	ldr	r5, [pc, #60]	; (1003114 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
 10030d8:	4e0f      	ldr	r6, [pc, #60]	; (1003118 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 10030da:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
 10030de:	490f      	ldr	r1, [pc, #60]	; (100311c <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
 10030e0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 10030e4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 10030e6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 10030ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 10030ee:	4630      	mov	r0, r6
 10030f0:	4b0b      	ldr	r3, [pc, #44]	; (1003120 <z_init_cpu+0x60>)
 10030f2:	9500      	str	r5, [sp, #0]
 10030f4:	f000 f882 	bl	10031fc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 10030f8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 10030fa:	480a      	ldr	r0, [pc, #40]	; (1003124 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
 10030fc:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 10030fe:	3401      	adds	r4, #1
 1003100:	f023 0304 	bic.w	r3, r3, #4
 1003104:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
 1003108:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 100310a:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
 100310c:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 100310e:	b006      	add	sp, #24
 1003110:	bd70      	pop	{r4, r5, r6, pc}
 1003112:	bf00      	nop
 1003114:	200003d4 	.word	0x200003d4
 1003118:	20000130 	.word	0x20000130
 100311c:	20000818 	.word	0x20000818
 1003120:	01004aeb 	.word	0x01004aeb
 1003124:	20000918 	.word	0x20000918

01003128 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 1003128:	b580      	push	{r7, lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
 100312a:	4b2d      	ldr	r3, [pc, #180]	; (10031e0 <z_cstart+0xb8>)
 100312c:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
 100312e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 1003132:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 1003136:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 100313a:	2400      	movs	r4, #0
 100313c:	23e0      	movs	r3, #224	; 0xe0
 100313e:	4d29      	ldr	r5, [pc, #164]	; (10031e4 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
 1003140:	4e29      	ldr	r6, [pc, #164]	; (10031e8 <z_cstart+0xc0>)
 1003142:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 1003146:	77ec      	strb	r4, [r5, #31]
 1003148:	762c      	strb	r4, [r5, #24]
 100314a:	766c      	strb	r4, [r5, #25]
 100314c:	76ac      	strb	r4, [r5, #26]
 100314e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 1003152:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 1003154:	4f25      	ldr	r7, [pc, #148]	; (10031ec <z_cstart+0xc4>)
 1003156:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 100315a:	626b      	str	r3, [r5, #36]	; 0x24
 100315c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 1003160:	f7fd fffe 	bl	1001160 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 1003164:	f7fd fe1a 	bl	1000d9c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 1003168:	f04f 33ff 	mov.w	r3, #4294967295
 100316c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 100316e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 1003170:	f7fe fa06 	bl	1001580 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 1003174:	f7fe f8a4 	bl	10012c0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 1003178:	f240 1301 	movw	r3, #257	; 0x101
 100317c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 1003180:	ab06      	add	r3, sp, #24
 1003182:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 1003184:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
 1003188:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 100318a:	f001 fc79 	bl	1004a80 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 100318e:	4620      	mov	r0, r4
 1003190:	f7ff ff50 	bl	1003034 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 1003194:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 1003196:	4d16      	ldr	r5, [pc, #88]	; (10031f0 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 1003198:	f7ff ff4c 	bl	1003034 <z_sys_init_run_level>
	z_sched_init();
 100319c:	f000 fd4a 	bl	1003c34 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 10031a0:	4b14      	ldr	r3, [pc, #80]	; (10031f4 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
 10031a2:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 10031a4:	9305      	str	r3, [sp, #20]
 10031a6:	2301      	movs	r3, #1
 10031a8:	4913      	ldr	r1, [pc, #76]	; (10031f8 <z_cstart+0xd0>)
 10031aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 10031ae:	e9cd 4303 	strd	r4, r3, [sp, #12]
 10031b2:	4628      	mov	r0, r5
 10031b4:	463b      	mov	r3, r7
 10031b6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 10031ba:	9400      	str	r4, [sp, #0]
 10031bc:	f000 f81e 	bl	10031fc <z_setup_new_thread>
 10031c0:	4606      	mov	r6, r0
 10031c2:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
 10031c4:	4628      	mov	r0, r5
 10031c6:	f022 0204 	bic.w	r2, r2, #4
 10031ca:	736a      	strb	r2, [r5, #13]
 10031cc:	f001 fd29 	bl	1004c22 <z_ready_thread>
	z_init_cpu(0);
 10031d0:	4620      	mov	r0, r4
 10031d2:	f7ff ff75 	bl	10030c0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 10031d6:	463a      	mov	r2, r7
 10031d8:	4631      	mov	r1, r6
 10031da:	4628      	mov	r0, r5
 10031dc:	f7fd febc 	bl	1000f58 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 10031e0:	20000918 	.word	0x20000918
 10031e4:	e000ed00 	.word	0xe000ed00
 10031e8:	200003d4 	.word	0x200003d4
 10031ec:	01003075 	.word	0x01003075
 10031f0:	200001b0 	.word	0x200001b0
 10031f4:	010051b7 	.word	0x010051b7
 10031f8:	20000418 	.word	0x20000418

010031fc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 10031fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 1003200:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 1003202:	f100 0558 	add.w	r5, r0, #88	; 0x58
 1003206:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 1003208:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 100320a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
 100320e:	2500      	movs	r5, #0
{
 1003210:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
 1003212:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 1003214:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 1003216:	e9c0 5506 	strd	r5, r5, [r0, #24]
 100321a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 100321c:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 100321e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 1003220:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
 1003224:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 1003228:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 100322a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 100322c:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 100322e:	9202      	str	r2, [sp, #8]
 1003230:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
 1003232:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 1003236:	9201      	str	r2, [sp, #4]
 1003238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 100323a:	9200      	str	r2, [sp, #0]
 100323c:	4642      	mov	r2, r8
 100323e:	f7fd fe6f 	bl	1000f20 <arch_new_thread>
	if (!_current) {
 1003242:	4b05      	ldr	r3, [pc, #20]	; (1003258 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
 1003244:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 1003246:	689b      	ldr	r3, [r3, #8]
 1003248:	b103      	cbz	r3, 100324c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
 100324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 100324c:	4640      	mov	r0, r8
 100324e:	6723      	str	r3, [r4, #112]	; 0x70
 1003250:	b004      	add	sp, #16
 1003252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1003256:	bf00      	nop
 1003258:	200003d4 	.word	0x200003d4

0100325c <z_impl_k_thread_create>:
{
 100325c:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 100325e:	2700      	movs	r7, #0
{
 1003260:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 1003262:	9705      	str	r7, [sp, #20]
 1003264:	9f10      	ldr	r7, [sp, #64]	; 0x40
{
 1003266:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 100326a:	9704      	str	r7, [sp, #16]
 100326c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
{
 100326e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 1003270:	9703      	str	r7, [sp, #12]
 1003272:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 1003274:	9702      	str	r7, [sp, #8]
 1003276:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 1003278:	9701      	str	r7, [sp, #4]
 100327a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 100327c:	9700      	str	r7, [sp, #0]
 100327e:	f7ff ffbd 	bl	10031fc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 1003282:	f1b5 3fff 	cmp.w	r5, #4294967295
 1003286:	bf08      	it	eq
 1003288:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 100328c:	d005      	beq.n	100329a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 100328e:	ea55 0306 	orrs.w	r3, r5, r6
 1003292:	d105      	bne.n	10032a0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 1003294:	4620      	mov	r0, r4
 1003296:	f000 fbc7 	bl	1003a28 <z_sched_start>
}
 100329a:	4620      	mov	r0, r4
 100329c:	b007      	add	sp, #28
 100329e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 10032a0:	4632      	mov	r2, r6
 10032a2:	462b      	mov	r3, r5
 10032a4:	4902      	ldr	r1, [pc, #8]	; (10032b0 <z_impl_k_thread_create+0x54>)
 10032a6:	f104 0018 	add.w	r0, r4, #24
 10032aa:	f000 fe4d 	bl	1003f48 <z_add_timeout>
 10032ae:	e7f4      	b.n	100329a <z_impl_k_thread_create+0x3e>
 10032b0:	01004c43 	.word	0x01004c43

010032b4 <z_init_static_threads>:
{
 10032b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 10032b8:	4c29      	ldr	r4, [pc, #164]	; (1003360 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
 10032ba:	4d2a      	ldr	r5, [pc, #168]	; (1003364 <z_init_static_threads+0xb0>)
{
 10032bc:	b087      	sub	sp, #28
 10032be:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 10032c0:	42ae      	cmp	r6, r5
 10032c2:	f104 0430 	add.w	r4, r4, #48	; 0x30
 10032c6:	d30f      	bcc.n	10032e8 <z_init_static_threads+0x34>
	k_sched_lock();
 10032c8:	f000 fac8 	bl	100385c <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
 10032cc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 10032d0:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
 10032d4:	4c22      	ldr	r4, [pc, #136]	; (1003360 <z_init_static_threads+0xac>)
 10032d6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 1003368 <z_init_static_threads+0xb4>
 10032da:	42ac      	cmp	r4, r5
 10032dc:	d320      	bcc.n	1003320 <z_init_static_threads+0x6c>
}
 10032de:	b007      	add	sp, #28
 10032e0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
 10032e4:	f000 bc8a 	b.w	1003bfc <k_sched_unlock>
		z_setup_new_thread(
 10032e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 10032ec:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 10032f0:	9305      	str	r3, [sp, #20]
 10032f2:	f854 3c10 	ldr.w	r3, [r4, #-16]
 10032f6:	9304      	str	r3, [sp, #16]
 10032f8:	f854 3c14 	ldr.w	r3, [r4, #-20]
 10032fc:	9303      	str	r3, [sp, #12]
 10032fe:	f854 3c18 	ldr.w	r3, [r4, #-24]
 1003302:	9302      	str	r3, [sp, #8]
 1003304:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 1003308:	9301      	str	r3, [sp, #4]
 100330a:	f854 3c20 	ldr.w	r3, [r4, #-32]
 100330e:	9300      	str	r3, [sp, #0]
 1003310:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 1003314:	f7ff ff72 	bl	10031fc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 1003318:	f854 3c30 	ldr.w	r3, [r4, #-48]
 100331c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 100331e:	e7ce      	b.n	10032be <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 1003320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 1003322:	1c5a      	adds	r2, r3, #1
 1003324:	d00d      	beq.n	1003342 <z_init_static_threads+0x8e>
 1003326:	2100      	movs	r1, #0
 1003328:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
 100332a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100332e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 1003332:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
 1003336:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 100333a:	d104      	bne.n	1003346 <z_init_static_threads+0x92>
	z_sched_start(thread);
 100333c:	4640      	mov	r0, r8
 100333e:	f000 fb73 	bl	1003a28 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 1003342:	3430      	adds	r4, #48	; 0x30
 1003344:	e7c9      	b.n	10032da <z_init_static_threads+0x26>
 1003346:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 100334a:	2300      	movs	r3, #0
 100334c:	f7fc feb4 	bl	10000b8 <__aeabi_uldivmod>
 1003350:	4602      	mov	r2, r0
 1003352:	460b      	mov	r3, r1
 1003354:	f108 0018 	add.w	r0, r8, #24
 1003358:	4649      	mov	r1, r9
 100335a:	f000 fdf5 	bl	1003f48 <z_add_timeout>
 100335e:	e7f0      	b.n	1003342 <z_init_static_threads+0x8e>
 1003360:	200000d4 	.word	0x200000d4
 1003364:	200000d4 	.word	0x200000d4
 1003368:	01004c43 	.word	0x01004c43

0100336c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 100336c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 1003370:	4604      	mov	r4, r0
 1003372:	4617      	mov	r7, r2
 1003374:	461e      	mov	r6, r3
	__asm__ volatile(
 1003376:	f04f 0320 	mov.w	r3, #32
 100337a:	f3ef 8811 	mrs	r8, BASEPRI
 100337e:	f383 8812 	msr	BASEPRI_MAX, r3
 1003382:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 1003386:	68c3      	ldr	r3, [r0, #12]
 1003388:	4a32      	ldr	r2, [pc, #200]	; (1003454 <z_impl_k_mutex_lock+0xe8>)
 100338a:	b16b      	cbz	r3, 10033a8 <z_impl_k_mutex_lock+0x3c>
 100338c:	6880      	ldr	r0, [r0, #8]
 100338e:	6891      	ldr	r1, [r2, #8]
 1003390:	4288      	cmp	r0, r1
 1003392:	d019      	beq.n	10033c8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 1003394:	ea57 0306 	orrs.w	r3, r7, r6
 1003398:	d118      	bne.n	10033cc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 100339a:	f388 8811 	msr	BASEPRI, r8
 100339e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 10033a2:	f06f 000f 	mvn.w	r0, #15
 10033a6:	e00c      	b.n	10033c2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
 10033a8:	6891      	ldr	r1, [r2, #8]
 10033aa:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
 10033ae:	3301      	adds	r3, #1
 10033b0:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 10033b2:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 10033b4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
 10033b6:	60a3      	str	r3, [r4, #8]
 10033b8:	f388 8811 	msr	BASEPRI, r8
 10033bc:	f3bf 8f6f 	isb	sy
		return 0;
 10033c0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 10033c2:	b002      	add	sp, #8
 10033c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 10033c8:	6921      	ldr	r1, [r4, #16]
 10033ca:	e7f0      	b.n	10033ae <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 10033cc:	f991 100e 	ldrsb.w	r1, [r1, #14]
 10033d0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
 10033d4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 10033d8:	4299      	cmp	r1, r3
 10033da:	bfa8      	it	ge
 10033dc:	4619      	movge	r1, r3
 10033de:	4291      	cmp	r1, r2
 10033e0:	bfb8      	it	lt
 10033e2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 10033e4:	428b      	cmp	r3, r1
 10033e6:	dd2e      	ble.n	1003446 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 10033e8:	f001 fb8b 	bl	1004b02 <adjust_owner_prio.isra.0>
 10033ec:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 10033ee:	4622      	mov	r2, r4
 10033f0:	4641      	mov	r1, r8
 10033f2:	e9cd 7600 	strd	r7, r6, [sp]
 10033f6:	4818      	ldr	r0, [pc, #96]	; (1003458 <z_impl_k_mutex_lock+0xec>)
 10033f8:	f000 fb72 	bl	1003ae0 <z_pend_curr>
	if (got_mutex == 0) {
 10033fc:	2800      	cmp	r0, #0
 10033fe:	d0e0      	beq.n	10033c2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
 1003400:	f04f 0320 	mov.w	r3, #32
 1003404:	f3ef 8611 	mrs	r6, BASEPRI
 1003408:	f383 8812 	msr	BASEPRI_MAX, r3
 100340c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 1003410:	6823      	ldr	r3, [r4, #0]
 1003412:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1003414:	429c      	cmp	r4, r3
 1003416:	d00a      	beq.n	100342e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 1003418:	b14b      	cbz	r3, 100342e <z_impl_k_mutex_lock+0xc2>
 100341a:	f993 300e 	ldrsb.w	r3, [r3, #14]
 100341e:	4299      	cmp	r1, r3
 1003420:	bfa8      	it	ge
 1003422:	4619      	movge	r1, r3
 1003424:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 1003428:	4299      	cmp	r1, r3
 100342a:	bfb8      	it	lt
 100342c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 100342e:	68a0      	ldr	r0, [r4, #8]
 1003430:	f001 fb67 	bl	1004b02 <adjust_owner_prio.isra.0>
 1003434:	b900      	cbnz	r0, 1003438 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
 1003436:	b145      	cbz	r5, 100344a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 1003438:	4631      	mov	r1, r6
 100343a:	4807      	ldr	r0, [pc, #28]	; (1003458 <z_impl_k_mutex_lock+0xec>)
 100343c:	f000 f9fc 	bl	1003838 <z_reschedule>
	return -EAGAIN;
 1003440:	f06f 000a 	mvn.w	r0, #10
 1003444:	e7bd      	b.n	10033c2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
 1003446:	2500      	movs	r5, #0
 1003448:	e7d1      	b.n	10033ee <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
 100344a:	f386 8811 	msr	BASEPRI, r6
 100344e:	f3bf 8f6f 	isb	sy
 1003452:	e7f5      	b.n	1003440 <z_impl_k_mutex_lock+0xd4>
 1003454:	200003d4 	.word	0x200003d4
 1003458:	20000417 	.word	0x20000417

0100345c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 100345c:	6883      	ldr	r3, [r0, #8]
{
 100345e:	b570      	push	{r4, r5, r6, lr}
 1003460:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 1003462:	b36b      	cbz	r3, 10034c0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 1003464:	4a19      	ldr	r2, [pc, #100]	; (10034cc <z_impl_k_mutex_unlock+0x70>)
 1003466:	6892      	ldr	r2, [r2, #8]
 1003468:	4293      	cmp	r3, r2
 100346a:	d12c      	bne.n	10034c6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 100346c:	68c3      	ldr	r3, [r0, #12]
 100346e:	2b01      	cmp	r3, #1
 1003470:	d903      	bls.n	100347a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
 1003472:	3b01      	subs	r3, #1
 1003474:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
 1003476:	2000      	movs	r0, #0
}
 1003478:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
 100347a:	f04f 0320 	mov.w	r3, #32
 100347e:	f3ef 8511 	mrs	r5, BASEPRI
 1003482:	f383 8812 	msr	BASEPRI_MAX, r3
 1003486:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 100348a:	6901      	ldr	r1, [r0, #16]
 100348c:	6880      	ldr	r0, [r0, #8]
 100348e:	f001 fb38 	bl	1004b02 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 1003492:	4620      	mov	r0, r4
 1003494:	f001 fc36 	bl	1004d04 <z_unpend_first_thread>
	mutex->owner = new_owner;
 1003498:	2600      	movs	r6, #0
 100349a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 100349c:	b150      	cbz	r0, 10034b4 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
 100349e:	f990 200e 	ldrsb.w	r2, [r0, #14]
 10034a2:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 10034a4:	6786      	str	r6, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
 10034a6:	f001 fbbc 	bl	1004c22 <z_ready_thread>
		z_reschedule(&lock, key);
 10034aa:	4629      	mov	r1, r5
 10034ac:	4808      	ldr	r0, [pc, #32]	; (10034d0 <z_impl_k_mutex_unlock+0x74>)
 10034ae:	f000 f9c3 	bl	1003838 <z_reschedule>
 10034b2:	e7e0      	b.n	1003476 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
 10034b4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 10034b6:	f385 8811 	msr	BASEPRI, r5
 10034ba:	f3bf 8f6f 	isb	sy
 10034be:	e7da      	b.n	1003476 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
 10034c0:	f06f 0015 	mvn.w	r0, #21
 10034c4:	e7d8      	b.n	1003478 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
 10034c6:	f04f 30ff 	mov.w	r0, #4294967295
 10034ca:	e7d5      	b.n	1003478 <z_impl_k_mutex_unlock+0x1c>
 10034cc:	200003d4 	.word	0x200003d4
 10034d0:	20000417 	.word	0x20000417

010034d4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 10034d4:	b538      	push	{r3, r4, r5, lr}
 10034d6:	4604      	mov	r4, r0
	__asm__ volatile(
 10034d8:	f04f 0320 	mov.w	r3, #32
 10034dc:	f3ef 8511 	mrs	r5, BASEPRI
 10034e0:	f383 8812 	msr	BASEPRI_MAX, r3
 10034e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 10034e8:	f001 fc0c 	bl	1004d04 <z_unpend_first_thread>

	if (thread != NULL) {
 10034ec:	b148      	cbz	r0, 1003502 <z_impl_k_sem_give+0x2e>
 10034ee:	2200      	movs	r2, #0
 10034f0:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 10034f2:	f001 fb96 	bl	1004c22 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 10034f6:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 10034f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 10034fc:	4804      	ldr	r0, [pc, #16]	; (1003510 <z_impl_k_sem_give+0x3c>)
 10034fe:	f000 b99b 	b.w	1003838 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 1003502:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 1003506:	429a      	cmp	r2, r3
 1003508:	bf18      	it	ne
 100350a:	3301      	addne	r3, #1
 100350c:	60a3      	str	r3, [r4, #8]
}
 100350e:	e7f2      	b.n	10034f6 <z_impl_k_sem_give+0x22>
 1003510:	20000417 	.word	0x20000417

01003514 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 1003514:	b513      	push	{r0, r1, r4, lr}
 1003516:	f04f 0420 	mov.w	r4, #32
 100351a:	f3ef 8111 	mrs	r1, BASEPRI
 100351e:	f384 8812 	msr	BASEPRI_MAX, r4
 1003522:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 1003526:	6884      	ldr	r4, [r0, #8]
 1003528:	b144      	cbz	r4, 100353c <z_impl_k_sem_take+0x28>
		sem->count--;
 100352a:	3c01      	subs	r4, #1
 100352c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 100352e:	f381 8811 	msr	BASEPRI, r1
 1003532:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 1003536:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 1003538:	b002      	add	sp, #8
 100353a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 100353c:	ea52 0403 	orrs.w	r4, r2, r3
 1003540:	d106      	bne.n	1003550 <z_impl_k_sem_take+0x3c>
 1003542:	f381 8811 	msr	BASEPRI, r1
 1003546:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 100354a:	f06f 000f 	mvn.w	r0, #15
 100354e:	e7f3      	b.n	1003538 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 1003550:	e9cd 2300 	strd	r2, r3, [sp]
 1003554:	4602      	mov	r2, r0
 1003556:	4802      	ldr	r0, [pc, #8]	; (1003560 <z_impl_k_sem_take+0x4c>)
 1003558:	f000 fac2 	bl	1003ae0 <z_pend_curr>
	return ret;
 100355c:	e7ec      	b.n	1003538 <z_impl_k_sem_take+0x24>
 100355e:	bf00      	nop
 1003560:	20000417 	.word	0x20000417

01003564 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 1003564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1003568:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 100356a:	f04f 38ff 	mov.w	r8, #4294967295
 100356e:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
 1003572:	4e45      	ldr	r6, [pc, #276]	; (1003688 <work_queue_main+0x124>)
{
 1003574:	b085      	sub	sp, #20
	__asm__ volatile(
 1003576:	f04f 0320 	mov.w	r3, #32
 100357a:	f3ef 8711 	mrs	r7, BASEPRI
 100357e:	f383 8812 	msr	BASEPRI_MAX, r3
 1003582:	f3bf 8f6f 	isb	sy
 1003586:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 100358a:	b98d      	cbnz	r5, 10035b0 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
 100358c:	2102      	movs	r1, #2
 100358e:	f104 0098 	add.w	r0, r4, #152	; 0x98
 1003592:	f001 fad1 	bl	1004b38 <flag_test_and_clear>
 1003596:	2800      	cmp	r0, #0
 1003598:	d135      	bne.n	1003606 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 100359a:	2300      	movs	r3, #0
 100359c:	4639      	mov	r1, r7
 100359e:	e9cd 8900 	strd	r8, r9, [sp]
 10035a2:	9302      	str	r3, [sp, #8]
 10035a4:	f104 0288 	add.w	r2, r4, #136	; 0x88
 10035a8:	4838      	ldr	r0, [pc, #224]	; (100368c <work_queue_main+0x128>)
 10035aa:	f000 fc57 	bl	1003e5c <z_sched_wait>
			continue;
 10035ae:	e7e2      	b.n	1003576 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 10035b0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
 10035b4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 10035b6:	4295      	cmp	r5, r2
	list->head = node;
 10035b8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 10035bc:	d101      	bne.n	10035c2 <work_queue_main+0x5e>
	list->tail = node;
 10035be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
 10035c2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 10035c6:	f043 0302 	orr.w	r3, r3, #2
 10035ca:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
 10035ce:	68eb      	ldr	r3, [r5, #12]
 10035d0:	f023 0304 	bic.w	r3, r3, #4
 10035d4:	f043 0301 	orr.w	r3, r3, #1
 10035d8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
 10035da:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
 10035dc:	f387 8811 	msr	BASEPRI, r7
 10035e0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 10035e4:	4628      	mov	r0, r5
 10035e6:	4798      	blx	r3
	__asm__ volatile(
 10035e8:	f04f 0320 	mov.w	r3, #32
 10035ec:	f3ef 8b11 	mrs	fp, BASEPRI
 10035f0:	f383 8812 	msr	BASEPRI_MAX, r3
 10035f4:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 10035f8:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 10035fa:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 10035fc:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 1003600:	d40b      	bmi.n	100361a <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
 1003602:	60ea      	str	r2, [r5, #12]
 1003604:	e00e      	b.n	1003624 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 1003606:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 100360a:	2200      	movs	r2, #0
 100360c:	2101      	movs	r1, #1
 100360e:	4628      	mov	r0, r5
 1003610:	f001 fb90 	bl	1004d34 <z_sched_wake>
 1003614:	2800      	cmp	r0, #0
 1003616:	d1f8      	bne.n	100360a <work_queue_main+0xa6>
 1003618:	e7bf      	b.n	100359a <work_queue_main+0x36>
	return list->head;
 100361a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
 100361c:	f023 0303 	bic.w	r3, r3, #3
 1003620:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 1003622:	b970      	cbnz	r0, 1003642 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
 1003624:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 1003628:	f023 0302 	bic.w	r3, r3, #2
 100362c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
 1003630:	f38b 8811 	msr	BASEPRI, fp
 1003634:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 1003638:	05d8      	lsls	r0, r3, #23
 100363a:	d49c      	bmi.n	1003576 <work_queue_main+0x12>
	z_impl_k_yield();
 100363c:	f000 fb06 	bl	1003c4c <z_impl_k_yield>
}
 1003640:	e799      	b.n	1003576 <work_queue_main+0x12>
	return node->next;
 1003642:	2700      	movs	r7, #0
	parent->next = child;
 1003644:	463b      	mov	r3, r7
	return node->next;
 1003646:	f8d0 a000 	ldr.w	sl, [r0]
		if (wc->work == work) {
 100364a:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 100364c:	4601      	mov	r1, r0
		if (wc->work == work) {
 100364e:	4295      	cmp	r5, r2
 1003650:	d10c      	bne.n	100366c <work_queue_main+0x108>
 1003652:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 1003654:	b997      	cbnz	r7, 100367c <work_queue_main+0x118>
 1003656:	6872      	ldr	r2, [r6, #4]
	list->head = node;
 1003658:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 100365a:	4282      	cmp	r2, r0
 100365c:	d100      	bne.n	1003660 <work_queue_main+0xfc>
	list->tail = node;
 100365e:	6071      	str	r1, [r6, #4]
	parent->next = child;
 1003660:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
 1003664:	f7ff ff36 	bl	10034d4 <z_impl_k_sem_give>
}
 1003668:	4639      	mov	r1, r7
 100366a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 100366c:	f1ba 0f00 	cmp.w	sl, #0
 1003670:	d0d8      	beq.n	1003624 <work_queue_main+0xc0>
	return node->next;
 1003672:	4650      	mov	r0, sl
 1003674:	460f      	mov	r7, r1
 1003676:	f8da a000 	ldr.w	sl, [sl]
 100367a:	e7e6      	b.n	100364a <work_queue_main+0xe6>
	return list->tail;
 100367c:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
 100367e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 1003680:	4290      	cmp	r0, r2
	list->tail = node;
 1003682:	bf08      	it	eq
 1003684:	6077      	streq	r7, [r6, #4]
}
 1003686:	e7eb      	b.n	1003660 <work_queue_main+0xfc>
 1003688:	200003f8 	.word	0x200003f8
 100368c:	20000417 	.word	0x20000417

01003690 <submit_to_queue_locked>:
{
 1003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 1003692:	68c3      	ldr	r3, [r0, #12]
{
 1003694:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 1003696:	079a      	lsls	r2, r3, #30
{
 1003698:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 100369a:	f3c3 0540 	ubfx	r5, r3, #1, #1
 100369e:	d41f      	bmi.n	10036e0 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 10036a0:	075f      	lsls	r7, r3, #29
 10036a2:	d41f      	bmi.n	10036e4 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
 10036a4:	680a      	ldr	r2, [r1, #0]
 10036a6:	b90a      	cbnz	r2, 10036ac <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 10036a8:	6882      	ldr	r2, [r0, #8]
 10036aa:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 10036ac:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
 10036ae:	bf42      	ittt	mi
 10036b0:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
 10036b2:	2502      	movmi	r5, #2
			*queuep = work->queue;
 10036b4:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
 10036b6:	6837      	ldr	r7, [r6, #0]
		ret = 1;
 10036b8:	bf58      	it	pl
 10036ba:	2501      	movpl	r5, #1
	if (queue == NULL) {
 10036bc:	b37f      	cbz	r7, 100371e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 10036be:	4b1b      	ldr	r3, [pc, #108]	; (100372c <submit_to_queue_locked+0x9c>)
 10036c0:	689b      	ldr	r3, [r3, #8]
 10036c2:	42bb      	cmp	r3, r7
 10036c4:	d111      	bne.n	10036ea <submit_to_queue_locked+0x5a>
 10036c6:	f001 fa05 	bl	1004ad4 <k_is_in_isr>
 10036ca:	f080 0001 	eor.w	r0, r0, #1
 10036ce:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
 10036d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 10036d4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 10036d6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 10036da:	d523      	bpl.n	1003724 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
 10036dc:	b13a      	cbz	r2, 10036ee <submit_to_queue_locked+0x5e>
 10036de:	b940      	cbnz	r0, 10036f2 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
 10036e0:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
 10036e4:	2300      	movs	r3, #0
 10036e6:	6033      	str	r3, [r6, #0]
	return ret;
 10036e8:	e013      	b.n	1003712 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 10036ea:	2000      	movs	r0, #0
 10036ec:	e7f0      	b.n	10036d0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
 10036ee:	071b      	lsls	r3, r3, #28
 10036f0:	d4f6      	bmi.n	10036e0 <submit_to_queue_locked+0x50>
	parent->next = child;
 10036f2:	2300      	movs	r3, #0
 10036f4:	6023      	str	r3, [r4, #0]
	return list->tail;
 10036f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
 10036fa:	b963      	cbnz	r3, 1003716 <submit_to_queue_locked+0x86>
	list->head = node;
 10036fc:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
 1003700:	4638      	mov	r0, r7
 1003702:	f001 fa24 	bl	1004b4e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
 1003706:	68e3      	ldr	r3, [r4, #12]
 1003708:	f043 0304 	orr.w	r3, r3, #4
 100370c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 100370e:	6833      	ldr	r3, [r6, #0]
 1003710:	60a3      	str	r3, [r4, #8]
}
 1003712:	4628      	mov	r0, r5
 1003714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 1003716:	601c      	str	r4, [r3, #0]
	list->tail = node;
 1003718:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
 100371c:	e7f0      	b.n	1003700 <submit_to_queue_locked+0x70>
		return -EINVAL;
 100371e:	f06f 0515 	mvn.w	r5, #21
 1003722:	e7df      	b.n	10036e4 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
 1003724:	f06f 0512 	mvn.w	r5, #18
 1003728:	e7dc      	b.n	10036e4 <submit_to_queue_locked+0x54>
 100372a:	bf00      	nop
 100372c:	200003d4 	.word	0x200003d4

01003730 <k_work_submit>:
{
 1003730:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 1003732:	4801      	ldr	r0, [pc, #4]	; (1003738 <k_work_submit+0x8>)
 1003734:	f001 ba26 	b.w	1004b84 <k_work_submit_to_queue>
 1003738:	20000238 	.word	0x20000238

0100373c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 100373c:	b5f0      	push	{r4, r5, r6, r7, lr}
 100373e:	4604      	mov	r4, r0
	list->head = NULL;
 1003740:	2000      	movs	r0, #0
 1003742:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
 1003744:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
 1003748:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 100374a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
 100374e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
 1003752:	f104 0090 	add.w	r0, r4, #144	; 0x90
 1003756:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 100375a:	b31d      	cbz	r5, 10037a4 <k_work_queue_start+0x68>
 100375c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 100375e:	2800      	cmp	r0, #0
 1003760:	f240 1001 	movw	r0, #257	; 0x101
 1003764:	bf08      	it	eq
 1003766:	2001      	moveq	r0, #1
	*flagp = flags;
 1003768:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 100376c:	2000      	movs	r0, #0
 100376e:	f04f 36ff 	mov.w	r6, #4294967295
 1003772:	f04f 37ff 	mov.w	r7, #4294967295
 1003776:	e9cd 3003 	strd	r3, r0, [sp, #12]
 100377a:	e9cd 0001 	strd	r0, r0, [sp, #4]
 100377e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 1003782:	4620      	mov	r0, r4
 1003784:	4b08      	ldr	r3, [pc, #32]	; (10037a8 <k_work_queue_start+0x6c>)
 1003786:	9400      	str	r4, [sp, #0]
 1003788:	f7ff fd68 	bl	100325c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 100378c:	b125      	cbz	r5, 1003798 <k_work_queue_start+0x5c>
 100378e:	6829      	ldr	r1, [r5, #0]
 1003790:	b111      	cbz	r1, 1003798 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
 1003792:	4620      	mov	r0, r4
 1003794:	f001 f9a4 	bl	1004ae0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 1003798:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 100379a:	b009      	add	sp, #36	; 0x24
 100379c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 10037a0:	f001 b9a1 	b.w	1004ae6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 10037a4:	2001      	movs	r0, #1
 10037a6:	e7df      	b.n	1003768 <k_work_queue_start+0x2c>
 10037a8:	01003565 	.word	0x01003565

010037ac <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 10037ac:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 10037ae:	4d07      	ldr	r5, [pc, #28]	; (10037cc <z_reset_time_slice+0x20>)
 10037b0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 10037b2:	b154      	cbz	r4, 10037ca <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 10037b4:	f7fe fef2 	bl	100259c <sys_clock_elapsed>
 10037b8:	4b05      	ldr	r3, [pc, #20]	; (10037d0 <z_reset_time_slice+0x24>)
 10037ba:	4404      	add	r4, r0
 10037bc:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 10037be:	6828      	ldr	r0, [r5, #0]
 10037c0:	2100      	movs	r1, #0
	}
}
 10037c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 10037c6:	f001 bae8 	b.w	1004d9a <z_set_timeout_expiry>
}
 10037ca:	bd38      	pop	{r3, r4, r5, pc}
 10037cc:	20000408 	.word	0x20000408
 10037d0:	200003d4 	.word	0x200003d4

010037d4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 10037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10037d6:	4604      	mov	r4, r0
 10037d8:	460d      	mov	r5, r1
	__asm__ volatile(
 10037da:	f04f 0320 	mov.w	r3, #32
 10037de:	f3ef 8711 	mrs	r7, BASEPRI
 10037e2:	f383 8812 	msr	BASEPRI_MAX, r3
 10037e6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 10037ea:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
 10037ec:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
 10037f0:	f240 30e7 	movw	r0, #999	; 0x3e7
 10037f4:	4e0d      	ldr	r6, [pc, #52]	; (100382c <k_sched_time_slice_set+0x58>)
 10037f6:	2300      	movs	r3, #0
 10037f8:	6131      	str	r1, [r6, #16]
 10037fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 10037fe:	fbe4 010c 	umlal	r0, r1, r4, ip
 1003802:	f7fc fc59 	bl	10000b8 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 1003806:	2c00      	cmp	r4, #0
 1003808:	4b09      	ldr	r3, [pc, #36]	; (1003830 <k_sched_time_slice_set+0x5c>)
 100380a:	dc0a      	bgt.n	1003822 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
 100380c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
 100380e:	4b09      	ldr	r3, [pc, #36]	; (1003834 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
 1003810:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
 1003812:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
 1003814:	f7ff ffca 	bl	10037ac <z_reset_time_slice>
	__asm__ volatile(
 1003818:	f387 8811 	msr	BASEPRI, r7
 100381c:	f3bf 8f6f 	isb	sy
	}
}
 1003820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
 1003822:	2802      	cmp	r0, #2
 1003824:	bfb8      	it	lt
 1003826:	2002      	movlt	r0, #2
 1003828:	e7f0      	b.n	100380c <k_sched_time_slice_set+0x38>
 100382a:	bf00      	nop
 100382c:	200003d4 	.word	0x200003d4
 1003830:	20000408 	.word	0x20000408
 1003834:	20000404 	.word	0x20000404

01003838 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 1003838:	b949      	cbnz	r1, 100384e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 100383a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 100383e:	b930      	cbnz	r0, 100384e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 1003840:	4b05      	ldr	r3, [pc, #20]	; (1003858 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 1003842:	699a      	ldr	r2, [r3, #24]
 1003844:	689b      	ldr	r3, [r3, #8]
 1003846:	429a      	cmp	r2, r3
 1003848:	d001      	beq.n	100384e <z_reschedule+0x16>
	ret = arch_swap(key);
 100384a:	f7fd bb13 	b.w	1000e74 <arch_swap>
 100384e:	f381 8811 	msr	BASEPRI, r1
 1003852:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
 1003856:	4770      	bx	lr
 1003858:	200003d4 	.word	0x200003d4

0100385c <k_sched_lock>:
	__asm__ volatile(
 100385c:	f04f 0320 	mov.w	r3, #32
 1003860:	f3ef 8111 	mrs	r1, BASEPRI
 1003864:	f383 8812 	msr	BASEPRI_MAX, r3
 1003868:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 100386c:	4b04      	ldr	r3, [pc, #16]	; (1003880 <k_sched_lock+0x24>)
 100386e:	689a      	ldr	r2, [r3, #8]
 1003870:	7bd3      	ldrb	r3, [r2, #15]
 1003872:	3b01      	subs	r3, #1
 1003874:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 1003876:	f381 8811 	msr	BASEPRI, r1
 100387a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 100387e:	4770      	bx	lr
 1003880:	200003d4 	.word	0x200003d4

01003884 <update_cache>:
{
 1003884:	b538      	push	{r3, r4, r5, lr}
 1003886:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 1003888:	480c      	ldr	r0, [pc, #48]	; (10038bc <update_cache+0x38>)
 100388a:	f001 f9c4 	bl	1004c16 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 100388e:	4d0c      	ldr	r5, [pc, #48]	; (10038c0 <update_cache+0x3c>)
 1003890:	4604      	mov	r4, r0
 1003892:	b900      	cbnz	r0, 1003896 <update_cache+0x12>
 1003894:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 1003896:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 1003898:	b94a      	cbnz	r2, 10038ae <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 100389a:	7b5a      	ldrb	r2, [r3, #13]
 100389c:	06d2      	lsls	r2, r2, #27
 100389e:	d106      	bne.n	10038ae <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 10038a0:	69a2      	ldr	r2, [r4, #24]
 10038a2:	b922      	cbnz	r2, 10038ae <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 10038a4:	89da      	ldrh	r2, [r3, #14]
 10038a6:	2a7f      	cmp	r2, #127	; 0x7f
 10038a8:	d901      	bls.n	10038ae <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 10038aa:	61ab      	str	r3, [r5, #24]
}
 10038ac:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 10038ae:	429c      	cmp	r4, r3
 10038b0:	d002      	beq.n	10038b8 <update_cache+0x34>
			z_reset_time_slice(thread);
 10038b2:	4620      	mov	r0, r4
 10038b4:	f7ff ff7a 	bl	10037ac <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 10038b8:	61ac      	str	r4, [r5, #24]
}
 10038ba:	e7f7      	b.n	10038ac <update_cache+0x28>
 10038bc:	200003f0 	.word	0x200003f0
 10038c0:	200003d4 	.word	0x200003d4

010038c4 <move_thread_to_end_of_prio_q>:
{
 10038c4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 10038c6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 10038ca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 10038cc:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 10038ce:	7b43      	ldrb	r3, [r0, #13]
 10038d0:	da04      	bge.n	10038dc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 10038d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 10038d6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 10038d8:	f001 f965 	bl	1004ba6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 10038dc:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 10038de:	4a15      	ldr	r2, [pc, #84]	; (1003934 <move_thread_to_end_of_prio_q+0x70>)
 10038e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 10038e4:	734b      	strb	r3, [r1, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10038e6:	f102 051c 	add.w	r5, r2, #28
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 10038ea:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10038ee:	42ab      	cmp	r3, r5
 10038f0:	d01b      	beq.n	100392a <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 10038f2:	b1d3      	cbz	r3, 100392a <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 10038f4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 10038f8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 10038fc:	4286      	cmp	r6, r0
 10038fe:	d00f      	beq.n	1003920 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 1003900:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 1003902:	2800      	cmp	r0, #0
 1003904:	dd0c      	ble.n	1003920 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 1003906:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 1003908:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 100390c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 100390e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 1003910:	6890      	ldr	r0, [r2, #8]
}
 1003912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 1003916:	1a43      	subs	r3, r0, r1
 1003918:	4258      	negs	r0, r3
 100391a:	4158      	adcs	r0, r3
 100391c:	f7ff bfb2 	b.w	1003884 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 1003920:	42a3      	cmp	r3, r4
 1003922:	d002      	beq.n	100392a <move_thread_to_end_of_prio_q+0x66>
 1003924:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1003926:	2b00      	cmp	r3, #0
 1003928:	d1e6      	bne.n	10038f8 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 100392a:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 100392e:	6021      	str	r1, [r4, #0]
	list->tail = node;
 1003930:	6211      	str	r1, [r2, #32]
}
 1003932:	e7ed      	b.n	1003910 <move_thread_to_end_of_prio_q+0x4c>
 1003934:	200003d4 	.word	0x200003d4

01003938 <z_time_slice>:
{
 1003938:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 100393a:	f04f 0320 	mov.w	r3, #32
 100393e:	f3ef 8511 	mrs	r5, BASEPRI
 1003942:	f383 8812 	msr	BASEPRI_MAX, r3
 1003946:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 100394a:	4b17      	ldr	r3, [pc, #92]	; (10039a8 <z_time_slice+0x70>)
 100394c:	4a17      	ldr	r2, [pc, #92]	; (10039ac <z_time_slice+0x74>)
 100394e:	689c      	ldr	r4, [r3, #8]
 1003950:	6811      	ldr	r1, [r2, #0]
 1003952:	428c      	cmp	r4, r1
 1003954:	d107      	bne.n	1003966 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 1003956:	4620      	mov	r0, r4
 1003958:	f7ff ff28 	bl	10037ac <z_reset_time_slice>
	__asm__ volatile(
 100395c:	f385 8811 	msr	BASEPRI, r5
 1003960:	f3bf 8f6f 	isb	sy
}
 1003964:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 1003966:	2100      	movs	r1, #0
 1003968:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 100396a:	4a11      	ldr	r2, [pc, #68]	; (10039b0 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 100396c:	6812      	ldr	r2, [r2, #0]
 100396e:	b1c2      	cbz	r2, 10039a2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 1003970:	89e2      	ldrh	r2, [r4, #14]
 1003972:	2a7f      	cmp	r2, #127	; 0x7f
 1003974:	d815      	bhi.n	10039a2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 1003976:	7b62      	ldrb	r2, [r4, #13]
 1003978:	06d2      	lsls	r2, r2, #27
 100397a:	d112      	bne.n	10039a2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 100397c:	4a0d      	ldr	r2, [pc, #52]	; (10039b4 <z_time_slice+0x7c>)
 100397e:	f994 100e 	ldrsb.w	r1, [r4, #14]
 1003982:	6812      	ldr	r2, [r2, #0]
 1003984:	4291      	cmp	r1, r2
 1003986:	db0c      	blt.n	10039a2 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
 1003988:	4a0b      	ldr	r2, [pc, #44]	; (10039b8 <z_time_slice+0x80>)
 100398a:	4294      	cmp	r4, r2
 100398c:	d009      	beq.n	10039a2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 100398e:	691a      	ldr	r2, [r3, #16]
 1003990:	4282      	cmp	r2, r0
 1003992:	dc03      	bgt.n	100399c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 1003994:	4620      	mov	r0, r4
 1003996:	f7ff ff95 	bl	10038c4 <move_thread_to_end_of_prio_q>
 100399a:	e7dc      	b.n	1003956 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 100399c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 100399e:	611a      	str	r2, [r3, #16]
 10039a0:	e7dc      	b.n	100395c <z_time_slice+0x24>
 10039a2:	2200      	movs	r2, #0
 10039a4:	e7fb      	b.n	100399e <z_time_slice+0x66>
 10039a6:	bf00      	nop
 10039a8:	200003d4 	.word	0x200003d4
 10039ac:	20000400 	.word	0x20000400
 10039b0:	20000408 	.word	0x20000408
 10039b4:	20000404 	.word	0x20000404
 10039b8:	20000130 	.word	0x20000130

010039bc <ready_thread>:
{
 10039bc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 10039be:	f990 200d 	ldrsb.w	r2, [r0, #13]
 10039c2:	7b43      	ldrb	r3, [r0, #13]
 10039c4:	2a00      	cmp	r2, #0
 10039c6:	db2a      	blt.n	1003a1e <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 10039c8:	06da      	lsls	r2, r3, #27
 10039ca:	d128      	bne.n	1003a1e <ready_thread+0x62>
 10039cc:	6982      	ldr	r2, [r0, #24]
 10039ce:	bb32      	cbnz	r2, 1003a1e <ready_thread+0x62>
	return list->head == list;
 10039d0:	4a14      	ldr	r2, [pc, #80]	; (1003a24 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 10039d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 10039d6:	7343      	strb	r3, [r0, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10039d8:	f102 051c 	add.w	r5, r2, #28
	return (node == list->tail) ? NULL : node->next;
 10039dc:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10039e0:	42ab      	cmp	r3, r5
 10039e2:	d017      	beq.n	1003a14 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 10039e4:	b1b3      	cbz	r3, 1003a14 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 10039e6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 10039ea:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 10039ee:	428e      	cmp	r6, r1
 10039f0:	d00b      	beq.n	1003a0a <ready_thread+0x4e>
		return b2 - b1;
 10039f2:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 10039f4:	2900      	cmp	r1, #0
 10039f6:	dd08      	ble.n	1003a0a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 10039f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 10039fa:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 10039fe:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 1003a00:	6058      	str	r0, [r3, #4]
		update_cache(0);
 1003a02:	2000      	movs	r0, #0
}
 1003a04:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 1003a06:	f7ff bf3d 	b.w	1003884 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 1003a0a:	42a3      	cmp	r3, r4
 1003a0c:	d002      	beq.n	1003a14 <ready_thread+0x58>
 1003a0e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1003a10:	2b00      	cmp	r3, #0
 1003a12:	d1ea      	bne.n	10039ea <ready_thread+0x2e>
	node->prev = tail;
 1003a14:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 1003a18:	6020      	str	r0, [r4, #0]
	list->tail = node;
 1003a1a:	6210      	str	r0, [r2, #32]
}
 1003a1c:	e7f1      	b.n	1003a02 <ready_thread+0x46>
}
 1003a1e:	bc70      	pop	{r4, r5, r6}
 1003a20:	4770      	bx	lr
 1003a22:	bf00      	nop
 1003a24:	200003d4 	.word	0x200003d4

01003a28 <z_sched_start>:
{
 1003a28:	b510      	push	{r4, lr}
	__asm__ volatile(
 1003a2a:	f04f 0220 	mov.w	r2, #32
 1003a2e:	f3ef 8411 	mrs	r4, BASEPRI
 1003a32:	f382 8812 	msr	BASEPRI_MAX, r2
 1003a36:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 1003a3a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 1003a3c:	0751      	lsls	r1, r2, #29
 1003a3e:	d404      	bmi.n	1003a4a <z_sched_start+0x22>
	__asm__ volatile(
 1003a40:	f384 8811 	msr	BASEPRI, r4
 1003a44:	f3bf 8f6f 	isb	sy
}
 1003a48:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 1003a4a:	f022 0204 	bic.w	r2, r2, #4
 1003a4e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 1003a50:	f7ff ffb4 	bl	10039bc <ready_thread>
	z_reschedule(&sched_spinlock, key);
 1003a54:	4621      	mov	r1, r4
}
 1003a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 1003a5a:	4801      	ldr	r0, [pc, #4]	; (1003a60 <z_sched_start+0x38>)
 1003a5c:	f7ff beec 	b.w	1003838 <z_reschedule>
 1003a60:	20000417 	.word	0x20000417

01003a64 <unready_thread>:
{
 1003a64:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 1003a66:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 1003a6a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 1003a6c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 1003a6e:	7b43      	ldrb	r3, [r0, #13]
 1003a70:	da04      	bge.n	1003a7c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1003a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 1003a76:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 1003a78:	f001 f895 	bl	1004ba6 <sys_dlist_remove>
	update_cache(thread == _current);
 1003a7c:	4b04      	ldr	r3, [pc, #16]	; (1003a90 <unready_thread+0x2c>)
 1003a7e:	6898      	ldr	r0, [r3, #8]
 1003a80:	1a43      	subs	r3, r0, r1
 1003a82:	4258      	negs	r0, r3
 1003a84:	4158      	adcs	r0, r3
}
 1003a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 1003a8a:	f7ff befb 	b.w	1003884 <update_cache>
 1003a8e:	bf00      	nop
 1003a90:	200003d4 	.word	0x200003d4

01003a94 <pend>:
{
 1003a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1003a98:	4606      	mov	r6, r0
 1003a9a:	4615      	mov	r5, r2
 1003a9c:	461c      	mov	r4, r3
	__asm__ volatile(
 1003a9e:	f04f 0320 	mov.w	r3, #32
 1003aa2:	f3ef 8711 	mrs	r7, BASEPRI
 1003aa6:	f383 8812 	msr	BASEPRI_MAX, r3
 1003aaa:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 1003aae:	f001 f8ea 	bl	1004c86 <add_to_waitq_locked>
	__asm__ volatile(
 1003ab2:	f387 8811 	msr	BASEPRI, r7
 1003ab6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1003aba:	f1b4 3fff 	cmp.w	r4, #4294967295
 1003abe:	bf08      	it	eq
 1003ac0:	f1b5 3fff 	cmpeq.w	r5, #4294967295
 1003ac4:	d008      	beq.n	1003ad8 <pend+0x44>
 1003ac6:	462a      	mov	r2, r5
 1003ac8:	4623      	mov	r3, r4
 1003aca:	f106 0018 	add.w	r0, r6, #24
 1003ace:	4903      	ldr	r1, [pc, #12]	; (1003adc <pend+0x48>)
}
 1003ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 1003ad4:	f000 ba38 	b.w	1003f48 <z_add_timeout>
 1003ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1003adc:	01004c43 	.word	0x01004c43

01003ae0 <z_pend_curr>:
{
 1003ae0:	b510      	push	{r4, lr}
 1003ae2:	460c      	mov	r4, r1
	pending_current = _current;
 1003ae4:	4b06      	ldr	r3, [pc, #24]	; (1003b00 <z_pend_curr+0x20>)
{
 1003ae6:	4611      	mov	r1, r2
	pending_current = _current;
 1003ae8:	6898      	ldr	r0, [r3, #8]
 1003aea:	4b06      	ldr	r3, [pc, #24]	; (1003b04 <z_pend_curr+0x24>)
 1003aec:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 1003aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1003af2:	f7ff ffcf 	bl	1003a94 <pend>
 1003af6:	4620      	mov	r0, r4
}
 1003af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1003afc:	f7fd b9ba 	b.w	1000e74 <arch_swap>
 1003b00:	200003d4 	.word	0x200003d4
 1003b04:	20000400 	.word	0x20000400

01003b08 <z_set_prio>:
{
 1003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1003b0a:	4604      	mov	r4, r0
	__asm__ volatile(
 1003b0c:	f04f 0320 	mov.w	r3, #32
 1003b10:	f3ef 8611 	mrs	r6, BASEPRI
 1003b14:	f383 8812 	msr	BASEPRI_MAX, r3
 1003b18:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 1003b1c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
 1003b1e:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 1003b20:	06da      	lsls	r2, r3, #27
 1003b22:	d133      	bne.n	1003b8c <z_set_prio+0x84>
		if (need_sched) {
 1003b24:	6982      	ldr	r2, [r0, #24]
 1003b26:	bb8a      	cbnz	r2, 1003b8c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1003b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 1003b2c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 1003b2e:	f001 f83a 	bl	1004ba6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 1003b32:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 1003b34:	4a17      	ldr	r2, [pc, #92]	; (1003b94 <z_set_prio+0x8c>)
 1003b36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 1003b3a:	7343      	strb	r3, [r0, #13]
				thread->base.prio = prio;
 1003b3c:	7381      	strb	r1, [r0, #14]
 1003b3e:	4610      	mov	r0, r2
 1003b40:	f850 3f1c 	ldr.w	r3, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1003b44:	4283      	cmp	r3, r0
 1003b46:	d01b      	beq.n	1003b80 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1003b48:	b1d3      	cbz	r3, 1003b80 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
 1003b4a:	6a17      	ldr	r7, [r2, #32]
	int32_t b2 = thread_2->base.prio;
 1003b4c:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
 1003b50:	42a9      	cmp	r1, r5
 1003b52:	d010      	beq.n	1003b76 <z_set_prio+0x6e>
		return b2 - b1;
 1003b54:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 1003b56:	2d00      	cmp	r5, #0
 1003b58:	dd0d      	ble.n	1003b76 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
 1003b5a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 1003b5c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 1003b60:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 1003b62:	605c      	str	r4, [r3, #4]
			update_cache(1);
 1003b64:	2001      	movs	r0, #1
 1003b66:	f7ff fe8d 	bl	1003884 <update_cache>
 1003b6a:	2001      	movs	r0, #1
	__asm__ volatile(
 1003b6c:	f386 8811 	msr	BASEPRI, r6
 1003b70:	f3bf 8f6f 	isb	sy
}
 1003b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 1003b76:	42bb      	cmp	r3, r7
 1003b78:	d002      	beq.n	1003b80 <z_set_prio+0x78>
 1003b7a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1003b7c:	2b00      	cmp	r3, #0
 1003b7e:	d1e5      	bne.n	1003b4c <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
 1003b80:	6a13      	ldr	r3, [r2, #32]
	node->prev = tail;
 1003b82:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
 1003b86:	601c      	str	r4, [r3, #0]
	list->tail = node;
 1003b88:	6214      	str	r4, [r2, #32]
}
 1003b8a:	e7eb      	b.n	1003b64 <z_set_prio+0x5c>
			thread->base.prio = prio;
 1003b8c:	2000      	movs	r0, #0
 1003b8e:	73a1      	strb	r1, [r4, #14]
 1003b90:	e7ec      	b.n	1003b6c <z_set_prio+0x64>
 1003b92:	bf00      	nop
 1003b94:	200003d4 	.word	0x200003d4

01003b98 <z_impl_k_thread_suspend>:
{
 1003b98:	b570      	push	{r4, r5, r6, lr}
 1003b9a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 1003b9c:	3018      	adds	r0, #24
 1003b9e:	f001 f8e6 	bl	1004d6e <z_abort_timeout>
	__asm__ volatile(
 1003ba2:	f04f 0320 	mov.w	r3, #32
 1003ba6:	f3ef 8611 	mrs	r6, BASEPRI
 1003baa:	f383 8812 	msr	BASEPRI_MAX, r3
 1003bae:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 1003bb2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 1003bb6:	7b63      	ldrb	r3, [r4, #13]
 1003bb8:	2a00      	cmp	r2, #0
 1003bba:	da05      	bge.n	1003bc8 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1003bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
 1003bc0:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1003bc2:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 1003bc4:	f000 ffef 	bl	1004ba6 <sys_dlist_remove>
		update_cache(thread == _current);
 1003bc8:	4d0b      	ldr	r5, [pc, #44]	; (1003bf8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 1003bca:	7b63      	ldrb	r3, [r4, #13]
 1003bcc:	68a8      	ldr	r0, [r5, #8]
 1003bce:	f043 0310 	orr.w	r3, r3, #16
 1003bd2:	7363      	strb	r3, [r4, #13]
 1003bd4:	1b03      	subs	r3, r0, r4
 1003bd6:	4258      	negs	r0, r3
 1003bd8:	4158      	adcs	r0, r3
 1003bda:	f7ff fe53 	bl	1003884 <update_cache>
	__asm__ volatile(
 1003bde:	f386 8811 	msr	BASEPRI, r6
 1003be2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 1003be6:	68ab      	ldr	r3, [r5, #8]
 1003be8:	42a3      	cmp	r3, r4
 1003bea:	d103      	bne.n	1003bf4 <z_impl_k_thread_suspend+0x5c>
}
 1003bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 1003bf0:	f001 b807 	b.w	1004c02 <z_reschedule_unlocked>
}
 1003bf4:	bd70      	pop	{r4, r5, r6, pc}
 1003bf6:	bf00      	nop
 1003bf8:	200003d4 	.word	0x200003d4

01003bfc <k_sched_unlock>:
{
 1003bfc:	b510      	push	{r4, lr}
	__asm__ volatile(
 1003bfe:	f04f 0320 	mov.w	r3, #32
 1003c02:	f3ef 8411 	mrs	r4, BASEPRI
 1003c06:	f383 8812 	msr	BASEPRI_MAX, r3
 1003c0a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 1003c0e:	4b08      	ldr	r3, [pc, #32]	; (1003c30 <k_sched_unlock+0x34>)
		update_cache(0);
 1003c10:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 1003c12:	689a      	ldr	r2, [r3, #8]
 1003c14:	7bd3      	ldrb	r3, [r2, #15]
 1003c16:	3301      	adds	r3, #1
 1003c18:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 1003c1a:	f7ff fe33 	bl	1003884 <update_cache>
	__asm__ volatile(
 1003c1e:	f384 8811 	msr	BASEPRI, r4
 1003c22:	f3bf 8f6f 	isb	sy
}
 1003c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 1003c2a:	f000 bfea 	b.w	1004c02 <z_reschedule_unlocked>
 1003c2e:	bf00      	nop
 1003c30:	200003d4 	.word	0x200003d4

01003c34 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 1003c34:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
 1003c36:	4b04      	ldr	r3, [pc, #16]	; (1003c48 <z_sched_init+0x14>)
 1003c38:	4608      	mov	r0, r1
 1003c3a:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 1003c3e:	e9c3 2207 	strd	r2, r2, [r3, #28]
 1003c42:	f7ff bdc7 	b.w	10037d4 <k_sched_time_slice_set>
 1003c46:	bf00      	nop
 1003c48:	200003d4 	.word	0x200003d4

01003c4c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 1003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 1003c4e:	f04f 0320 	mov.w	r3, #32
 1003c52:	f3ef 8511 	mrs	r5, BASEPRI
 1003c56:	f383 8812 	msr	BASEPRI_MAX, r3
 1003c5a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 1003c5e:	491a      	ldr	r1, [pc, #104]	; (1003cc8 <z_impl_k_yield+0x7c>)
 1003c60:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1003c62:	7b43      	ldrb	r3, [r0, #13]
 1003c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 1003c68:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 1003c6a:	f000 ff9c 	bl	1004ba6 <sys_dlist_remove>
	return list->head == list;
 1003c6e:	4608      	mov	r0, r1
	}
	queue_thread(_current);
 1003c70:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 1003c72:	7b5a      	ldrb	r2, [r3, #13]
 1003c74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 1003c78:	735a      	strb	r2, [r3, #13]
 1003c7a:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1003c7e:	4282      	cmp	r2, r0
 1003c80:	d01c      	beq.n	1003cbc <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1003c82:	b1da      	cbz	r2, 1003cbc <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 1003c84:	6a0f      	ldr	r7, [r1, #32]
	int32_t b1 = thread_1->base.prio;
 1003c86:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 1003c8a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 1003c8e:	42a6      	cmp	r6, r4
 1003c90:	d00f      	beq.n	1003cb2 <z_impl_k_yield+0x66>
		return b2 - b1;
 1003c92:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 1003c94:	2c00      	cmp	r4, #0
 1003c96:	dd0c      	ble.n	1003cb2 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 1003c98:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 1003c9a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 1003c9e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 1003ca0:	6053      	str	r3, [r2, #4]
	update_cache(1);
 1003ca2:	2001      	movs	r0, #1
 1003ca4:	f7ff fdee 	bl	1003884 <update_cache>
 1003ca8:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 1003caa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1003cae:	f7fd b8e1 	b.w	1000e74 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 1003cb2:	42ba      	cmp	r2, r7
 1003cb4:	d002      	beq.n	1003cbc <z_impl_k_yield+0x70>
 1003cb6:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1003cb8:	2a00      	cmp	r2, #0
 1003cba:	d1e6      	bne.n	1003c8a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 1003cbc:	6a0a      	ldr	r2, [r1, #32]
	node->prev = tail;
 1003cbe:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 1003cc2:	6013      	str	r3, [r2, #0]
	list->tail = node;
 1003cc4:	620b      	str	r3, [r1, #32]
}
 1003cc6:	e7ec      	b.n	1003ca2 <z_impl_k_yield+0x56>
 1003cc8:	200003d4 	.word	0x200003d4

01003ccc <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 1003ccc:	ea50 0301 	orrs.w	r3, r0, r1
{
 1003cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1003cd4:	4605      	mov	r5, r0
 1003cd6:	460e      	mov	r6, r1
	if (ticks == 0) {
 1003cd8:	d103      	bne.n	1003ce2 <z_tick_sleep+0x16>
	z_impl_k_yield();
 1003cda:	f7ff ffb7 	bl	1003c4c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 1003cde:	2000      	movs	r0, #0
 1003ce0:	e033      	b.n	1003d4a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 1003ce2:	f06f 0401 	mvn.w	r4, #1
 1003ce6:	f04f 33ff 	mov.w	r3, #4294967295
 1003cea:	1a24      	subs	r4, r4, r0
 1003cec:	eb63 0301 	sbc.w	r3, r3, r1
 1003cf0:	2c01      	cmp	r4, #1
 1003cf2:	f173 0300 	sbcs.w	r3, r3, #0
 1003cf6:	da02      	bge.n	1003cfe <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 1003cf8:	f001 f869 	bl	1004dce <sys_clock_tick_get_32>
 1003cfc:	1944      	adds	r4, r0, r5
 1003cfe:	f04f 0320 	mov.w	r3, #32
 1003d02:	f3ef 8811 	mrs	r8, BASEPRI
 1003d06:	f383 8812 	msr	BASEPRI_MAX, r3
 1003d0a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 1003d0e:	4f10      	ldr	r7, [pc, #64]	; (1003d50 <z_tick_sleep+0x84>)
 1003d10:	4b10      	ldr	r3, [pc, #64]	; (1003d54 <z_tick_sleep+0x88>)
 1003d12:	68b8      	ldr	r0, [r7, #8]
 1003d14:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 1003d16:	f7ff fea5 	bl	1003a64 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 1003d1a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 1003d1c:	490e      	ldr	r1, [pc, #56]	; (1003d58 <z_tick_sleep+0x8c>)
 1003d1e:	462a      	mov	r2, r5
 1003d20:	4633      	mov	r3, r6
 1003d22:	3018      	adds	r0, #24
 1003d24:	f000 f910 	bl	1003f48 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 1003d28:	68ba      	ldr	r2, [r7, #8]
 1003d2a:	4640      	mov	r0, r8
 1003d2c:	7b53      	ldrb	r3, [r2, #13]
 1003d2e:	f043 0310 	orr.w	r3, r3, #16
 1003d32:	7353      	strb	r3, [r2, #13]
 1003d34:	f7fd f89e 	bl	1000e74 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 1003d38:	f001 f849 	bl	1004dce <sys_clock_tick_get_32>
 1003d3c:	1a20      	subs	r0, r4, r0
 1003d3e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 1003d42:	2801      	cmp	r0, #1
 1003d44:	f173 0300 	sbcs.w	r3, r3, #0
 1003d48:	dbc9      	blt.n	1003cde <z_tick_sleep+0x12>
}
 1003d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1003d4e:	bf00      	nop
 1003d50:	200003d4 	.word	0x200003d4
 1003d54:	20000400 	.word	0x20000400
 1003d58:	01004c43 	.word	0x01004c43

01003d5c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1003d5c:	f1b1 3fff 	cmp.w	r1, #4294967295
 1003d60:	bf08      	it	eq
 1003d62:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 1003d66:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1003d68:	d106      	bne.n	1003d78 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 1003d6a:	4b08      	ldr	r3, [pc, #32]	; (1003d8c <z_impl_k_sleep+0x30>)
 1003d6c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 1003d6e:	f7ff ff13 	bl	1003b98 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 1003d72:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 1003d76:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 1003d78:	f7ff ffa8 	bl	1003ccc <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
 1003d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 1003d80:	fb80 0303 	smull	r0, r3, r0, r3
 1003d84:	0bc0      	lsrs	r0, r0, #15
 1003d86:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
 1003d8a:	e7f4      	b.n	1003d76 <z_impl_k_sleep+0x1a>
 1003d8c:	200003d4 	.word	0x200003d4

01003d90 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 1003d90:	4b01      	ldr	r3, [pc, #4]	; (1003d98 <z_impl_z_current_get+0x8>)
 1003d92:	6898      	ldr	r0, [r3, #8]
 1003d94:	4770      	bx	lr
 1003d96:	bf00      	nop
 1003d98:	200003d4 	.word	0x200003d4

01003d9c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 1003d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1003da0:	4604      	mov	r4, r0
 1003da2:	f04f 0320 	mov.w	r3, #32
 1003da6:	f3ef 8611 	mrs	r6, BASEPRI
 1003daa:	f383 8812 	msr	BASEPRI_MAX, r3
 1003dae:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 1003db2:	7b03      	ldrb	r3, [r0, #12]
 1003db4:	07d9      	lsls	r1, r3, #31
 1003db6:	d50b      	bpl.n	1003dd0 <z_thread_abort+0x34>
	__asm__ volatile(
 1003db8:	f386 8811 	msr	BASEPRI, r6
 1003dbc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 1003dc0:	4040      	eors	r0, r0
 1003dc2:	f380 8811 	msr	BASEPRI, r0
 1003dc6:	f04f 0004 	mov.w	r0, #4
 1003dca:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 1003dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 1003dd0:	7b43      	ldrb	r3, [r0, #13]
 1003dd2:	071a      	lsls	r2, r3, #28
 1003dd4:	d504      	bpl.n	1003de0 <z_thread_abort+0x44>
 1003dd6:	f386 8811 	msr	BASEPRI, r6
 1003dda:	f3bf 8f6f 	isb	sy
 1003dde:	e7f5      	b.n	1003dcc <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 1003de0:	f023 0220 	bic.w	r2, r3, #32
 1003de4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 1003de8:	09d2      	lsrs	r2, r2, #7
 1003dea:	d120      	bne.n	1003e2e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 1003dec:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 1003dee:	68a3      	ldr	r3, [r4, #8]
 1003df0:	b113      	cbz	r3, 1003df8 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 1003df2:	4620      	mov	r0, r4
 1003df4:	f000 fedf 	bl	1004bb6 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 1003df8:	f104 0018 	add.w	r0, r4, #24
 1003dfc:	f000 ffb7 	bl	1004d6e <z_abort_timeout>
 1003e00:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 1003e04:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
 1003e08:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1003e0a:	42bd      	cmp	r5, r7
 1003e0c:	d000      	beq.n	1003e10 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 1003e0e:	b9b5      	cbnz	r5, 1003e3e <z_thread_abort+0xa2>
		update_cache(1);
 1003e10:	2001      	movs	r0, #1
 1003e12:	f7ff fd37 	bl	1003884 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 1003e16:	4b10      	ldr	r3, [pc, #64]	; (1003e58 <z_thread_abort+0xbc>)
 1003e18:	689b      	ldr	r3, [r3, #8]
 1003e1a:	42a3      	cmp	r3, r4
 1003e1c:	d1db      	bne.n	1003dd6 <z_thread_abort+0x3a>
 1003e1e:	f3ef 8305 	mrs	r3, IPSR
 1003e22:	2b00      	cmp	r3, #0
 1003e24:	d1d7      	bne.n	1003dd6 <z_thread_abort+0x3a>
 1003e26:	4630      	mov	r0, r6
 1003e28:	f7fd f824 	bl	1000e74 <arch_swap>
	return ret;
 1003e2c:	e7d3      	b.n	1003dd6 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1003e2e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 1003e32:	f043 0308 	orr.w	r3, r3, #8
 1003e36:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 1003e38:	f000 feb5 	bl	1004ba6 <sys_dlist_remove>
}
 1003e3c:	e7d7      	b.n	1003dee <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 1003e3e:	4628      	mov	r0, r5
 1003e40:	f000 feb9 	bl	1004bb6 <unpend_thread_no_timeout>
 1003e44:	f105 0018 	add.w	r0, r5, #24
 1003e48:	f000 ff91 	bl	1004d6e <z_abort_timeout>
		ready_thread(thread);
 1003e4c:	4628      	mov	r0, r5
 1003e4e:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
 1003e52:	f7ff fdb3 	bl	10039bc <ready_thread>
 1003e56:	e7d7      	b.n	1003e08 <z_thread_abort+0x6c>
 1003e58:	200003d4 	.word	0x200003d4

01003e5c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 1003e5c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 1003e5e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 1003e62:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 1003e64:	e9cd 6700 	strd	r6, r7, [sp]
 1003e68:	f7ff fe3a 	bl	1003ae0 <z_pend_curr>

	if (data != NULL) {
 1003e6c:	b11c      	cbz	r4, 1003e76 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 1003e6e:	4b03      	ldr	r3, [pc, #12]	; (1003e7c <z_sched_wait+0x20>)
 1003e70:	689b      	ldr	r3, [r3, #8]
 1003e72:	695b      	ldr	r3, [r3, #20]
 1003e74:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 1003e76:	b002      	add	sp, #8
 1003e78:	bdd0      	pop	{r4, r6, r7, pc}
 1003e7a:	bf00      	nop
 1003e7c:	200003d4 	.word	0x200003d4

01003e80 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 1003e80:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 1003e82:	4806      	ldr	r0, [pc, #24]	; (1003e9c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 1003e84:	4a06      	ldr	r2, [pc, #24]	; (1003ea0 <z_data_copy+0x20>)
 1003e86:	4907      	ldr	r1, [pc, #28]	; (1003ea4 <z_data_copy+0x24>)
 1003e88:	1a12      	subs	r2, r2, r0
 1003e8a:	f000 fe21 	bl	1004ad0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 1003e8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 1003e92:	4a05      	ldr	r2, [pc, #20]	; (1003ea8 <z_data_copy+0x28>)
 1003e94:	4905      	ldr	r1, [pc, #20]	; (1003eac <z_data_copy+0x2c>)
 1003e96:	4806      	ldr	r0, [pc, #24]	; (1003eb0 <z_data_copy+0x30>)
 1003e98:	f000 be1a 	b.w	1004ad0 <z_early_memcpy>
 1003e9c:	20000000 	.word	0x20000000
 1003ea0:	20000110 	.word	0x20000110
 1003ea4:	010051fc 	.word	0x010051fc
 1003ea8:	00000000 	.word	0x00000000
 1003eac:	010051fc 	.word	0x010051fc
 1003eb0:	20000000 	.word	0x20000000

01003eb4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 1003eb4:	4b03      	ldr	r3, [pc, #12]	; (1003ec4 <elapsed+0x10>)
 1003eb6:	681b      	ldr	r3, [r3, #0]
 1003eb8:	b90b      	cbnz	r3, 1003ebe <elapsed+0xa>
 1003eba:	f7fe bb6f 	b.w	100259c <sys_clock_elapsed>
}
 1003ebe:	2000      	movs	r0, #0
 1003ec0:	4770      	bx	lr
 1003ec2:	bf00      	nop
 1003ec4:	2000040c 	.word	0x2000040c

01003ec8 <next_timeout>:
	return list->head == list;
 1003ec8:	4b10      	ldr	r3, [pc, #64]	; (1003f0c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
 1003eca:	b510      	push	{r4, lr}
 1003ecc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1003ece:	429c      	cmp	r4, r3
 1003ed0:	bf08      	it	eq
 1003ed2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 1003ed4:	f7ff ffee 	bl	1003eb4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 1003ed8:	b1a4      	cbz	r4, 1003f04 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 1003eda:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 1003ede:	1a1b      	subs	r3, r3, r0
 1003ee0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 1003ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 1003ee8:	f170 0200 	sbcs.w	r2, r0, #0
 1003eec:	da0a      	bge.n	1003f04 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 1003eee:	2800      	cmp	r0, #0
 1003ef0:	bfac      	ite	ge
 1003ef2:	4618      	movge	r0, r3
 1003ef4:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 1003ef6:	4b06      	ldr	r3, [pc, #24]	; (1003f10 <next_timeout+0x48>)
 1003ef8:	691b      	ldr	r3, [r3, #16]
 1003efa:	b113      	cbz	r3, 1003f02 <next_timeout+0x3a>
 1003efc:	4298      	cmp	r0, r3
 1003efe:	bfa8      	it	ge
 1003f00:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 1003f02:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
 1003f04:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 1003f08:	e7f5      	b.n	1003ef6 <next_timeout+0x2e>
 1003f0a:	bf00      	nop
 1003f0c:	200000b8 	.word	0x200000b8
 1003f10:	200003d4 	.word	0x200003d4

01003f14 <remove_timeout>:
{
 1003f14:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 1003f16:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 1003f18:	b168      	cbz	r0, 1003f36 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 1003f1a:	4a0a      	ldr	r2, [pc, #40]	; (1003f44 <remove_timeout+0x30>)
 1003f1c:	6852      	ldr	r2, [r2, #4]
 1003f1e:	4290      	cmp	r0, r2
 1003f20:	d009      	beq.n	1003f36 <remove_timeout+0x22>
	if (next(t) != NULL) {
 1003f22:	b143      	cbz	r3, 1003f36 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 1003f24:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 1003f28:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 1003f2c:	1912      	adds	r2, r2, r4
 1003f2e:	eb41 0105 	adc.w	r1, r1, r5
 1003f32:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 1003f36:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 1003f38:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 1003f3a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 1003f3c:	2300      	movs	r3, #0
	node->prev = NULL;
 1003f3e:	e9c0 3300 	strd	r3, r3, [r0]
}
 1003f42:	bd30      	pop	{r4, r5, pc}
 1003f44:	200000b8 	.word	0x200000b8

01003f48 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1003f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 1003f4c:	bf08      	it	eq
 1003f4e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 1003f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1003f54:	4604      	mov	r4, r0
 1003f56:	461f      	mov	r7, r3
 1003f58:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1003f5a:	d067      	beq.n	100402c <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 1003f5c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 1003f5e:	f04f 0320 	mov.w	r3, #32
 1003f62:	f3ef 8611 	mrs	r6, BASEPRI
 1003f66:	f383 8812 	msr	BASEPRI_MAX, r3
 1003f6a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 1003f6e:	f06f 0201 	mvn.w	r2, #1
 1003f72:	f04f 3cff 	mov.w	ip, #4294967295
 1003f76:	1b53      	subs	r3, r2, r5
 1003f78:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 1003f7c:	2b00      	cmp	r3, #0
 1003f7e:	db1b      	blt.n	1003fb8 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 1003f80:	4b2b      	ldr	r3, [pc, #172]	; (1004030 <z_add_timeout+0xe8>)
 1003f82:	e9d3 1300 	ldrd	r1, r3, [r3]
 1003f86:	1a52      	subs	r2, r2, r1
 1003f88:	eb6c 0303 	sbc.w	r3, ip, r3
 1003f8c:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 1003f8e:	eb63 0307 	sbc.w	r3, r3, r7
 1003f92:	2d01      	cmp	r5, #1
 1003f94:	f173 0200 	sbcs.w	r2, r3, #0
 1003f98:	bfbc      	itt	lt
 1003f9a:	2501      	movlt	r5, #1
 1003f9c:	2300      	movlt	r3, #0
 1003f9e:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 1003fa2:	4824      	ldr	r0, [pc, #144]	; (1004034 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
 1003fa4:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1003fa8:	4283      	cmp	r3, r0
 1003faa:	d118      	bne.n	1003fde <z_add_timeout+0x96>
	node->prev = tail;
 1003fac:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 1003fb0:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 1003fb4:	6044      	str	r4, [r0, #4]
}
 1003fb6:	e026      	b.n	1004006 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 1003fb8:	f7ff ff7c 	bl	1003eb4 <elapsed>
 1003fbc:	3501      	adds	r5, #1
 1003fbe:	f147 0700 	adc.w	r7, r7, #0
 1003fc2:	182d      	adds	r5, r5, r0
 1003fc4:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 1003fc8:	e9c4 5704 	strd	r5, r7, [r4, #16]
 1003fcc:	e7e9      	b.n	1003fa2 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 1003fce:	1a52      	subs	r2, r2, r1
 1003fd0:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 1003fd4:	459c      	cmp	ip, r3
 1003fd6:	e9c4 2504 	strd	r2, r5, [r4, #16]
 1003fda:	d0e7      	beq.n	1003fac <z_add_timeout+0x64>
 1003fdc:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 1003fde:	2b00      	cmp	r3, #0
 1003fe0:	d0e4      	beq.n	1003fac <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 1003fe2:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 1003fe6:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 1003fea:	428a      	cmp	r2, r1
 1003fec:	eb75 0e07 	sbcs.w	lr, r5, r7
 1003ff0:	daed      	bge.n	1003fce <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 1003ff2:	1a8a      	subs	r2, r1, r2
 1003ff4:	eb67 0505 	sbc.w	r5, r7, r5
 1003ff8:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 1003ffc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 1003ffe:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 1004002:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 1004004:	605c      	str	r4, [r3, #4]
	return list->head == list;
 1004006:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1004008:	4283      	cmp	r3, r0
 100400a:	d00b      	beq.n	1004024 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 100400c:	429c      	cmp	r4, r3
 100400e:	d109      	bne.n	1004024 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 1004010:	f7ff ff5a 	bl	1003ec8 <next_timeout>

			if (next_time == 0 ||
 1004014:	b118      	cbz	r0, 100401e <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
 1004016:	4b08      	ldr	r3, [pc, #32]	; (1004038 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
 1004018:	691b      	ldr	r3, [r3, #16]
 100401a:	4283      	cmp	r3, r0
 100401c:	d002      	beq.n	1004024 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
 100401e:	2100      	movs	r1, #0
 1004020:	f7fe fa8c 	bl	100253c <sys_clock_set_timeout>
	__asm__ volatile(
 1004024:	f386 8811 	msr	BASEPRI, r6
 1004028:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 100402c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100402e:	bf00      	nop
 1004030:	20000230 	.word	0x20000230
 1004034:	200000b8 	.word	0x200000b8
 1004038:	200003d4 	.word	0x200003d4

0100403c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 100403c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1004040:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 1004042:	f7ff fc79 	bl	1003938 <z_time_slice>
	__asm__ volatile(
 1004046:	f04f 0320 	mov.w	r3, #32
 100404a:	f3ef 8511 	mrs	r5, BASEPRI
 100404e:	f383 8812 	msr	BASEPRI_MAX, r3
 1004052:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 1004056:	4f24      	ldr	r7, [pc, #144]	; (10040e8 <sys_clock_announce+0xac>)
	return list->head == list;
 1004058:	f8df 8090 	ldr.w	r8, [pc, #144]	; 10040ec <sys_clock_announce+0xb0>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 100405c:	4e24      	ldr	r6, [pc, #144]	; (10040f0 <sys_clock_announce+0xb4>)
	announce_remaining = ticks;
 100405e:	603c      	str	r4, [r7, #0]
 1004060:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 1004064:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1004066:	4540      	cmp	r0, r8
 1004068:	ea4f 71e3 	mov.w	r1, r3, asr #31
		curr_tick += dt;
 100406c:	e9d6 2e00 	ldrd	r2, lr, [r6]
 1004070:	d00b      	beq.n	100408a <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 1004072:	b150      	cbz	r0, 100408a <sys_clock_announce+0x4e>
 1004074:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
 1004078:	42a3      	cmp	r3, r4
 100407a:	eb71 090c 	sbcs.w	r9, r1, ip
 100407e:	da16      	bge.n	10040ae <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 1004080:	1ae4      	subs	r4, r4, r3
 1004082:	eb6c 0c01 	sbc.w	ip, ip, r1
 1004086:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
 100408a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 100408c:	189b      	adds	r3, r3, r2
 100408e:	eb4e 0101 	adc.w	r1, lr, r1
 1004092:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
 1004096:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
 1004098:	f7ff ff16 	bl	1003ec8 <next_timeout>
 100409c:	4621      	mov	r1, r4
 100409e:	f7fe fa4d 	bl	100253c <sys_clock_set_timeout>
	__asm__ volatile(
 10040a2:	f385 8811 	msr	BASEPRI, r5
 10040a6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 10040aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 10040ae:	18a2      	adds	r2, r4, r2
 10040b0:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
		t->dticks = 0;
 10040b4:	2300      	movs	r3, #0
		curr_tick += dt;
 10040b6:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
 10040ba:	2200      	movs	r2, #0
 10040bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
 10040c0:	f7ff ff28 	bl	1003f14 <remove_timeout>
 10040c4:	f385 8811 	msr	BASEPRI, r5
 10040c8:	f3bf 8f6f 	isb	sy
		t->fn(t);
 10040cc:	6883      	ldr	r3, [r0, #8]
 10040ce:	4798      	blx	r3
	__asm__ volatile(
 10040d0:	f04f 0320 	mov.w	r3, #32
 10040d4:	f3ef 8511 	mrs	r5, BASEPRI
 10040d8:	f383 8812 	msr	BASEPRI_MAX, r3
 10040dc:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 10040e0:	683b      	ldr	r3, [r7, #0]
 10040e2:	1b1b      	subs	r3, r3, r4
 10040e4:	603b      	str	r3, [r7, #0]
 10040e6:	e7bb      	b.n	1004060 <sys_clock_announce+0x24>
 10040e8:	2000040c 	.word	0x2000040c
 10040ec:	200000b8 	.word	0x200000b8
 10040f0:	20000230 	.word	0x20000230

010040f4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 10040f4:	b510      	push	{r4, lr}
 10040f6:	f04f 0320 	mov.w	r3, #32
 10040fa:	f3ef 8411 	mrs	r4, BASEPRI
 10040fe:	f383 8812 	msr	BASEPRI_MAX, r3
 1004102:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 1004106:	f7ff fed5 	bl	1003eb4 <elapsed>
 100410a:	4601      	mov	r1, r0
 100410c:	4b05      	ldr	r3, [pc, #20]	; (1004124 <sys_clock_tick_get+0x30>)
 100410e:	e9d3 0300 	ldrd	r0, r3, [r3]
 1004112:	1808      	adds	r0, r1, r0
 1004114:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
 1004118:	f384 8811 	msr	BASEPRI, r4
 100411c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 1004120:	bd10      	pop	{r4, pc}
 1004122:	bf00      	nop
 1004124:	20000230 	.word	0x20000230

01004128 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 1004128:	b570      	push	{r4, r5, r6, lr}
 100412a:	4604      	mov	r4, r0
	__asm__ volatile(
 100412c:	f04f 0320 	mov.w	r3, #32
 1004130:	f3ef 8511 	mrs	r5, BASEPRI
 1004134:	f383 8812 	msr	BASEPRI_MAX, r3
 1004138:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 100413c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 1004140:	3301      	adds	r3, #1
 1004142:	f142 0200 	adc.w	r2, r2, #0
 1004146:	2b02      	cmp	r3, #2
 1004148:	f172 0300 	sbcs.w	r3, r2, #0
 100414c:	d322      	bcc.n	1004194 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
 100414e:	f000 fe42 	bl	1004dd6 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
 1004152:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
 1004156:	3001      	adds	r0, #1
 1004158:	f141 0100 	adc.w	r1, r1, #0
 100415c:	18c0      	adds	r0, r0, r3
 100415e:	eb41 0102 	adc.w	r1, r1, r2
 1004162:	2801      	cmp	r0, #1
 1004164:	f171 0300 	sbcs.w	r3, r1, #0
 1004168:	db32      	blt.n	10041d0 <z_timer_expiration_handler+0xa8>
 100416a:	f000 fe34 	bl	1004dd6 <z_impl_k_uptime_ticks>
 100416e:	3001      	adds	r0, #1
 1004170:	f141 0300 	adc.w	r3, r1, #0
 1004174:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 1004178:	1880      	adds	r0, r0, r2
 100417a:	f06f 0201 	mvn.w	r2, #1
 100417e:	eb43 0301 	adc.w	r3, r3, r1
 1004182:	f04f 31ff 	mov.w	r1, #4294967295
 1004186:	1a12      	subs	r2, r2, r0
 1004188:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 100418c:	4620      	mov	r0, r4
 100418e:	491a      	ldr	r1, [pc, #104]	; (10041f8 <z_timer_expiration_handler+0xd0>)
 1004190:	f7ff feda 	bl	1003f48 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
 1004194:	6b23      	ldr	r3, [r4, #48]	; 0x30
 1004196:	3301      	adds	r3, #1
 1004198:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 100419a:	6a23      	ldr	r3, [r4, #32]
 100419c:	b173      	cbz	r3, 10041bc <z_timer_expiration_handler+0x94>
	__asm__ volatile(
 100419e:	f385 8811 	msr	BASEPRI, r5
 10041a2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 10041a6:	4620      	mov	r0, r4
 10041a8:	6a23      	ldr	r3, [r4, #32]
 10041aa:	4798      	blx	r3
	__asm__ volatile(
 10041ac:	f04f 0320 	mov.w	r3, #32
 10041b0:	f3ef 8511 	mrs	r5, BASEPRI
 10041b4:	f383 8812 	msr	BASEPRI_MAX, r3
 10041b8:	f3bf 8f6f 	isb	sy
	return list->head == list;
 10041bc:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10041c0:	42a6      	cmp	r6, r4
 10041c2:	d000      	beq.n	10041c6 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 10041c4:	b94e      	cbnz	r6, 10041da <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
 10041c6:	f385 8811 	msr	BASEPRI, r5
 10041ca:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
 10041ce:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
 10041d0:	f06f 0201 	mvn.w	r2, #1
 10041d4:	f04f 33ff 	mov.w	r3, #4294967295
 10041d8:	e7d8      	b.n	100418c <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
 10041da:	4630      	mov	r0, r6
 10041dc:	f000 fcf5 	bl	1004bca <z_unpend_thread_no_timeout>
 10041e0:	2300      	movs	r3, #0
 10041e2:	67b3      	str	r3, [r6, #120]	; 0x78
 10041e4:	f385 8811 	msr	BASEPRI, r5
 10041e8:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
 10041ec:	4630      	mov	r0, r6
}
 10041ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
 10041f2:	f000 bd16 	b.w	1004c22 <z_ready_thread>
 10041f6:	bf00      	nop
 10041f8:	01004129 	.word	0x01004129

010041fc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 10041fc:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 10041fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 1004202:	bf08      	it	eq
 1004204:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
 1004208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 100420c:	4606      	mov	r6, r0
 100420e:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
 1004212:	461c      	mov	r4, r3
 1004214:	4689      	mov	r9, r1
 1004216:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 1004218:	d03e      	beq.n	1004298 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 100421a:	f1b0 3fff 	cmp.w	r0, #4294967295
 100421e:	bf08      	it	eq
 1004220:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 1004224:	4615      	mov	r5, r2
 1004226:	4607      	mov	r7, r0
 1004228:	d014      	beq.n	1004254 <z_impl_k_timer_start+0x58>
 100422a:	ea50 0302 	orrs.w	r3, r0, r2
 100422e:	d011      	beq.n	1004254 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
 1004230:	f06f 0301 	mvn.w	r3, #1
 1004234:	1a9b      	subs	r3, r3, r2
 1004236:	f04f 33ff 	mov.w	r3, #4294967295
 100423a:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 100423e:	2b00      	cmp	r3, #0
 1004240:	da08      	bge.n	1004254 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
 1004242:	2a02      	cmp	r2, #2
 1004244:	f170 0300 	sbcs.w	r3, r0, #0
 1004248:	bfbc      	itt	lt
 100424a:	2502      	movlt	r5, #2
 100424c:	2700      	movlt	r7, #0
 100424e:	3d01      	subs	r5, #1
 1004250:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 1004254:	f06f 0301 	mvn.w	r3, #1
 1004258:	1a5b      	subs	r3, r3, r1
 100425a:	f04f 33ff 	mov.w	r3, #4294967295
 100425e:	eb63 0304 	sbc.w	r3, r3, r4
 1004262:	2b00      	cmp	r3, #0
 1004264:	da09      	bge.n	100427a <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
 1004266:	2901      	cmp	r1, #1
 1004268:	f174 0300 	sbcs.w	r3, r4, #0
 100426c:	bfbc      	itt	lt
 100426e:	2101      	movlt	r1, #1
 1004270:	2400      	movlt	r4, #0
 1004272:	f111 39ff 	adds.w	r9, r1, #4294967295
 1004276:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
 100427a:	4630      	mov	r0, r6
 100427c:	f000 fd77 	bl	1004d6e <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 1004280:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 1004282:	464a      	mov	r2, r9
	timer->status = 0U;
 1004284:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 1004286:	4630      	mov	r0, r6
 1004288:	4643      	mov	r3, r8
	timer->period = period;
 100428a:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28
		     duration);
}
 100428e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 1004292:	4902      	ldr	r1, [pc, #8]	; (100429c <z_impl_k_timer_start+0xa0>)
 1004294:	f7ff be58 	b.w	1003f48 <z_add_timeout>
}
 1004298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 100429c:	01004129 	.word	0x01004129

010042a0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 10042a0:	4a02      	ldr	r2, [pc, #8]	; (10042ac <boot_banner+0xc>)
 10042a2:	4903      	ldr	r1, [pc, #12]	; (10042b0 <boot_banner+0x10>)
 10042a4:	4803      	ldr	r0, [pc, #12]	; (10042b4 <boot_banner+0x14>)
 10042a6:	f000 b841 	b.w	100432c <printk>
 10042aa:	bf00      	nop
 10042ac:	01005156 	.word	0x01005156
 10042b0:	010051bc 	.word	0x010051bc
 10042b4:	010051c9 	.word	0x010051c9

010042b8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 10042b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 10042ba:	2400      	movs	r4, #0
 10042bc:	4b08      	ldr	r3, [pc, #32]	; (10042e0 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 10042be:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
 10042c2:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
 10042c4:	ab02      	add	r3, sp, #8
 10042c6:	9300      	str	r3, [sp, #0]
 10042c8:	4906      	ldr	r1, [pc, #24]	; (10042e4 <k_sys_work_q_init+0x2c>)
 10042ca:	f04f 33ff 	mov.w	r3, #4294967295
 10042ce:	4806      	ldr	r0, [pc, #24]	; (10042e8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 10042d0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 10042d4:	f7ff fa32 	bl	100373c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 10042d8:	4620      	mov	r0, r4
 10042da:	b004      	add	sp, #16
 10042dc:	bd10      	pop	{r4, pc}
 10042de:	bf00      	nop
 10042e0:	010051f0 	.word	0x010051f0
 10042e4:	20001118 	.word	0x20001118
 10042e8:	20000238 	.word	0x20000238

010042ec <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
 10042ec:	4603      	mov	r3, r0
 10042ee:	b158      	cbz	r0, 1004308 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 10042f0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
 10042f2:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
 10042f6:	2a01      	cmp	r2, #1
 10042f8:	d003      	beq.n	1004302 <sys_notify_validate+0x16>
 10042fa:	2a03      	cmp	r2, #3
 10042fc:	d104      	bne.n	1004308 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
 10042fe:	6802      	ldr	r2, [r0, #0]
 1004300:	b112      	cbz	r2, 1004308 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
 1004302:	2000      	movs	r0, #0
 1004304:	6098      	str	r0, [r3, #8]
 1004306:	4770      	bx	lr
		return -EINVAL;
 1004308:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
 100430c:	4770      	bx	lr

0100430e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 100430e:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
 1004310:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
 1004312:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
 1004316:	2a03      	cmp	r2, #3
 1004318:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
 100431c:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
 100431e:	bf14      	ite	ne
 1004320:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
 1004322:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
 1004324:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
 1004326:	4770      	bx	lr

01004328 <arch_printk_char_out>:
}
 1004328:	2000      	movs	r0, #0
 100432a:	4770      	bx	lr

0100432c <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 100432c:	b40f      	push	{r0, r1, r2, r3}
 100432e:	b507      	push	{r0, r1, r2, lr}
 1004330:	a904      	add	r1, sp, #16
 1004332:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 1004336:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 1004338:	f7fc f85c 	bl	10003f4 <vprintk>

	va_end(ap);
}
 100433c:	b003      	add	sp, #12
 100433e:	f85d eb04 	ldr.w	lr, [sp], #4
 1004342:	b004      	add	sp, #16
 1004344:	4770      	bx	lr

01004346 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 1004346:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
 1004348:	f013 0307 	ands.w	r3, r3, #7
 100434c:	d105      	bne.n	100435a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
 100434e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
 1004350:	2b00      	cmp	r3, #0
 1004352:	bf0c      	ite	eq
 1004354:	2000      	moveq	r0, #0
 1004356:	2003      	movne	r0, #3
 1004358:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
 100435a:	2b02      	cmp	r3, #2
 100435c:	d105      	bne.n	100436a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
 100435e:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
 1004360:	2b00      	cmp	r3, #0
 1004362:	bf14      	ite	ne
 1004364:	2000      	movne	r0, #0
 1004366:	2004      	moveq	r0, #4
 1004368:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
 100436a:	2b01      	cmp	r3, #1
 100436c:	d105      	bne.n	100437a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
 100436e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
 1004370:	2b00      	cmp	r3, #0
 1004372:	bf0c      	ite	eq
 1004374:	2000      	moveq	r0, #0
 1004376:	2005      	movne	r0, #5
 1004378:	4770      	bx	lr
	int evt = EVT_NOP;
 100437a:	2000      	movs	r0, #0
}
 100437c:	4770      	bx	lr

0100437e <notify_one>:
{
 100437e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1004382:	460d      	mov	r5, r1
 1004384:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
 1004386:	4619      	mov	r1, r3
 1004388:	1d28      	adds	r0, r5, #4
{
 100438a:	4690      	mov	r8, r2
 100438c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
 100438e:	f7ff ffbe 	bl	100430e <sys_notify_finalize>
	if (cb) {
 1004392:	4604      	mov	r4, r0
 1004394:	b138      	cbz	r0, 10043a6 <notify_one+0x28>
		cb(mgr, cli, state, res);
 1004396:	4633      	mov	r3, r6
 1004398:	4642      	mov	r2, r8
 100439a:	4629      	mov	r1, r5
 100439c:	4638      	mov	r0, r7
 100439e:	46a4      	mov	ip, r4
}
 10043a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
 10043a4:	4760      	bx	ip
}
 10043a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

010043aa <transition_complete>:
{
 10043aa:	b410      	push	{r4}
	__asm__ volatile(
 10043ac:	f04f 0420 	mov.w	r4, #32
 10043b0:	f3ef 8211 	mrs	r2, BASEPRI
 10043b4:	f384 8812 	msr	BASEPRI_MAX, r4
 10043b8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
 10043bc:	6141      	str	r1, [r0, #20]
}
 10043be:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
 10043c0:	2101      	movs	r1, #1
 10043c2:	f7fc b825 	b.w	1000410 <process_event>

010043c6 <validate_args>:
{
 10043c6:	b510      	push	{r4, lr}
 10043c8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
 10043ca:	b140      	cbz	r0, 10043de <validate_args+0x18>
 10043cc:	b139      	cbz	r1, 10043de <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
 10043ce:	1d08      	adds	r0, r1, #4
 10043d0:	f7ff ff8c 	bl	10042ec <sys_notify_validate>
	if ((rv == 0)
 10043d4:	b928      	cbnz	r0, 10043e2 <validate_args+0x1c>
	    && ((cli->notify.flags
 10043d6:	68a3      	ldr	r3, [r4, #8]
 10043d8:	f033 0303 	bics.w	r3, r3, #3
 10043dc:	d001      	beq.n	10043e2 <validate_args+0x1c>
		rv = -EINVAL;
 10043de:	f06f 0015 	mvn.w	r0, #21
}
 10043e2:	bd10      	pop	{r4, pc}

010043e4 <onoff_manager_init>:
{
 10043e4:	b538      	push	{r3, r4, r5, lr}
 10043e6:	460c      	mov	r4, r1
	if ((mgr == NULL)
 10043e8:	4605      	mov	r5, r0
 10043ea:	b158      	cbz	r0, 1004404 <onoff_manager_init+0x20>
	    || (transitions == NULL)
 10043ec:	b151      	cbz	r1, 1004404 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
 10043ee:	680b      	ldr	r3, [r1, #0]
 10043f0:	b143      	cbz	r3, 1004404 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
 10043f2:	684b      	ldr	r3, [r1, #4]
 10043f4:	b133      	cbz	r3, 1004404 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
 10043f6:	221c      	movs	r2, #28
 10043f8:	2100      	movs	r1, #0
 10043fa:	f000 f931 	bl	1004660 <memset>
	return 0;
 10043fe:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
 1004400:	612c      	str	r4, [r5, #16]
}
 1004402:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 1004404:	f06f 0015 	mvn.w	r0, #21
 1004408:	e7fb      	b.n	1004402 <onoff_manager_init+0x1e>

0100440a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
 100440a:	b570      	push	{r4, r5, r6, lr}
 100440c:	4604      	mov	r4, r0
 100440e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
 1004410:	f7ff ffd9 	bl	10043c6 <validate_args>

	if (rv < 0) {
 1004414:	1e05      	subs	r5, r0, #0
 1004416:	db31      	blt.n	100447c <onoff_request+0x72>
 1004418:	f04f 0320 	mov.w	r3, #32
 100441c:	f3ef 8111 	mrs	r1, BASEPRI
 1004420:	f383 8812 	msr	BASEPRI_MAX, r3
 1004424:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
 1004428:	f64f 75ff 	movw	r5, #65535	; 0xffff
 100442c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 100442e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
 1004430:	42ab      	cmp	r3, r5
 1004432:	f000 0207 	and.w	r2, r0, #7
 1004436:	d02e      	beq.n	1004496 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
 1004438:	2a02      	cmp	r2, #2
 100443a:	d10e      	bne.n	100445a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
 100443c:	3301      	adds	r3, #1
 100443e:	8363      	strh	r3, [r4, #26]
	rv = state;
 1004440:	4615      	mov	r5, r2
		notify = true;
 1004442:	2301      	movs	r3, #1
	__asm__ volatile(
 1004444:	f381 8811 	msr	BASEPRI, r1
 1004448:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
 100444c:	b1b3      	cbz	r3, 100447c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
 100444e:	2300      	movs	r3, #0
 1004450:	4631      	mov	r1, r6
 1004452:	4620      	mov	r0, r4
 1004454:	f7ff ff93 	bl	100437e <notify_one>
 1004458:	e010      	b.n	100447c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
 100445a:	0783      	lsls	r3, r0, #30
 100445c:	d001      	beq.n	1004462 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
 100445e:	2a06      	cmp	r2, #6
 1004460:	d10e      	bne.n	1004480 <onoff_request+0x76>
	parent->next = child;
 1004462:	2300      	movs	r3, #0
 1004464:	6033      	str	r3, [r6, #0]
	return list->tail;
 1004466:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
 1004468:	b993      	cbnz	r3, 1004490 <onoff_request+0x86>
	list->head = node;
 100446a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
 100446e:	4615      	mov	r5, r2
 1004470:	b962      	cbnz	r2, 100448c <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
 1004472:	460a      	mov	r2, r1
 1004474:	4620      	mov	r0, r4
 1004476:	2102      	movs	r1, #2
 1004478:	f7fb ffca 	bl	1000410 <process_event>
		}
	}

	return rv;
}
 100447c:	4628      	mov	r0, r5
 100447e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
 1004480:	2a05      	cmp	r2, #5
 1004482:	bf0c      	ite	eq
 1004484:	f06f 0585 	mvneq.w	r5, #133	; 0x85
 1004488:	f06f 0504 	mvnne.w	r5, #4
 100448c:	2300      	movs	r3, #0
 100448e:	e7d9      	b.n	1004444 <onoff_request+0x3a>
	parent->next = child;
 1004490:	601e      	str	r6, [r3, #0]
	list->tail = node;
 1004492:	6066      	str	r6, [r4, #4]
}
 1004494:	e7eb      	b.n	100446e <onoff_request+0x64>
		rv = -EAGAIN;
 1004496:	f06f 050a 	mvn.w	r5, #10
 100449a:	e7f7      	b.n	100448c <onoff_request+0x82>

0100449c <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
 100449c:	b510      	push	{r4, lr}
	__asm__ volatile(
 100449e:	f04f 0320 	mov.w	r3, #32
 10044a2:	f3ef 8211 	mrs	r2, BASEPRI
 10044a6:	f383 8812 	msr	BASEPRI_MAX, r3
 10044aa:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 10044ae:	8b04      	ldrh	r4, [r0, #24]
 10044b0:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
 10044b4:	2c02      	cmp	r4, #2
 10044b6:	d00a      	beq.n	10044ce <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
 10044b8:	2c01      	cmp	r4, #1
 10044ba:	bf0c      	ite	eq
 10044bc:	f06f 0004 	mvneq.w	r0, #4
 10044c0:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
 10044c4:	f382 8811 	msr	BASEPRI, r2
 10044c8:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
 10044cc:	e008      	b.n	10044e0 <onoff_release+0x44>
	mgr->refs -= 1U;
 10044ce:	8b43      	ldrh	r3, [r0, #26]
 10044d0:	3b01      	subs	r3, #1
 10044d2:	b29b      	uxth	r3, r3
 10044d4:	8343      	strh	r3, [r0, #26]
	if (stop) {
 10044d6:	b923      	cbnz	r3, 10044e2 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
 10044d8:	4621      	mov	r1, r4
 10044da:	f7fb ff99 	bl	1000410 <process_event>
	int rv = state;
 10044de:	4620      	mov	r0, r4
}
 10044e0:	bd10      	pop	{r4, pc}
	int rv = state;
 10044e2:	4620      	mov	r0, r4
 10044e4:	e7ee      	b.n	10044c4 <onoff_release+0x28>

010044e6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 10044e6:	4604      	mov	r4, r0
 10044e8:	b508      	push	{r3, lr}
 10044ea:	4608      	mov	r0, r1
 10044ec:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 10044ee:	461a      	mov	r2, r3
 10044f0:	47a0      	blx	r4
	return z_impl_z_current_get();
 10044f2:	f7ff fc4d 	bl	1003d90 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 10044f6:	f7fc fecd 	bl	1001294 <z_impl_k_thread_abort>

010044fa <encode_uint>:
{
 10044fa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10044fe:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 1004500:	78d3      	ldrb	r3, [r2, #3]
{
 1004502:	4680      	mov	r8, r0
	switch (specifier) {
 1004504:	2b6f      	cmp	r3, #111	; 0x6f
{
 1004506:	460f      	mov	r7, r1
 1004508:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 100450a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 100450e:	d029      	beq.n	1004564 <encode_uint+0x6a>
 1004510:	d824      	bhi.n	100455c <encode_uint+0x62>
		return 16;
 1004512:	2b58      	cmp	r3, #88	; 0x58
 1004514:	bf14      	ite	ne
 1004516:	260a      	movne	r6, #10
 1004518:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 100451a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 100451e:	4632      	mov	r2, r6
 1004520:	2300      	movs	r3, #0
 1004522:	4640      	mov	r0, r8
 1004524:	4639      	mov	r1, r7
 1004526:	f7fb fdc7 	bl	10000b8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 100452a:	2a09      	cmp	r2, #9
 100452c:	b2d4      	uxtb	r4, r2
 100452e:	d81e      	bhi.n	100456e <encode_uint+0x74>
 1004530:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 1004532:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 1004534:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 1004536:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 100453a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 100453e:	d301      	bcc.n	1004544 <encode_uint+0x4a>
 1004540:	45d1      	cmp	r9, sl
 1004542:	d811      	bhi.n	1004568 <encode_uint+0x6e>
	if (conv->flag_hash) {
 1004544:	782b      	ldrb	r3, [r5, #0]
 1004546:	069b      	lsls	r3, r3, #26
 1004548:	d505      	bpl.n	1004556 <encode_uint+0x5c>
		if (radix == 8) {
 100454a:	2e08      	cmp	r6, #8
 100454c:	d115      	bne.n	100457a <encode_uint+0x80>
			conv->altform_0 = true;
 100454e:	78ab      	ldrb	r3, [r5, #2]
 1004550:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 1004554:	70ab      	strb	r3, [r5, #2]
}
 1004556:	4648      	mov	r0, r9
 1004558:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 100455c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 1004560:	2b70      	cmp	r3, #112	; 0x70
 1004562:	e7d7      	b.n	1004514 <encode_uint+0x1a>
	switch (specifier) {
 1004564:	2608      	movs	r6, #8
 1004566:	e7d8      	b.n	100451a <encode_uint+0x20>
		value /= radix;
 1004568:	4680      	mov	r8, r0
 100456a:	460f      	mov	r7, r1
 100456c:	e7d7      	b.n	100451e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 100456e:	f1bb 0f19 	cmp.w	fp, #25
 1004572:	bf94      	ite	ls
 1004574:	3437      	addls	r4, #55	; 0x37
 1004576:	3457      	addhi	r4, #87	; 0x57
 1004578:	e7db      	b.n	1004532 <encode_uint+0x38>
		} else if (radix == 16) {
 100457a:	2e10      	cmp	r6, #16
 100457c:	d1eb      	bne.n	1004556 <encode_uint+0x5c>
			conv->altform_0c = true;
 100457e:	78ab      	ldrb	r3, [r5, #2]
 1004580:	f043 0310 	orr.w	r3, r3, #16
 1004584:	e7e6      	b.n	1004554 <encode_uint+0x5a>

01004586 <outs>:
{
 1004586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100458a:	4607      	mov	r7, r0
 100458c:	4688      	mov	r8, r1
 100458e:	4615      	mov	r5, r2
 1004590:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 1004592:	4614      	mov	r4, r2
 1004594:	42b4      	cmp	r4, r6
 1004596:	eba4 0005 	sub.w	r0, r4, r5
 100459a:	d302      	bcc.n	10045a2 <outs+0x1c>
 100459c:	b93e      	cbnz	r6, 10045ae <outs+0x28>
 100459e:	7823      	ldrb	r3, [r4, #0]
 10045a0:	b12b      	cbz	r3, 10045ae <outs+0x28>
		int rc = out((int)*sp++, ctx);
 10045a2:	4641      	mov	r1, r8
 10045a4:	f814 0b01 	ldrb.w	r0, [r4], #1
 10045a8:	47b8      	blx	r7
		if (rc < 0) {
 10045aa:	2800      	cmp	r0, #0
 10045ac:	daf2      	bge.n	1004594 <outs+0xe>
}
 10045ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

010045b2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
 10045b2:	4770      	bx	lr

010045b4 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 10045b4:	f000 ba6f 	b.w	1004a96 <z_fatal_error>

010045b8 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 10045b8:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 10045ba:	6800      	ldr	r0, [r0, #0]
 10045bc:	f000 ba6b 	b.w	1004a96 <z_fatal_error>

010045c0 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 10045c0:	2100      	movs	r1, #0
 10045c2:	2001      	movs	r0, #1
 10045c4:	f7ff bff6 	b.w	10045b4 <z_arm_fatal_error>

010045c8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 10045c8:	b508      	push	{r3, lr}
	handler();
 10045ca:	f7fc fc39 	bl	1000e40 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 10045ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 10045d2:	f7fc bce9 	b.w	1000fa8 <z_arm_exc_exit>

010045d6 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 10045d6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 10045d8:	f383 880b 	msr	PSPLIM, r3
}
 10045dc:	4770      	bx	lr

010045de <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
 10045de:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
 10045e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 10045e6:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
 10045e8:	bf08      	it	eq
 10045ea:	f06f 0015 	mvneq.w	r0, #21
 10045ee:	4770      	bx	lr

010045f0 <mpu_configure_region>:
{
 10045f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
 10045f2:	890a      	ldrh	r2, [r1, #8]
 10045f4:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
 10045f6:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 10045f8:	684d      	ldr	r5, [r1, #4]
 10045fa:	f002 021f 	and.w	r2, r2, #31
 10045fe:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
 1004602:	9300      	str	r3, [sp, #0]
 1004604:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
 1004608:	f023 031f 	bic.w	r3, r3, #31
 100460c:	1e6a      	subs	r2, r5, #1
 100460e:	4413      	add	r3, r2
 1004610:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
 1004614:	2807      	cmp	r0, #7
 1004616:	9303      	str	r3, [sp, #12]
 1004618:	d804      	bhi.n	1004624 <mpu_configure_region+0x34>
	region_init(index, region_conf);
 100461a:	4669      	mov	r1, sp
 100461c:	f7fc fe6c 	bl	10012f8 <region_init>
}
 1004620:	b004      	add	sp, #16
 1004622:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 1004624:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
 1004628:	e7fa      	b.n	1004620 <mpu_configure_region+0x30>

0100462a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 100462a:	4603      	mov	r3, r0
	size_t n = 0;
 100462c:	2000      	movs	r0, #0

	while (*s != '\0') {
 100462e:	5c1a      	ldrb	r2, [r3, r0]
 1004630:	b902      	cbnz	r2, 1004634 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 1004632:	4770      	bx	lr
		n++;
 1004634:	3001      	adds	r0, #1
 1004636:	e7fa      	b.n	100462e <strlen+0x4>

01004638 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 1004638:	4603      	mov	r3, r0
	size_t n = 0;
 100463a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 100463c:	5c1a      	ldrb	r2, [r3, r0]
 100463e:	b10a      	cbz	r2, 1004644 <strnlen+0xc>
 1004640:	4288      	cmp	r0, r1
 1004642:	d100      	bne.n	1004646 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 1004644:	4770      	bx	lr
		n++;
 1004646:	3001      	adds	r0, #1
 1004648:	e7f8      	b.n	100463c <strnlen+0x4>

0100464a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 100464a:	b510      	push	{r4, lr}
 100464c:	1e43      	subs	r3, r0, #1
 100464e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 1004650:	4291      	cmp	r1, r2
 1004652:	d100      	bne.n	1004656 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 1004654:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 1004656:	f811 4b01 	ldrb.w	r4, [r1], #1
 100465a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 100465e:	e7f7      	b.n	1004650 <memcpy+0x6>

01004660 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
 1004660:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
 1004662:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 1004664:	4402      	add	r2, r0
 1004666:	4293      	cmp	r3, r2
 1004668:	d100      	bne.n	100466c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 100466a:	4770      	bx	lr
		*(d_byte++) = c_byte;
 100466c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 1004670:	e7f9      	b.n	1004666 <memset+0x6>

01004672 <_stdout_hook_default>:
}
 1004672:	f04f 30ff 	mov.w	r0, #4294967295
 1004676:	4770      	bx	lr

01004678 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
 1004678:	220c      	movs	r2, #12
 100467a:	6903      	ldr	r3, [r0, #16]
 100467c:	b2c9      	uxtb	r1, r1
 100467e:	fb01 3302 	mla	r3, r1, r2, r3
 1004682:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 1004684:	f000 0007 	and.w	r0, r0, #7
 1004688:	4770      	bx	lr

0100468a <set_on_state>:
	__asm__ volatile(
 100468a:	f04f 0320 	mov.w	r3, #32
 100468e:	f3ef 8211 	mrs	r2, BASEPRI
 1004692:	f383 8812 	msr	BASEPRI_MAX, r3
 1004696:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
 100469a:	6803      	ldr	r3, [r0, #0]
 100469c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 10046a0:	f043 0302 	orr.w	r3, r3, #2
 10046a4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
 10046a6:	f382 8811 	msr	BASEPRI, r2
 10046aa:	f3bf 8f6f 	isb	sy
}
 10046ae:	4770      	bx	lr

010046b0 <stop>:
{
 10046b0:	4603      	mov	r3, r0
 10046b2:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
 10046b4:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
 10046b6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
 10046b8:	f04f 0420 	mov.w	r4, #32
 10046bc:	f3ef 8611 	mrs	r6, BASEPRI
 10046c0:	f384 8812 	msr	BASEPRI_MAX, r4
 10046c4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
 10046c8:	250c      	movs	r5, #12
 10046ca:	fb05 0401 	mla	r4, r5, r1, r0
 10046ce:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
 10046d0:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
 10046d4:	d001      	beq.n	10046da <stop+0x2a>
 10046d6:	42a2      	cmp	r2, r4
 10046d8:	d110      	bne.n	10046fc <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
 10046da:	2201      	movs	r2, #1
 10046dc:	fb05 0001 	mla	r0, r5, r1, r0
 10046e0:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
 10046e2:	2000      	movs	r0, #0
	__asm__ volatile(
 10046e4:	f386 8811 	msr	BASEPRI, r6
 10046e8:	f3bf 8f6f 	isb	sy
	if (err < 0) {
 10046ec:	b928      	cbnz	r0, 10046fa <stop+0x4a>
	get_sub_config(dev, type)->stop();
 10046ee:	685b      	ldr	r3, [r3, #4]
 10046f0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 10046f4:	684b      	ldr	r3, [r1, #4]
 10046f6:	4798      	blx	r3
	return 0;
 10046f8:	2000      	movs	r0, #0
}
 10046fa:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
 10046fc:	f04f 30ff 	mov.w	r0, #4294967295
 1004700:	e7f0      	b.n	10046e4 <stop+0x34>

01004702 <api_stop>:
	return stop(dev, subsys, CTX_API);
 1004702:	2280      	movs	r2, #128	; 0x80
 1004704:	f7ff bfd4 	b.w	10046b0 <stop>

01004708 <async_start>:
{
 1004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100470a:	9f06      	ldr	r7, [sp, #24]
 100470c:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
 100470e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
 1004710:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
 1004712:	f04f 0020 	mov.w	r0, #32
 1004716:	f3ef 8c11 	mrs	ip, BASEPRI
 100471a:	f380 8812 	msr	BASEPRI_MAX, r0
 100471e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
 1004722:	260c      	movs	r6, #12
 1004724:	fb06 4601 	mla	r6, r6, r1, r4
 1004728:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
 100472a:	f000 0e07 	and.w	lr, r0, #7
 100472e:	f1be 0f01 	cmp.w	lr, #1
 1004732:	d111      	bne.n	1004758 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
 1004734:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
 1004736:	2600      	movs	r6, #0
	__asm__ volatile(
 1004738:	f38c 8811 	msr	BASEPRI, ip
 100473c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
 1004740:	b946      	cbnz	r6, 1004754 <async_start+0x4c>
	subdata->cb = cb;
 1004742:	200c      	movs	r0, #12
 1004744:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
 1004748:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
 100474c:	686b      	ldr	r3, [r5, #4]
 100474e:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 1004752:	4798      	blx	r3
}
 1004754:	4630      	mov	r0, r6
 1004756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
 1004758:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
 100475c:	4287      	cmp	r7, r0
 100475e:	bf14      	ite	ne
 1004760:	f04f 36ff 	movne.w	r6, #4294967295
 1004764:	f06f 0677 	mvneq.w	r6, #119	; 0x77
 1004768:	e7e6      	b.n	1004738 <async_start+0x30>

0100476a <api_start>:
{
 100476a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
 100476c:	2480      	movs	r4, #128	; 0x80
 100476e:	9400      	str	r4, [sp, #0]
 1004770:	f7ff ffca 	bl	1004708 <async_start>
}
 1004774:	b002      	add	sp, #8
 1004776:	bd10      	pop	{r4, pc}

01004778 <onoff_started_callback>:
{
 1004778:	b410      	push	{r4}
	notify(mgr, 0);
 100477a:	241c      	movs	r4, #28
	return &data->mgr[type];
 100477c:	6900      	ldr	r0, [r0, #16]
 100477e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
 1004780:	fb03 0004 	mla	r0, r3, r4, r0
 1004784:	2100      	movs	r1, #0
}
 1004786:	bc10      	pop	{r4}
	notify(mgr, 0);
 1004788:	4710      	bx	r2

0100478a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
 100478a:	2000      	movs	r0, #0
 100478c:	f7fe b840 	b.w	1002810 <nrfx_clock_start>

01004790 <blocking_start_callback>:
{
 1004790:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
 1004792:	f7fe be9f 	b.w	10034d4 <z_impl_k_sem_give>

01004796 <lfclk_stop>:
{
 1004796:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
 1004798:	f7fd f936 	bl	1001a08 <z_nrf_clock_calibration_lfclk_stopped>
}
 100479c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
 10047a0:	2000      	movs	r0, #0
 10047a2:	f000 b915 	b.w	10049d0 <nrfx_clock_stop>

010047a6 <timeout_handler>:
	start_cal_process();
 10047a6:	f7fd b871 	b.w	100188c <start_cal_process>

010047aa <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 10047aa:	6843      	ldr	r3, [r0, #4]
}
 10047ac:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 10047ae:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
 10047b0:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
 10047b2:	600b      	str	r3, [r1, #0]
}
 10047b4:	4770      	bx	lr

010047b6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 10047b6:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
 10047b8:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 10047bc:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
 10047be:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
 10047c2:	6098      	str	r0, [r3, #8]
}
 10047c4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
 10047c6:	60d9      	str	r1, [r3, #12]
 10047c8:	4770      	bx	lr

010047ca <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 10047ca:	6843      	ldr	r3, [r0, #4]
}
 10047cc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 10047ce:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
 10047d0:	6099      	str	r1, [r3, #8]
}
 10047d2:	4770      	bx	lr

010047d4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 10047d4:	6843      	ldr	r3, [r0, #4]
}
 10047d6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 10047d8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
 10047da:	60d9      	str	r1, [r3, #12]
}
 10047dc:	4770      	bx	lr

010047de <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 10047de:	6843      	ldr	r3, [r0, #4]
 10047e0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
 10047e2:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
 10047e4:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
 10047e8:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
 10047ea:	6090      	str	r0, [r2, #8]
}
 10047ec:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
 10047ee:	60d3      	str	r3, [r2, #12]
 10047f0:	4770      	bx	lr

010047f2 <gpio_nrfx_manage_callback>:
	return port->data;
 10047f2:	6903      	ldr	r3, [r0, #16]
{
 10047f4:	b530      	push	{r4, r5, lr}
	return list->head;
 10047f6:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
 10047f8:	b158      	cbz	r0, 1004812 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 10047fa:	2400      	movs	r4, #0
 10047fc:	4281      	cmp	r1, r0
 10047fe:	d112      	bne.n	1004826 <gpio_nrfx_manage_callback+0x34>
	return node->next;
 1004800:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 1004802:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 1004804:	b954      	cbnz	r4, 100481c <gpio_nrfx_manage_callback+0x2a>
 1004806:	428d      	cmp	r5, r1
	list->head = node;
 1004808:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 100480a:	d100      	bne.n	100480e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
 100480c:	6098      	str	r0, [r3, #8]
	parent->next = child;
 100480e:	2000      	movs	r0, #0
 1004810:	6008      	str	r0, [r1, #0]
	if (set) {
 1004812:	b96a      	cbnz	r2, 1004830 <gpio_nrfx_manage_callback+0x3e>
	return 0;
 1004814:	2000      	movs	r0, #0
}
 1004816:	bd30      	pop	{r4, r5, pc}
 1004818:	4628      	mov	r0, r5
 100481a:	e7ef      	b.n	10047fc <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 100481c:	428d      	cmp	r5, r1
	parent->next = child;
 100481e:	6020      	str	r0, [r4, #0]
	list->tail = node;
 1004820:	bf08      	it	eq
 1004822:	609c      	streq	r4, [r3, #8]
}
 1004824:	e7f3      	b.n	100480e <gpio_nrfx_manage_callback+0x1c>
	return node->next;
 1004826:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 1004828:	4604      	mov	r4, r0
 100482a:	2d00      	cmp	r5, #0
 100482c:	d1f4      	bne.n	1004818 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
 100482e:	b13a      	cbz	r2, 1004840 <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
 1004830:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 1004832:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
 1004834:	600a      	str	r2, [r1, #0]
	list->head = node;
 1004836:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 1004838:	2800      	cmp	r0, #0
 100483a:	d1eb      	bne.n	1004814 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
 100483c:	6099      	str	r1, [r3, #8]
}
 100483e:	e7ea      	b.n	1004816 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
 1004840:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
 1004844:	e7e7      	b.n	1004816 <gpio_nrfx_manage_callback+0x24>

01004846 <uarte_nrfx_config_get>:
{
 1004846:	460b      	mov	r3, r1
	*cfg = data->uart_config;
 1004848:	6902      	ldr	r2, [r0, #16]
 100484a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
 100484e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 1004852:	2000      	movs	r0, #0
 1004854:	4770      	bx	lr

01004856 <uarte_nrfx_err_check>:
	return config->uarte_regs;
 1004856:	6843      	ldr	r3, [r0, #4]
 1004858:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
 100485a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
 100485e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
 1004862:	4770      	bx	lr

01004864 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
 1004864:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
 1004866:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
 1004868:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 100486a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
 100486e:	b150      	cbz	r0, 1004886 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1004870:	2000      	movs	r0, #0
	*c = *data->rx_data;
 1004872:	6952      	ldr	r2, [r2, #20]
 1004874:	7812      	ldrb	r2, [r2, #0]
 1004876:	700a      	strb	r2, [r1, #0]
 1004878:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
 100487c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1004880:	2201      	movs	r2, #1
 1004882:	601a      	str	r2, [r3, #0]
	return 0;
 1004884:	4770      	bx	lr
		return -1;
 1004886:	f04f 30ff 	mov.w	r0, #4294967295
}
 100488a:	4770      	bx	lr

0100488c <is_tx_ready.isra.0>:
	return config->uarte_regs;
 100488c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
 100488e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1004890:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
 1004894:	b940      	cbnz	r0, 10048a8 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
 1004896:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
 1004898:	079b      	lsls	r3, r3, #30
 100489a:	d406      	bmi.n	10048aa <is_tx_ready.isra.0+0x1e>
 100489c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
 10048a0:	3800      	subs	r0, #0
 10048a2:	bf18      	it	ne
 10048a4:	2001      	movne	r0, #1
 10048a6:	4770      	bx	lr
 10048a8:	2001      	movs	r0, #1
}
 10048aa:	4770      	bx	lr

010048ac <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
 10048ac:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
 10048ae:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
 10048b0:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
 10048b4:	05c9      	lsls	r1, r1, #23
 10048b6:	d518      	bpl.n	10048ea <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 10048b8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 10048bc:	b1a9      	cbz	r1, 10048ea <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
 10048be:	f04f 0020 	mov.w	r0, #32
 10048c2:	f3ef 8111 	mrs	r1, BASEPRI
 10048c6:	f380 8812 	msr	BASEPRI_MAX, r0
 10048ca:	f3bf 8f6f 	isb	sy
 10048ce:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
 10048d2:	b130      	cbz	r0, 10048e2 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10048d4:	2000      	movs	r0, #0
 10048d6:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
 10048da:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10048de:	2001      	movs	r0, #1
 10048e0:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
 10048e2:	f381 8811 	msr	BASEPRI, r1
 10048e6:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
 10048ea:	6852      	ldr	r2, [r2, #4]
 10048ec:	06d2      	lsls	r2, r2, #27
 10048ee:	d515      	bpl.n	100491c <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
 10048f0:	f04f 0120 	mov.w	r1, #32
 10048f4:	f3ef 8211 	mrs	r2, BASEPRI
 10048f8:	f381 8812 	msr	BASEPRI_MAX, r1
 10048fc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1004900:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
 1004904:	b111      	cbz	r1, 100490c <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
 1004906:	2100      	movs	r1, #0
 1004908:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
 100490c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 1004910:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
 1004914:	f382 8811 	msr	BASEPRI, r2
 1004918:	f3bf 8f6f 	isb	sy
}
 100491c:	4770      	bx	lr

0100491e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 100491e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 1004920:	6843      	ldr	r3, [r0, #4]
 1004922:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 1004924:	7a03      	ldrb	r3, [r0, #8]
 1004926:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 100492a:	3b01      	subs	r3, #1
 100492c:	00db      	lsls	r3, r3, #3
 100492e:	6845      	ldr	r5, [r0, #4]
 1004930:	6814      	ldr	r4, [r2, #0]
 1004932:	441d      	add	r5, r3
 1004934:	42ac      	cmp	r4, r5
 1004936:	d902      	bls.n	100493e <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
 1004938:	f06f 0001 	mvn.w	r0, #1
}
 100493c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 100493e:	7965      	ldrb	r5, [r4, #5]
 1004940:	428d      	cmp	r5, r1
 1004942:	d002      	beq.n	100494a <pinctrl_lookup_state+0x2c>
		(*state)++;
 1004944:	3408      	adds	r4, #8
 1004946:	6014      	str	r4, [r2, #0]
 1004948:	e7f1      	b.n	100492e <pinctrl_lookup_state+0x10>
			return 0;
 100494a:	2000      	movs	r0, #0
 100494c:	e7f6      	b.n	100493c <pinctrl_lookup_state+0x1e>

0100494e <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 100494e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1004952:	4616      	mov	r6, r2
 1004954:	4605      	mov	r5, r0
 1004956:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 100495a:	42bd      	cmp	r5, r7
 100495c:	d102      	bne.n	1004964 <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
 100495e:	2000      	movs	r0, #0
}
 1004960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
 1004964:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
 1004966:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
 1004968:	f3c4 2803 	ubfx	r8, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
 100496c:	2b03      	cmp	r3, #3
 100496e:	d825      	bhi.n	10049bc <pinctrl_configure_pins+0x6e>
 1004970:	e8df f003 	tbb	[pc, r3]
 1004974:	1f1a1302 	.word	0x1f1a1302
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
 1004978:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 100497c:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
 1004980:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_set(pin_number);
 1004982:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 1004986:	f7fd fe39 	bl	10025fc <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
 100498a:	4643      	mov	r3, r8
 100498c:	2201      	movs	r2, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
 100498e:	6828      	ldr	r0, [r5, #0]
 1004990:	4611      	mov	r1, r2
 1004992:	f7fd fe0d 	bl	10025b0 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 1004996:	3504      	adds	r5, #4
 1004998:	e7df      	b.n	100495a <pinctrl_configure_pins+0xc>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
 100499a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 100499e:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
 10049a2:	4643      	mov	r3, r8
 10049a4:	2200      	movs	r2, #0
 10049a6:	e7f2      	b.n	100498e <pinctrl_configure_pins+0x40>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
 10049a8:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 10049ac:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
 10049b0:	e7e6      	b.n	1004980 <pinctrl_configure_pins+0x32>
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
 10049b2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 10049b6:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
 10049ba:	e7f2      	b.n	10049a2 <pinctrl_configure_pins+0x54>
		switch (NRF_GET_FUN(pins[i])) {
 10049bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
 10049c0:	e7ce      	b.n	1004960 <pinctrl_configure_pins+0x12>

010049c2 <k_sys_fatal_error_handler>:
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
 10049c2:	2000      	movs	r0, #0
{
 10049c4:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
 10049c6:	f7fc fc1d 	bl	1001204 <sys_arch_reboot>

010049ca <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
 10049ca:	4700      	bx	r0

010049cc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
 10049cc:	f000 ba05 	b.w	1004dda <z_impl_k_busy_wait>

010049d0 <nrfx_clock_stop>:
    clock_stop(domain);
 10049d0:	f7fd beae 	b.w	1002730 <clock_stop>

010049d4 <nrf_gpio_reconfigure>:
{
 10049d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 10049d6:	4617      	mov	r7, r2
 10049d8:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
 10049dc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 10049de:	a801      	add	r0, sp, #4
{
 10049e0:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 10049e2:	f7fd ffbf 	bl	1002964 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
 10049e6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
 10049e8:	2f00      	cmp	r7, #0
 10049ea:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 10049ee:	bf14      	ite	ne
 10049f0:	2302      	movne	r3, #2
 10049f2:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
 10049f4:	2900      	cmp	r1, #0
 10049f6:	bf18      	it	ne
 10049f8:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
 10049fc:	2d00      	cmp	r5, #0
 10049fe:	bf14      	ite	ne
 1004a00:	f04f 0c0c 	movne.w	ip, #12
 1004a04:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
 1004a08:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
 1004a0a:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
 1004a0e:	bf14      	ite	ne
 1004a10:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
 1004a14:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
 1004a18:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
 1004a1a:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
 1004a1e:	bf14      	ite	ne
 1004a20:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
 1004a24:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
 1004a28:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
 1004a2c:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
 1004a30:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
 1004a34:	b101      	cbz	r1, 1004a38 <nrf_gpio_reconfigure+0x64>
 1004a36:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
 1004a38:	b10f      	cbz	r7, 1004a3e <nrf_gpio_reconfigure+0x6a>
 1004a3a:	783f      	ldrb	r7, [r7, #0]
 1004a3c:	007f      	lsls	r7, r7, #1
 1004a3e:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
 1004a40:	b10d      	cbz	r5, 1004a46 <nrf_gpio_reconfigure+0x72>
 1004a42:	782d      	ldrb	r5, [r5, #0]
 1004a44:	00ad      	lsls	r5, r5, #2
 1004a46:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
 1004a48:	b10c      	cbz	r4, 1004a4e <nrf_gpio_reconfigure+0x7a>
 1004a4a:	7822      	ldrb	r2, [r4, #0]
 1004a4c:	0214      	lsls	r4, r2, #8
 1004a4e:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
 1004a50:	b10e      	cbz	r6, 1004a56 <nrf_gpio_reconfigure+0x82>
 1004a52:	7836      	ldrb	r6, [r6, #0]
 1004a54:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
 1004a56:	432c      	orrs	r4, r5
 1004a58:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
 1004a5a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
 1004a5e:	b003      	add	sp, #12
 1004a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

01004a62 <nrf_gpio_cfg_sense_set>:
{
 1004a62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
 1004a64:	f10d 030f 	add.w	r3, sp, #15
 1004a68:	9301      	str	r3, [sp, #4]
 1004a6a:	2300      	movs	r3, #0
{
 1004a6c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
 1004a70:	461a      	mov	r2, r3
 1004a72:	4619      	mov	r1, r3
 1004a74:	9300      	str	r3, [sp, #0]
 1004a76:	f7ff ffad 	bl	10049d4 <nrf_gpio_reconfigure>
}
 1004a7a:	b005      	add	sp, #20
 1004a7c:	f85d fb04 	ldr.w	pc, [sp], #4

01004a80 <z_device_state_init>:
}
 1004a80:	4770      	bx	lr

01004a82 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 1004a82:	b138      	cbz	r0, 1004a94 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 1004a84:	68c3      	ldr	r3, [r0, #12]
 1004a86:	8818      	ldrh	r0, [r3, #0]
 1004a88:	f3c0 0008 	ubfx	r0, r0, #0, #9
 1004a8c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 1004a90:	4258      	negs	r0, r3
 1004a92:	4158      	adcs	r0, r3
}
 1004a94:	4770      	bx	lr

01004a96 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 1004a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1004a98:	4605      	mov	r5, r0
 1004a9a:	460e      	mov	r6, r1
	__asm__ volatile(
 1004a9c:	f04f 0320 	mov.w	r3, #32
 1004aa0:	f3ef 8711 	mrs	r7, BASEPRI
 1004aa4:	f383 8812 	msr	BASEPRI_MAX, r3
 1004aa8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 1004aac:	f7ff f970 	bl	1003d90 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 1004ab0:	4631      	mov	r1, r6
 1004ab2:	4604      	mov	r4, r0
 1004ab4:	4628      	mov	r0, r5
 1004ab6:	f7ff ff84 	bl	10049c2 <k_sys_fatal_error_handler>
	__asm__ volatile(
 1004aba:	f387 8811 	msr	BASEPRI, r7
 1004abe:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 1004ac2:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 1004ac4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1004ac8:	f7fc bbe4 	b.w	1001294 <z_impl_k_thread_abort>

01004acc <z_early_memset>:
	(void) memset(dst, c, n);
 1004acc:	f7ff bdc8 	b.w	1004660 <memset>

01004ad0 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 1004ad0:	f7ff bdbb 	b.w	100464a <memcpy>

01004ad4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 1004ad4:	f3ef 8005 	mrs	r0, IPSR
}
 1004ad8:	3800      	subs	r0, #0
 1004ada:	bf18      	it	ne
 1004adc:	2001      	movne	r0, #1
 1004ade:	4770      	bx	lr

01004ae0 <z_impl_k_thread_name_set>:
}
 1004ae0:	f06f 0057 	mvn.w	r0, #87	; 0x57
 1004ae4:	4770      	bx	lr

01004ae6 <z_impl_k_thread_start>:
	z_sched_start(thread);
 1004ae6:	f7fe bf9f 	b.w	1003a28 <z_sched_start>

01004aea <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 1004aea:	b508      	push	{r3, lr}
	__asm__ volatile(
 1004aec:	f04f 0220 	mov.w	r2, #32
 1004af0:	f3ef 8311 	mrs	r3, BASEPRI
 1004af4:	f382 8812 	msr	BASEPRI_MAX, r2
 1004af8:	f3bf 8f6f 	isb	sy
	arch_cpu_idle();
 1004afc:	f7fc f954 	bl	1000da8 <arch_cpu_idle>
 1004b00:	e7f4      	b.n	1004aec <idle+0x2>

01004b02 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 1004b02:	f990 300e 	ldrsb.w	r3, [r0, #14]
 1004b06:	428b      	cmp	r3, r1
 1004b08:	d001      	beq.n	1004b0e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 1004b0a:	f7fe bffd 	b.w	1003b08 <z_set_prio>
}
 1004b0e:	2000      	movs	r0, #0
 1004b10:	4770      	bx	lr

01004b12 <z_impl_k_mutex_init>:
{
 1004b12:	4603      	mov	r3, r0
	mutex->owner = NULL;
 1004b14:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 1004b16:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
 1004b1a:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
 1004b1e:	4770      	bx	lr

01004b20 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 1004b20:	b13a      	cbz	r2, 1004b32 <z_impl_k_sem_init+0x12>
 1004b22:	428a      	cmp	r2, r1
 1004b24:	d305      	bcc.n	1004b32 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 1004b26:	e9c0 1202 	strd	r1, r2, [r0, #8]
 1004b2a:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 1004b2e:	2000      	movs	r0, #0
 1004b30:	4770      	bx	lr
		return -EINVAL;
 1004b32:	f06f 0015 	mvn.w	r0, #21
}
 1004b36:	4770      	bx	lr

01004b38 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
 1004b38:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
 1004b3a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
 1004b3c:	408b      	lsls	r3, r1
 1004b3e:	ea22 0303 	bic.w	r3, r2, r3
 1004b42:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
 1004b44:	fa22 f001 	lsr.w	r0, r2, r1
}
 1004b48:	f000 0001 	and.w	r0, r0, #1
 1004b4c:	4770      	bx	lr

01004b4e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
 1004b4e:	b120      	cbz	r0, 1004b5a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 1004b50:	2200      	movs	r2, #0
 1004b52:	3088      	adds	r0, #136	; 0x88
 1004b54:	4611      	mov	r1, r2
 1004b56:	f000 b8ed 	b.w	1004d34 <z_sched_wake>
}
 1004b5a:	4770      	bx	lr

01004b5c <z_work_submit_to_queue>:
{
 1004b5c:	b513      	push	{r0, r1, r4, lr}
 1004b5e:	9001      	str	r0, [sp, #4]
 1004b60:	4608      	mov	r0, r1
 1004b62:	f04f 0320 	mov.w	r3, #32
 1004b66:	f3ef 8411 	mrs	r4, BASEPRI
 1004b6a:	f383 8812 	msr	BASEPRI_MAX, r3
 1004b6e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 1004b72:	a901      	add	r1, sp, #4
 1004b74:	f7fe fd8c 	bl	1003690 <submit_to_queue_locked>
	__asm__ volatile(
 1004b78:	f384 8811 	msr	BASEPRI, r4
 1004b7c:	f3bf 8f6f 	isb	sy
}
 1004b80:	b002      	add	sp, #8
 1004b82:	bd10      	pop	{r4, pc}

01004b84 <k_work_submit_to_queue>:
{
 1004b84:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
 1004b86:	f7ff ffe9 	bl	1004b5c <z_work_submit_to_queue>
	if (ret > 0) {
 1004b8a:	1e04      	subs	r4, r0, #0
 1004b8c:	dd09      	ble.n	1004ba2 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
 1004b8e:	f04f 0320 	mov.w	r3, #32
 1004b92:	f3ef 8011 	mrs	r0, BASEPRI
 1004b96:	f383 8812 	msr	BASEPRI_MAX, r3
 1004b9a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 1004b9e:	f000 f824 	bl	1004bea <z_reschedule_irqlock>
}
 1004ba2:	4620      	mov	r0, r4
 1004ba4:	bd10      	pop	{r4, pc}

01004ba6 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 1004ba6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 1004baa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 1004bac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 1004bae:	2300      	movs	r3, #0
	node->prev = NULL;
 1004bb0:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 1004bb4:	4770      	bx	lr

01004bb6 <unpend_thread_no_timeout>:
{
 1004bb6:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 1004bb8:	f7ff fff5 	bl	1004ba6 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 1004bbc:	7b43      	ldrb	r3, [r0, #13]
 1004bbe:	f023 0302 	bic.w	r3, r3, #2
 1004bc2:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 1004bc4:	2300      	movs	r3, #0
 1004bc6:	6083      	str	r3, [r0, #8]
}
 1004bc8:	bd08      	pop	{r3, pc}

01004bca <z_unpend_thread_no_timeout>:
{
 1004bca:	b508      	push	{r3, lr}
 1004bcc:	f04f 0320 	mov.w	r3, #32
 1004bd0:	f3ef 8111 	mrs	r1, BASEPRI
 1004bd4:	f383 8812 	msr	BASEPRI_MAX, r3
 1004bd8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 1004bdc:	f7ff ffeb 	bl	1004bb6 <unpend_thread_no_timeout>
	__asm__ volatile(
 1004be0:	f381 8811 	msr	BASEPRI, r1
 1004be4:	f3bf 8f6f 	isb	sy
}
 1004be8:	bd08      	pop	{r3, pc}

01004bea <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 1004bea:	4603      	mov	r3, r0
 1004bec:	b920      	cbnz	r0, 1004bf8 <z_reschedule_irqlock+0xe>
 1004bee:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 1004bf2:	b90a      	cbnz	r2, 1004bf8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 1004bf4:	f7fc b93e 	b.w	1000e74 <arch_swap>
 1004bf8:	f383 8811 	msr	BASEPRI, r3
 1004bfc:	f3bf 8f6f 	isb	sy
}
 1004c00:	4770      	bx	lr

01004c02 <z_reschedule_unlocked>:
	__asm__ volatile(
 1004c02:	f04f 0320 	mov.w	r3, #32
 1004c06:	f3ef 8011 	mrs	r0, BASEPRI
 1004c0a:	f383 8812 	msr	BASEPRI_MAX, r3
 1004c0e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 1004c12:	f7ff bfea 	b.w	1004bea <z_reschedule_irqlock>

01004c16 <z_priq_dumb_best>:
{
 1004c16:	4603      	mov	r3, r0
	return list->head == list;
 1004c18:	6800      	ldr	r0, [r0, #0]
}
 1004c1a:	4283      	cmp	r3, r0
 1004c1c:	bf08      	it	eq
 1004c1e:	2000      	moveq	r0, #0
 1004c20:	4770      	bx	lr

01004c22 <z_ready_thread>:
{
 1004c22:	b510      	push	{r4, lr}
 1004c24:	f04f 0320 	mov.w	r3, #32
 1004c28:	f3ef 8411 	mrs	r4, BASEPRI
 1004c2c:	f383 8812 	msr	BASEPRI_MAX, r3
 1004c30:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 1004c34:	f7fe fec2 	bl	10039bc <ready_thread>
	__asm__ volatile(
 1004c38:	f384 8811 	msr	BASEPRI, r4
 1004c3c:	f3bf 8f6f 	isb	sy
}
 1004c40:	bd10      	pop	{r4, pc}

01004c42 <z_thread_timeout>:
{
 1004c42:	4601      	mov	r1, r0
 1004c44:	b510      	push	{r4, lr}
	__asm__ volatile(
 1004c46:	f04f 0320 	mov.w	r3, #32
 1004c4a:	f3ef 8411 	mrs	r4, BASEPRI
 1004c4e:	f383 8812 	msr	BASEPRI_MAX, r3
 1004c52:	f3bf 8f6f 	isb	sy
		if (!killed) {
 1004c56:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 1004c5a:	f013 0f28 	tst.w	r3, #40	; 0x28
 1004c5e:	d10d      	bne.n	1004c7c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 1004c60:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 1004c64:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 1004c66:	b10b      	cbz	r3, 1004c6c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 1004c68:	f7ff ffa5 	bl	1004bb6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 1004c6c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 1004c70:	f023 0314 	bic.w	r3, r3, #20
 1004c74:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 1004c78:	f7fe fea0 	bl	10039bc <ready_thread>
	__asm__ volatile(
 1004c7c:	f384 8811 	msr	BASEPRI, r4
 1004c80:	f3bf 8f6f 	isb	sy
}
 1004c84:	bd10      	pop	{r4, pc}

01004c86 <add_to_waitq_locked>:
{
 1004c86:	b538      	push	{r3, r4, r5, lr}
 1004c88:	4604      	mov	r4, r0
 1004c8a:	460d      	mov	r5, r1
	unready_thread(thread);
 1004c8c:	f7fe feea 	bl	1003a64 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 1004c90:	7b63      	ldrb	r3, [r4, #13]
 1004c92:	f043 0302 	orr.w	r3, r3, #2
 1004c96:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 1004c98:	b195      	cbz	r5, 1004cc0 <add_to_waitq_locked+0x3a>
 1004c9a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 1004c9c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1004c9e:	429d      	cmp	r5, r3
 1004ca0:	d015      	beq.n	1004cce <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1004ca2:	b1a3      	cbz	r3, 1004cce <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 1004ca4:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 1004ca8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 1004cac:	4291      	cmp	r1, r2
 1004cae:	d008      	beq.n	1004cc2 <add_to_waitq_locked+0x3c>
		return b2 - b1;
 1004cb0:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 1004cb2:	2a00      	cmp	r2, #0
 1004cb4:	dd05      	ble.n	1004cc2 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 1004cb6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 1004cb8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 1004cbc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 1004cbe:	605c      	str	r4, [r3, #4]
}
 1004cc0:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 1004cc2:	686a      	ldr	r2, [r5, #4]
 1004cc4:	4293      	cmp	r3, r2
 1004cc6:	d002      	beq.n	1004cce <add_to_waitq_locked+0x48>
 1004cc8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1004cca:	2b00      	cmp	r3, #0
 1004ccc:	d1ec      	bne.n	1004ca8 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 1004cce:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 1004cd0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 1004cd4:	601c      	str	r4, [r3, #0]
	list->tail = node;
 1004cd6:	606c      	str	r4, [r5, #4]
}
 1004cd8:	e7f2      	b.n	1004cc0 <add_to_waitq_locked+0x3a>

01004cda <z_unpend1_no_timeout>:
{
 1004cda:	b510      	push	{r4, lr}
	__asm__ volatile(
 1004cdc:	f04f 0320 	mov.w	r3, #32
 1004ce0:	f3ef 8411 	mrs	r4, BASEPRI
 1004ce4:	f383 8812 	msr	BASEPRI_MAX, r3
 1004ce8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 1004cec:	f7ff ff93 	bl	1004c16 <z_priq_dumb_best>
		if (thread != NULL) {
 1004cf0:	4601      	mov	r1, r0
 1004cf2:	b108      	cbz	r0, 1004cf8 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
 1004cf4:	f7ff ff5f 	bl	1004bb6 <unpend_thread_no_timeout>
	__asm__ volatile(
 1004cf8:	f384 8811 	msr	BASEPRI, r4
 1004cfc:	f3bf 8f6f 	isb	sy
}
 1004d00:	4608      	mov	r0, r1
 1004d02:	bd10      	pop	{r4, pc}

01004d04 <z_unpend_first_thread>:
{
 1004d04:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 1004d06:	f04f 0320 	mov.w	r3, #32
 1004d0a:	f3ef 8511 	mrs	r5, BASEPRI
 1004d0e:	f383 8812 	msr	BASEPRI_MAX, r3
 1004d12:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 1004d16:	f7ff ff7e 	bl	1004c16 <z_priq_dumb_best>
		if (thread != NULL) {
 1004d1a:	4604      	mov	r4, r0
 1004d1c:	b120      	cbz	r0, 1004d28 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 1004d1e:	f7ff ff4a 	bl	1004bb6 <unpend_thread_no_timeout>
 1004d22:	3018      	adds	r0, #24
 1004d24:	f000 f823 	bl	1004d6e <z_abort_timeout>
	__asm__ volatile(
 1004d28:	f385 8811 	msr	BASEPRI, r5
 1004d2c:	f3bf 8f6f 	isb	sy
}
 1004d30:	4620      	mov	r0, r4
 1004d32:	bd38      	pop	{r3, r4, r5, pc}

01004d34 <z_sched_wake>:
{
 1004d34:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 1004d36:	f04f 0320 	mov.w	r3, #32
 1004d3a:	f3ef 8511 	mrs	r5, BASEPRI
 1004d3e:	f383 8812 	msr	BASEPRI_MAX, r3
 1004d42:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 1004d46:	f7ff ff66 	bl	1004c16 <z_priq_dumb_best>
		if (thread != NULL) {
 1004d4a:	4604      	mov	r4, r0
 1004d4c:	b150      	cbz	r0, 1004d64 <z_sched_wake+0x30>
 1004d4e:	6781      	str	r1, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 1004d50:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
 1004d52:	f7ff ff30 	bl	1004bb6 <unpend_thread_no_timeout>
 1004d56:	3018      	adds	r0, #24
 1004d58:	f000 f809 	bl	1004d6e <z_abort_timeout>
			ready_thread(thread);
 1004d5c:	4620      	mov	r0, r4
 1004d5e:	f7fe fe2d 	bl	10039bc <ready_thread>
			ret = true;
 1004d62:	2001      	movs	r0, #1
	__asm__ volatile(
 1004d64:	f385 8811 	msr	BASEPRI, r5
 1004d68:	f3bf 8f6f 	isb	sy
}
 1004d6c:	bd38      	pop	{r3, r4, r5, pc}

01004d6e <z_abort_timeout>:
{
 1004d6e:	b510      	push	{r4, lr}
	__asm__ volatile(
 1004d70:	f04f 0220 	mov.w	r2, #32
 1004d74:	f3ef 8411 	mrs	r4, BASEPRI
 1004d78:	f382 8812 	msr	BASEPRI_MAX, r2
 1004d7c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 1004d80:	6803      	ldr	r3, [r0, #0]
 1004d82:	b13b      	cbz	r3, 1004d94 <z_abort_timeout+0x26>
			remove_timeout(to);
 1004d84:	f7ff f8c6 	bl	1003f14 <remove_timeout>
			ret = 0;
 1004d88:	2000      	movs	r0, #0
	__asm__ volatile(
 1004d8a:	f384 8811 	msr	BASEPRI, r4
 1004d8e:	f3bf 8f6f 	isb	sy
}
 1004d92:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 1004d94:	f06f 0015 	mvn.w	r0, #21
 1004d98:	e7f7      	b.n	1004d8a <z_abort_timeout+0x1c>

01004d9a <z_set_timeout_expiry>:
{
 1004d9a:	b570      	push	{r4, r5, r6, lr}
 1004d9c:	4604      	mov	r4, r0
 1004d9e:	460d      	mov	r5, r1
	__asm__ volatile(
 1004da0:	f04f 0320 	mov.w	r3, #32
 1004da4:	f3ef 8611 	mrs	r6, BASEPRI
 1004da8:	f383 8812 	msr	BASEPRI_MAX, r3
 1004dac:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 1004db0:	f7ff f88a 	bl	1003ec8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 1004db4:	2801      	cmp	r0, #1
 1004db6:	dd05      	ble.n	1004dc4 <z_set_timeout_expiry+0x2a>
 1004db8:	42a0      	cmp	r0, r4
 1004dba:	db03      	blt.n	1004dc4 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 1004dbc:	4629      	mov	r1, r5
 1004dbe:	4620      	mov	r0, r4
 1004dc0:	f7fd fbbc 	bl	100253c <sys_clock_set_timeout>
	__asm__ volatile(
 1004dc4:	f386 8811 	msr	BASEPRI, r6
 1004dc8:	f3bf 8f6f 	isb	sy
}
 1004dcc:	bd70      	pop	{r4, r5, r6, pc}

01004dce <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 1004dce:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 1004dd0:	f7ff f990 	bl	10040f4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 1004dd4:	bd08      	pop	{r3, pc}

01004dd6 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
 1004dd6:	f7ff b98d 	b.w	10040f4 <sys_clock_tick_get>

01004dda <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 1004dda:	b108      	cbz	r0, 1004de0 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
 1004ddc:	f7fb bfd2 	b.w	1000d84 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 1004de0:	4770      	bx	lr

01004de2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 1004de2:	b510      	push	{r4, lr}
 1004de4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
 1004de6:	f7ff ffc2 	bl	1004d6e <z_abort_timeout>

	if (inactive) {
 1004dea:	b9b0      	cbnz	r0, 1004e1a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 1004dec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 1004dee:	b10b      	cbz	r3, 1004df4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 1004df0:	4620      	mov	r0, r4
 1004df2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 1004df4:	f104 0018 	add.w	r0, r4, #24
 1004df8:	f7ff ff6f 	bl	1004cda <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 1004dfc:	b168      	cbz	r0, 1004e1a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 1004dfe:	f7ff ff10 	bl	1004c22 <z_ready_thread>
	__asm__ volatile(
 1004e02:	f04f 0320 	mov.w	r3, #32
 1004e06:	f3ef 8011 	mrs	r0, BASEPRI
 1004e0a:	f383 8812 	msr	BASEPRI_MAX, r3
 1004e0e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 1004e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 1004e16:	f7ff bee8 	b.w	1004bea <z_reschedule_irqlock>
 1004e1a:	bd10      	pop	{r4, pc}

01004e1c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 1004e1c:	4770      	bx	lr
